using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Runtime.Caching;
using System.Text;
//using com.coo8.api.request;
//using com.coo8.api.response;
//using com.coo8.api;
using com;
using HozestERP.BusinessLogic.Caching;
using HozestERP.BusinessLogic.Codes;
using HozestERP.BusinessLogic.CustomerManagement;
using HozestERP.BusinessLogic.Data;
using HozestERP.BusinessLogic.ErrorLog;
using HozestERP.BusinessLogic.Infrastructure;
using HozestERP.Common;
using JdSdk;
using JdSdk.Domain;
using JdSdk.Domains;
using JdSdk.Request;
using JdSdk.Response;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Top.Api;
using Top.Api.Domain;
using Top.Api.Request;
using Top.Api.Response;
using JdSdk;
using JdSdk.Domain;
using JdSdk.Domains;
using JdSdk.Request;
using JdSdk.Response;


namespace HozestERP.BusinessLogic.ManageProject
{
    extern alias suning;

    using Configuration.Settings;
    using ManageInventory;
    using System.Web.Script.Serialization;
    public partial class XMOrderInfoAPIService : IXMOrderInfoAPIService
    {
        #region Fields
        /// <summary>
        /// Object context
        /// </summary>
        private readonly HozestERPObjectContext _context;
        /// <summary>
        /// Cache manager
        /// </summary>
        private readonly ICacheManager _cacheManager;

        private string orderstatus = "";//订单状态

        #endregion

        #region Ctor

        /// <summary>
        /// Ctor
        /// </summary>
        /// <param name="context">Object context</param>
        public XMOrderInfoAPIService(HozestERPObjectContext context)
        {
            this._context = context;
            this._cacheManager = new HozestERPRequestCache();
        }

        #endregion

        /// <summary>
        ///根据客户Id 查询对应的项目
        /// </summary>
        /// <param name="ClientId"></param>
        /// <returns></returns>
        public List<XMProject> GetXMProjectClientId(int ClientId)
        {
            var query = from p in this._context.XMProjects
                        where p.ClientId == ClientId
                        && !p.IsEnable.Value
                        select p;
            return query.ToList();
        }

        /// <summary>
        /// 查询发票管理 有未排单 未开票的记录自动排单
        /// </summary>
        /// <param name="orderCode"></param>
        public void AutoSingleRow(string orderCode)
        {
            //查询发票管理中未排单的 及 未开票的 记录  自动执行排单操作
            var InvoiceInfoList = IoC.Resolve<XMInvoiceInfoService>().GetXMInvoiceInfoListByOrderCode(orderCode)
                                                  .Where(x => x.IsScrap != true && x.IsSingleRow != true && x.InvoiceType != null && (x.IsBilling == null || x.IsBilling == false)).ToList();//发票
            if (InvoiceInfoList != null && InvoiceInfoList.Count > 0)
            {
                foreach (var item in InvoiceInfoList)
                {
                    if (item != null)
                    {
                        List<XMInvoiceInfoDetail> InvoiceDetailsList = IoC.Resolve<XMInvoiceInfoDetailService>().GetXMInvoiceInfoDetailListByInvoiceInfoID(item.ID);

                        if (InvoiceDetailsList.Count == 0)
                        {
                            return;
                        }
                        else
                        {
                            #region
                            var DeliveryList = IoC.Resolve<XMDeliveryService>().GetXMDeliveryByOrderCodeAndDeliveryTypeId(item.OrderCode, 481)
                                .Where(x => x.IsDelivery == false && x.IsShelve != true).ToList();//赠品

                            if (DeliveryList != null && DeliveryList.Count > 0)
                            {
                                XMDeliveryDetails deliverDetails = new XMDeliveryDetails();
                                deliverDetails.OrderNo = item.OrderCode;
                                deliverDetails.DetailsTypeId = 11;//赠品
                                deliverDetails.DeliveryId = DeliveryList[0].Id;
                                deliverDetails.ProductlId = 0;
                                deliverDetails.PlatformMerchantCode = "";
                                deliverDetails.PrdouctName = "发票";
                                deliverDetails.Specifications = "";
                                deliverDetails.ProductNum = 1;
                                deliverDetails.InvoiceInfoID = item.ID;
                                deliverDetails.IsEnabled = false;
                                deliverDetails.CreateID = HozestERPContext.Current.User.CustomerID;
                                deliverDetails.CreateDate = DateTime.Now;
                                deliverDetails.UpdateID = HozestERPContext.Current.User.CustomerID;
                                deliverDetails.UpdateDate = DateTime.Now;
                                IoC.Resolve<XMDeliveryDetailsService>().InsertXMDeliveryDetails(deliverDetails);
                            }
                            else
                            {
                                //新增
                                HozestERP.BusinessLogic.ManageProject.XMDelivery xd = new HozestERP.BusinessLogic.ManageProject.XMDelivery();
                                xd.DeliveryTypeId = 722;//发票
                                xd.DeliveryNumber = "ZP" + DateTime.Now.ToString("yyyyMMddHHmmssfff");//赠品发货单号（自动生成）
                                xd.OrderCode = item.OrderCode;
                                xd.Price = 0;//运费
                                //xd.Shipper = Shipper;//发货方
                                //备用地址
                                var SpareAddress = IoC.Resolve<XMSpareAddressService>().GetXMSpareAddressByParm(item.ID, 721);
                                if (SpareAddress != null)
                                {
                                    xd.FullName = SpareAddress.FullName;
                                    xd.Mobile = SpareAddress.Mobile;
                                    xd.Tel = SpareAddress.Tel;
                                    xd.Province = SpareAddress.Province;
                                    xd.City = SpareAddress.City;
                                    xd.County = SpareAddress.County;
                                    xd.DeliveryAddress = SpareAddress.DeliveryAddress;
                                }
                                else
                                {
                                    var OrderInfo = IoC.Resolve<XMOrderInfoService>().GetXMOrderByOrderCode(item.OrderCode);
                                    if (OrderInfo != null)
                                    {
                                        xd.FullName = OrderInfo.FullName;
                                        xd.Mobile = OrderInfo.Mobile;
                                        xd.Tel = OrderInfo.Tel;
                                        xd.Province = OrderInfo.Province;
                                        xd.City = OrderInfo.City;
                                        xd.County = OrderInfo.County;
                                        xd.DeliveryAddress = OrderInfo.DeliveryAddress;
                                    }
                                    else
                                    {
                                        return;
                                    }
                                }

                                xd.IsDelivery = false;//是否发货
                                xd.IsEnabled = false;
                                xd.CreateId = HozestERPContext.Current.User.CustomerID;
                                xd.CreateDate = DateTime.Now;
                                xd.UpdateId = HozestERPContext.Current.User.CustomerID;
                                xd.UpdateDate = DateTime.Now;
                                xd.PrintQuantity = 0;//打印次数
                                xd.PrintBatch = 0;//打印批次
                                IoC.Resolve<XMDeliveryService>().InsertXMDelivery(xd);

                                XMDeliveryDetails deliverDetails = new XMDeliveryDetails();
                                deliverDetails.OrderNo = item.OrderCode;
                                deliverDetails.DetailsTypeId = 11;//赠品
                                deliverDetails.DeliveryId = xd.Id;
                                deliverDetails.ProductlId = 0;
                                deliverDetails.PlatformMerchantCode = "";
                                deliverDetails.PrdouctName = "发票";
                                deliverDetails.Specifications = "";
                                deliverDetails.ProductNum = 1;
                                deliverDetails.InvoiceInfoID = item.ID;
                                deliverDetails.IsEnabled = false;
                                deliverDetails.CreateID = HozestERPContext.Current.User.CustomerID;
                                deliverDetails.CreateDate = DateTime.Now;
                                deliverDetails.UpdateID = HozestERPContext.Current.User.CustomerID;
                                deliverDetails.UpdateDate = DateTime.Now;
                                IoC.Resolve<XMDeliveryDetailsService>().InsertXMDeliveryDetails(deliverDetails);
                            }
                            #endregion
                            #region 修改发票排单状态

                            item.IsSingleRow = true;
                            item.UpdateID = HozestERPContext.Current.User.CustomerID;
                            item.UpdateDate = DateTime.Now;
                            IoC.Resolve<XMInvoiceInfoService>().UpdateXMInvoiceInfo(item);

                            #endregion
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 唯品会根据下单时间查询订单数据
        /// </summary>
        /// <param name="xMProjectId"></param>
        /// <param name="NickId"></param>
        /// <param name="OrderCode"></param>
        /// <param name="PartNo"></param>
        /// <param name="FullName"></param>
        /// <param name="status"></param>
        /// <param name="PlatformTypeNameId"></param>
        /// <param name="PrdouctName"></param>
        /// <param name="dtStartOrderInfoCreateDate"></param>
        /// <param name="dtEndOrderInfoCreateDate"></param>
        /// <param name="IsAudit"></param>
        /// <param name="remarks"></param>
        /// <returns></returns>
        public List<XMOrderInfo> GetXMOrderInfoByCreateDate(int timetype, int xMProjectId, string NickId, string OrderCode, string PartNo, string FullName, string[] status, int PlatformTypeNameId, string PrdouctName, DateTime? dtStartOrderInfoCreateDate, DateTime? dtEndOrderInfoCreateDate, int IsAudit, bool remarks, int IsScapling, int IsAbnormal, string SourceType, bool IsCM)
        {
            int?[] nicklist = Array.ConvertAll<string, int?>(NickId.Split(','), delegate(string s) { return int.Parse(s); });
            int nick_id = -1;
            if (nicklist.Count() > 0 && nicklist[0] == -1)
            {
                nick_id = int.Parse(nicklist[0].ToString());
            }
            List<XMOrderInfo> list = new List<XMOrderInfo>();
            IQueryable<XMOrderInfo> queryFalse = null;
            //创单时间
            if (timetype == 1)
            {
                queryFalse = from p in this._context.XMOrderInfoes
                             join b in this._context.XMNicks
                             on p.NickID equals b.nick_id
                             where //OrderCode.Contains(p.OrderCode) //p.OrderCode.Contains(OrderCode)
                              (xMProjectId == -1 || b.ProjectId == xMProjectId)
                             && (nick_id == -1 || nicklist.Contains(p.NickID))  //店铺
                             && (FullName == "" || p.FullName.Contains(FullName))
                             && (status.Contains(p.OrderStatus) || status.Contains("-1"))
                             && (PlatformTypeNameId == -1 || p.PlatformTypeId == PlatformTypeNameId)
                             && ((dtStartOrderInfoCreateDate == null && dtEndOrderInfoCreateDate == null)
                             || (p.OrderInfoCreateDate >= dtStartOrderInfoCreateDate && p.OrderInfoCreateDate < dtEndOrderInfoCreateDate))
                             && (IsScapling == -1 || p.IsScalping.Value.Equals(IsScapling == 0 ? false : true))
                             && (IsAbnormal == -1 || (IsAbnormal == 0 && p.IsAbnormal == null) || (IsAbnormal == 0 && p.IsAbnormal == false) || (IsAbnormal == 1 && p.IsAbnormal == true))
                             && p.IsEnable == false
                             && (SourceType == "-1" || p.SourceType == SourceType)
                             orderby p.CreateDate descending, p.OrderCode descending
                             select p;
            }
            //付款时间
            else if (timetype == 2)
            {
                queryFalse = from p in this._context.XMOrderInfoes
                             join b in this._context.XMNicks
                              on p.NickID equals b.nick_id
                             where //OrderCode.Contains(p.OrderCode) //p.OrderCode.Contains(OrderCode)
                              (xMProjectId == -1 || b.ProjectId == xMProjectId)
                             && (nick_id == -1 || nicklist.Contains(p.NickID))  //店铺
                             && (FullName == "" || p.FullName.Contains(FullName))
                             && (status.Contains(p.OrderStatus) || status.Contains("-1"))
                             && (PlatformTypeNameId == -1 || p.PlatformTypeId == PlatformTypeNameId)
                             && ((dtStartOrderInfoCreateDate == null && dtEndOrderInfoCreateDate == null)
                             || (p.PayDate >= dtStartOrderInfoCreateDate && p.PayDate < dtEndOrderInfoCreateDate))
                             && (IsScapling == -1 || p.IsScalping.Value.Equals(IsScapling == 0 ? false : true))
                             && (IsAbnormal == -1 || (IsAbnormal == 0 && p.IsAbnormal == null) || (IsAbnormal == 0 && p.IsAbnormal == false) || (IsAbnormal == 1 && p.IsAbnormal == true))
                             && p.IsEnable == false
                             && (SourceType == "-1" || p.SourceType == SourceType)
                             orderby p.CreateDate descending, p.OrderCode descending
                             select p;
            }
            //发货时间
            else if (timetype == 3)
            {
                queryFalse = from p in this._context.XMOrderInfoes
                             join b in this._context.XMNicks
                              on p.NickID equals b.nick_id
                             where //OrderCode.Contains(p.OrderCode) //p.OrderCode.Contains(OrderCode)
                              (xMProjectId == -1 || b.ProjectId == xMProjectId)
                             && (nick_id == -1 || nicklist.Contains(p.NickID))  //店铺
                             && (FullName == "" || p.FullName.Contains(FullName))
                             && (status.Contains(p.OrderStatus) || status.Contains("-1"))
                             && (PlatformTypeNameId == -1 || p.PlatformTypeId == PlatformTypeNameId)
                             && ((dtStartOrderInfoCreateDate == null && dtEndOrderInfoCreateDate == null)
                             || (p.DeliveryTime >= dtStartOrderInfoCreateDate && p.DeliveryTime < dtEndOrderInfoCreateDate))
                             && (IsScapling == -1 || p.IsScalping.Value.Equals(IsScapling == 0 ? false : true))
                             && (IsAbnormal == -1 || (IsAbnormal == 0 && p.IsAbnormal == null) || (IsAbnormal == 0 && p.IsAbnormal == false) || (IsAbnormal == 1 && p.IsAbnormal == true))
                             && p.IsEnable == false
                             && (SourceType == "-1" || p.SourceType == SourceType)
                             orderby p.CreateDate descending, p.OrderCode descending
                             select p;
            }
            //完成时间
            else if (timetype == 4)
            {
                queryFalse = from p in this._context.XMOrderInfoes
                             join b in this._context.XMNicks
                              on p.NickID equals b.nick_id
                             where //OrderCode.Contains(p.OrderCode) //p.OrderCode.Contains(OrderCode)
                              (xMProjectId == -1 || b.ProjectId == xMProjectId)
                             && (nick_id == -1 || nicklist.Contains(p.NickID))  //店铺
                             && (FullName == "" || p.FullName.Contains(FullName))
                             && (status.Contains(p.OrderStatus) || status.Contains("-1"))
                             && (PlatformTypeNameId == -1 || p.PlatformTypeId == PlatformTypeNameId)
                             && ((dtStartOrderInfoCreateDate == null && dtEndOrderInfoCreateDate == null)
                             || (p.CompletionTime >= dtStartOrderInfoCreateDate && p.CompletionTime < dtEndOrderInfoCreateDate))
                             && (IsScapling == -1 || p.IsScalping.Value.Equals(IsScapling == 0 ? false : true))
                             && (IsAbnormal == -1 || (IsAbnormal == 0 && p.IsAbnormal == null) || (IsAbnormal == 0 && p.IsAbnormal == false) || (IsAbnormal == 1 && p.IsAbnormal == true))
                             && p.IsEnable == false
                             && (SourceType == "-1" || p.SourceType == SourceType)
                             orderby p.CreateDate descending, p.OrderCode descending
                             select p;
            }

            if (OrderCode != "")
            {
                List<string> OrderCodeListNew = new List<string>();

                if (OrderCode.IndexOf(",") > -1)
                {
                    string[] OrderCodestr = OrderCode.Split(',');
                    OrderCodeListNew = new List<string>(OrderCodestr);
                }
                else if (OrderCode.IndexOf("，") > -1)
                {
                    string[] OrderCodestr = OrderCode.Split('，');
                    OrderCodeListNew = new List<string>(OrderCodestr);
                }
                else
                {
                    OrderCodeListNew.Add(OrderCode);
                }
                queryFalse = from p in queryFalse
                             where OrderCodeListNew.Contains(p.OrderCode)
                             select p;
            }
            //商品编号
            if (PartNo != null && PartNo != "")
            {
                queryFalse = from p in queryFalse
                             join c in this._context.XMOrderInfoProductDetails
                             on p.ID equals c.OrderInfoID
                             into JoinedEmpDept
                             from c in JoinedEmpDept.DefaultIfEmpty()
                             where c.PlatformMerchantCode.Contains(PartNo)
                             select p;
            }
            //商品名称
            if (PrdouctName != null && PrdouctName != "")
            {
                queryFalse = from p in queryFalse
                             join c in this._context.XMOrderInfoProductDetails
                             on p.ID equals c.OrderInfoID
                             into JoinedEmpDept
                             from c in JoinedEmpDept.DefaultIfEmpty()
                             where c.ProductName.Contains(PrdouctName)
                             select p;
            }
            //是否审核
            if (IsAudit != null && IsAudit != -1)
            {
                queryFalse = from p in queryFalse
                             join c in this._context.XMOrderInfoProductDetails
                             on p.ID equals c.OrderInfoID
                             into JoinedEmpDept
                             from c in JoinedEmpDept.DefaultIfEmpty()
                             where c.IsAudit.Value.Equals(IsAudit == 0 ? false : true)
                             select p;
            }
            //异常备注
            if (remarks == true)
            {
                queryFalse = from p in queryFalse
                             where ((!p.CustomerServiceRemark.Contains("能发就发")) && (!p.CustomerServiceRemark.Contains("当天发")) && (!p.CustomerServiceRemark.Contains("加急")) && (!p.CustomerServiceRemark.Contains("等通知")))
                             select p;
            }

            //筛选呼噜噜订单
            queryFalse = from p in queryFalse
                         join c in this._context.XMOrderInfoProductDetails
                         on p.ID equals c.OrderInfoID
                         into JoinedEmpDept
                         from c in JoinedEmpDept.DefaultIfEmpty()
                         where (IsCM && (c.PlatformMerchantCode.StartsWith("CM") || c.PlatformMerchantCode == ""))
                         || (!IsCM && !c.PlatformMerchantCode.StartsWith("CM") && c.PlatformMerchantCode != "")
                         select p;

            return queryFalse.ToList().Distinct().ToList();
        }

        /// <summary>
        /// 订单信息
        /// </summary>
        public List<XMOrderInfo> GetXMOrderInfoListOther(int xMProjectId, int NickId, string OrderCode, string FullName, string Status, int PlatformTypeId, DateTime? dtStartTime, DateTime? dtEndTime, int IsAudit, bool Remarks, int IsScalping, int IsAbnormal, int TimeType, string SourceType, string WantID)
        {
            string OrderCodes = "";
            if (OrderCode != "")
            {
                foreach (string oc in OrderCode.Split(','))
                {
                    if (OrderCodes != "")
                        OrderCodes += ",";
                    OrderCodes += "'" + oc.Trim() + "'";
                }
            }

            string param = "";//状态、备注 
            if (Status == "-1")
            {
                if (Remarks == true)
                {
                    param = " AND ( NOT (d.[CustomerServiceRemark] LIKE N'%加急%')) AND ( NOT (d.[CustomerServiceRemark] LIKE N'%能发就发%')) AND ( NOT (d.[CustomerServiceRemark] LIKE N'%当天发%')) AND ( NOT (d.[CustomerServiceRemark] LIKE N'%等通知%')) ";//状态、备注
                }
                else
                {
                    param = " and 1=1 ";//备注
                }
            }
            else
            {
                if (Remarks == true)
                {
                    param = " and (d.[OrderStatus] = '" + Status + "') AND ( NOT (d.[CustomerServiceRemark] LIKE N'%加急%')) AND ( NOT (d.[CustomerServiceRemark] LIKE N'%能发就发%')) AND ( NOT (d.[CustomerServiceRemark] LIKE N'%当天发%')) AND ( NOT (d.[CustomerServiceRemark] LIKE N'%等通知%')) ";//状态、备注
                }
                else
                {
                    param = " and (d.[OrderStatus] = '" + Status + "') ";//状态
                }
            }

            string lx = "";
            if (TimeType == 1)//创单时间
            {
                lx = "AND ('" + dtStartTime + "' = '' OR (d.OrderInfoCreateDate >= '" + dtStartTime + "')) "
                    + "AND ('" + dtEndTime + "' = '' OR (d.OrderInfoCreateDate < '" + dtEndTime + "')) ";
            }
            else if (TimeType == 2)//付款时间
            {
                lx = "AND ('" + dtStartTime + "' = '' OR (d.PayDate >= '" + dtStartTime + "')) "
                    + "AND ('" + dtEndTime + "' = '' OR (d.PayDate < '" + dtEndTime + "')) ";
            }
            else if (TimeType == 3)//发货时间
            {
                lx = "AND ('" + dtStartTime + "' = '' OR (d.DeliveryTime >= '" + dtStartTime + "')) "
                    + "AND ('" + dtEndTime + "' = '' OR (d.DeliveryTime < '" + dtEndTime + "')) ";
            }
            else if (TimeType == 4)//付款时间
            {
                lx = "AND ('" + dtStartTime + "' = '' OR (d.CompletionTime >= '" + dtStartTime + "')) "
                    + "AND ('" + dtEndTime + "' = '' OR (d.CompletionTime < '" + dtEndTime + "')) ";
            }

            //数据来源
            if (SourceType != "-1")
            {
                lx = lx + " and d.SourceType = '" + SourceType + "' ";
            }

            string ordera = "";
            if (OrderCodes != "")
            {
                ordera = "and (d.[OrderCode]  in  (" + OrderCodes + "))";
            }

            string sql = "select * from XM_OrderInfo d "
                        + " INNER join  XM_Nick  b "
                        + " on d.NickID=b.nick_id "
                        + " left join XM_OrderInfoProductDetails  a "
                        + " on a.OrderInfoId=d.Id "
                        + " WHERE (" + xMProjectId + " = -1 OR b.[ProjectId] = " + xMProjectId + ")  "
                //+ " AND (a.[PlatformMerchantCode] LIKE '%" + PartNo + "%' or (a.[PlatformMerchantCode] is null and '" + PartNo + "'='')) "
                        + " AND (a.[PlatformMerchantCode] <>'1063737519' and  a.[PlatformMerchantCode] <>'1064377859') "
                        + " AND (('" + FullName + "' != '' and d.[FullName] LIKE '%" + FullName + "%') or '" + FullName + "' = '') "
                        + " AND (('" + WantID + "' != '' and d.[WantID] LIKE '%" + WantID + "%') or '" + WantID + "' = '') "
                        + " AND (" + PlatformTypeId + " = -1 OR d.[PlatformTypeId] = " + PlatformTypeId + ")  "
                        + " AND (" + IsAudit + " = -1 or (( d.[IsAudit] is null or d.[IsAudit] = 0 ) and " + IsAudit + " = 0 ) or ( d.[IsAudit] = 1 and " + IsAudit + " = 1)) "
                //+ " AND (" + IsEvaluate + "= -1 OR d.[IsEvaluate] = (CASE WHEN (0 = " + IsEvaluate + ") THEN cast(0 as bit) ELSE cast(1 as bit) END)) "
                //+ " AND (" + IsSentGifts + " = -1 OR d.[IsSentGifts] = (CASE WHEN (0 = " + IsSentGifts + ") THEN cast(0 as bit) ELSE cast(1 as bit) END)) "
                        + " AND (d.[IsScalping] is null or d.[IsScalping]=" + IsScalping + ") "
                        + " AND ((" + IsAbnormal + " = -1) OR (" + IsAbnormal + " = 0 AND d.[IsAbnormal] is null) OR (" + IsAbnormal + "= 0 AND d.[IsAbnormal]=0) OR (" + IsAbnormal + " = 1 AND d.[IsAbnormal]=1)) "
                        + " AND d.IsEnable = 0 "
                        + " AND ((d.[NickID] = 32 and a.PlatformMerchantCode is not null and a.PlatformMerchantCode != '' and a.PlatformMerchantCode not LIKE 'CM%') or d.[NickID] != 32) ";
            //+ " AND d.[IsOurOrder] = " + IsOurOrder + "";
            //+ " AND (a.ProductName LIKE '%" + PrdouctName + "%' or (a.ProductName is null and '" + PrdouctName + "'=''))";

            if (NickId == 99) //某个项目店铺权限，选择有权限的店铺
            {
                var nickList = this.GetXMNickListSS("", Convert.ToInt32(true), xMProjectId, HozestERPContext.Current.User.CustomerID, 0);
                string nickids = "";
                for (int i = 0; i < nickList.Count; i++)
                {
                    nickids = nickids + nickList[i].nick_id + ",";
                }
                if (nickids.Length > 0)
                {
                    nickids = nickids.Substring(0, nickids.Length - 1);
                }
                sql += " AND ( d.[NickID] in(" + nickids + "))  ";
            }
            else
            {
                sql += " AND (" + NickId + " = -1 OR d.[NickID] =" + NickId + ")  ";
            }
            var orderby = " ORDER BY d.[DeliveryTime] DESC, d.[OrderCode] DESC";

            sql = sql + lx + ordera + param + orderby;
            var queryFalse = this._context.ExecuteStoreQuery<XMOrderInfo>(sql);//.ToList();
            return queryFalse.GroupBy(p => p.OrderCode).Select(g => g.First()).ToList();
        }

        /// <summary>
        /// 订单信息(根据创单时间查询)
        /// </summary>
        /// <param name="xMProjectId">项目id </param>
        /// <param name="NickId">店铺id </param>
        /// <param name="OrderCode">订单编号</param>
        /// <param name="PartNo">商品编码</param> 
        /// <param name="FullName">姓名</param> 
        /// <param name="OrderStatusId">订单状态</param>
        /// <param name="PlatformTypeId">平台类型</param>
        /// <param name="PrdouctName">产品名称</param> 
        /// <param name="dtStartTime">创单开始时间</param>
        /// <param name="dtEndTime">创单结束时间</param>
        /// <param name="IsAudit">是否审核</param>
        /// <returns></returns>
        public List<XMOrderInfo> GetXMOrderInfoListSearch(int xMProjectId, int NickId, string OrderCode, string FullName, string Status, int PlatformTypeId, DateTime? dtStartTime, DateTime? dtEndTime, int IsAudit, bool Remarks, int IsScalping, int IsAbnormal, int TimeType, string SourceType, string WantID, int IsOurOrder, string Mobile, string Address
            , int WaitNotice, int Urgent, int CanDeliver, int AppointDeliveryTime, DateTime AppointDeliveryBeginDate, DateTime AppointDeliveryEndDate, string CustomerServiceRemark)
        {
            //未发货查找类型
            int NotDeliverySearchType = WaitNotice + Urgent + CanDeliver + AppointDeliveryTime;

            string OrderCodes = "";
            if (OrderCode != "")
            {
                foreach (string oc in OrderCode.Split(','))
                {
                    if (OrderCodes != "")
                        OrderCodes += ",";
                    OrderCodes += "'" + oc.Trim() + "'";
                }
            }

            string param = "";//状态、备注 
            if (Status == "-1")
            {
                if (Remarks == true)
                {
                    param = " AND ( NOT (d.[CustomerServiceRemark] LIKE N'%加急%' and d.[CustomerServiceRemark] LIKE N'%小城%')) AND ( NOT (d.[CustomerServiceRemark] LIKE N'%能发就发%'  and d.[CustomerServiceRemark] LIKE N'%小城%')) AND ( NOT (d.[CustomerServiceRemark] LIKE N'%当天发%'  and d.[CustomerServiceRemark] LIKE N'%小城%')) AND ( NOT (d.[CustomerServiceRemark] LIKE N'%等通知%'  and d.[CustomerServiceRemark] LIKE N'%小城%')) ";//状态、备注
                }
                else
                {
                    param = " and 1=1 ";//备注
                }
            }
            else
            {
                if (Remarks == true)
                {
                    param = " and (d.[OrderStatus] = '" + Status + "') AND ( NOT (d.[CustomerServiceRemark] LIKE N'%加急%'  and d.[CustomerServiceRemark] LIKE N'%小城%')) AND ( NOT (d.[CustomerServiceRemark] LIKE N'%能发就发%'  and d.[CustomerServiceRemark] LIKE N'%小城%')) AND ( NOT (d.[CustomerServiceRemark] LIKE N'%当天发%'  and d.[CustomerServiceRemark] LIKE N'%小城%')) AND ( NOT (d.[CustomerServiceRemark] LIKE N'%等通知%'  and d.[CustomerServiceRemark] LIKE N'%小城%')) ";//状态、备注
                }
                else
                {
                    param = " and (d.[OrderStatus] = '" + Status + "') ";//状态
                }
            }

            string lx = "";
            if (TimeType == 1)//创单时间
            {
                lx = "AND ('" + dtStartTime + "' = '' OR (d.OrderInfoCreateDate >= '" + dtStartTime + "')) "
                    + "AND ('" + dtEndTime + "' = '' OR (d.OrderInfoCreateDate < '" + dtEndTime + "')) ";
            }
            else if (TimeType == 2)//付款时间
            {
                lx = "AND ('" + dtStartTime + "' = '' OR (d.PayDate >= '" + dtStartTime + "')) "
                    + "AND ('" + dtEndTime + "' = '' OR (d.PayDate < '" + dtEndTime + "')) ";
            }
            else if (TimeType == 3)//发货时间
            {
                lx = "AND ('" + dtStartTime + "' = '' OR (d.DeliveryTime >= '" + dtStartTime + "')) "
                    + "AND ('" + dtEndTime + "' = '' OR (d.DeliveryTime < '" + dtEndTime + "')) ";
            }
            else if (TimeType == 4)//付款时间
            {
                lx = "AND ('" + dtStartTime + "' = '' OR (d.CompletionTime >= '" + dtStartTime + "')) "
                    + "AND ('" + dtEndTime + "' = '' OR (d.CompletionTime < '" + dtEndTime + "')) ";
            }
             
            //数据来源
            if (SourceType != "-1")
            {
                lx = lx + " and d.SourceType = '" + SourceType + "' ";
            }

            string ordera = "";
            if (OrderCodes != "")
            {
                ordera = "and (d.[OrderCode] in (" + OrderCodes + "))";
            }

            string sql = " select * from XM_OrderInfo d "
                        + " INNER join  XM_Nick  b "
                        + " on d.NickID=b.nick_id "
                //+ " left join XM_OrderInfoProductDetails  a "
                //+ " on a.OrderInfoId=d.Id "
                        + " WHERE (" + xMProjectId + " = -1 OR " + xMProjectId + " = 99 OR b.[ProjectId] = " + xMProjectId + ") "
                //+ " AND (a.[PlatformMerchantCode] LIKE '%" + PartNo + "%' or (a.[PlatformMerchantCode] is null and '" + PartNo + "'=''))  "
                //+ " AND ((a.[PlatformMerchantCode] <>'1063737519' and  a.[PlatformMerchantCode] <>'1064377859') or (a.[PlatformMerchantCode] is null and '" + PartNo + "'='')) "
                        + " AND (('" + FullName + "' != '' and d.[FullName] LIKE '%" + FullName + "%') or '" + FullName + "' = '') "
                        + " AND (('" + WantID + "' != '' and d.[WantID] LIKE '%" + WantID + "%') or '" + WantID + "' = '') "
                        + " AND (" + PlatformTypeId + " = -1 OR d.[PlatformTypeId] = " + PlatformTypeId + ")  "
                        + " AND (" + IsAudit + " = -1 or (( d.[IsAudit] is null or d.[IsAudit] = 0 ) and " + IsAudit + " = 0 ) or ( d.[IsAudit] = 1 and " + IsAudit + " = 1)) "
                        + " AND (d.[IsScalping] is null or d.[IsScalping]=" + IsScalping + ")  "
                        + " AND ((" + IsAbnormal + " = -1) OR (" + IsAbnormal + " = 0 AND d.[IsAbnormal] is null) OR (" + IsAbnormal + "= 0 AND d.[IsAbnormal]=0) OR (" + IsAbnormal + " = 1 AND d.[IsAbnormal]=1)) "
                        + " AND d.[IsEnable] = 0 "
                        + " AND d.[IsOurOrder] = " + IsOurOrder
                        + " AND ( '" + Address + "' = '' OR d.[Province] + d.[City] + d.[County] + d.[DeliveryAddress] like '%" + Address + "%')"
                        + " AND ( '" + CustomerServiceRemark + "' = '' OR d.[CustomerServiceRemark] like '%" + CustomerServiceRemark + "%')"
                        + " AND (" + NotDeliverySearchType + "=0 OR (" + WaitNotice + " = 1 and d.[CustomerServiceRemark] like '%/等通知%') OR (" + Urgent + " = 1 and d.[CustomerServiceRemark] like '%/加急%')"
                                                              + " OR (" + CanDeliver + " = 1 and d.[CustomerServiceRemark] like '%/能发就发%') OR (" + AppointDeliveryTime + " = 1 and d.[AppointDeliveryTime] is not null and d.[AppointDeliveryTime] >= '" + AppointDeliveryBeginDate + "' and d.[AppointDeliveryTime] <= '" + AppointDeliveryEndDate + "'))"
                        + " AND ( '" + Mobile + "' = '' OR d.[Mobile] = '" + Mobile + "')";
            //+ " AND (a.ProductName LIKE '%" + PrdouctName + "%' or (a.ProductName is null and '" + PrdouctName + "'=''))";

            if (NickId == 99) //某个项目店铺权限，选择有权限的店铺
            {
                var nickList = this.GetXMNickListSS("", Convert.ToInt32(true), xMProjectId, HozestERPContext.Current.User.CustomerID, 0);
                string nickids = "";
                for (int i = 0; i < nickList.Count; i++)
                {
                    nickids = nickids + nickList[i].nick_id + ",";
                }
                if (nickids.Length > 0)
                {
                    nickids = nickids.Substring(0, nickids.Length - 1);
                }
                sql += " AND ( d.[NickID] in(" + nickids + ")) ";
            }
            else
            {
                sql += " AND (" + NickId + " = -1 OR d.[NickID] =" + NickId + ") ";
            }

            var orderby = " ORDER BY d.[DeliveryTime] DESC, d.[OrderCode] DESC";

            sql = sql + lx + ordera + param + orderby;
            var queryTrue = this._context.ExecuteStoreQuery<XMOrderInfo>(sql);//.ToList();

            return queryTrue.GroupBy(p => p.OrderCode).Select(g => g.First()).ToList();
        }

        #region

        public string XMOrderInfoDate(string param, string[] value, string OrderCodes, string timetype)
        {

            string sql = "";

            if (OrderCodes != "")
            {
                sql = string.Format(@"  select * from XM_OrderInfo d 
                        INNER join  XM_Nick  b 
                        on d.NickID=b.nick_id
                        left join XM_OrderInfoProductDetails  a
                        on a.OrderInfoId=d.Id
                         WHERE (d.[OrderCode]  in  ({0}) )  
	                        AND ({1} = -1 OR b.[ProjectId] = {2}) 
	                        AND ({3} = -1 OR d.[NickID] ={4}) 
	                        AND (a.[PlatformMerchantCode] LIKE '%{5}%' or a.[PlatformMerchantCode] is null) 
                            AND ((a.[PlatformMerchantCode] <>'1063737519' and  a.[PlatformMerchantCode] <>'1064377859') or a.[PlatformMerchantCode] is null)
	                        AND (d.[FullName] LIKE '%{6}%' )   
	                        AND ({7} = -1 OR d.[PlatformTypeId] = {8}) 
	                        AND ({11} = -1 or a.[IsAudit] is null OR a.[IsAudit] = (CASE WHEN (0 = {12}) THEN cast(0 as bit) ELSE cast(1 as bit) END)) 
	                        AND ({13} = -1 OR d.[IsEvaluate] = (CASE WHEN (0 = {14}) THEN cast(0 as bit) ELSE cast(1 as bit) END)) 
	                        AND ({15} = -1 OR d.[IsSentGifts] = (CASE WHEN (0 = {16}) THEN cast(0 as bit) ELSE cast(1 as bit) END)) 
	                        AND ({18} = -1 OR d.[IsScalping] = (CASE WHEN (0 = {18}) THEN cast(0 as bit) ELSE cast(1 as bit) END)) 
	                        AND (({19} = -1) OR ({19} = 0 AND d.[IsAbnormal] is null) OR ({19} = 0 AND d.[IsAbnormal]=0) OR ({19} = 1 AND d.[IsAbnormal]=1))  
	                        {17}
                            {20}
	                        AND d.IsEnable='false'
	                        ORDER BY d.[DeliveryTime] DESC, d.[OrderCode] DESC", value[0], value[1], value[2], value[3], value[4], value[5], value[6],
                 value[7], value[8], value[11], value[12], value[13], value[14], value[15], value[16], value[17], value[18], param, value[20], value[21], timetype);
            }
            else
            {
                sql = string.Format(@"  select * from XM_OrderInfo d 
                        INNER join  XM_Nick  b 
                        on d.NickID=b.nick_id
                        left join XM_OrderInfoProductDetails  a
                        on a.OrderInfoId=d.Id
                         WHERE  (d.[OrderCode] LIKE '%{0}%' )  
                            AND  ({1} = -1 OR b.[ProjectId] = {2}) 
	                        AND ({3} = -1 OR d.[NickID] ={4}) 
	                        AND (a.[PlatformMerchantCode] LIKE '%{5}%' or a.[PlatformMerchantCode] is null) 
                            AND ((a.[PlatformMerchantCode] <>'1063737519' and  a.[PlatformMerchantCode] <>'1064377859') or a.[PlatformMerchantCode] is null)
	                        AND (d.[FullName] LIKE '%{6}%' )   
	                        AND ({7} = -1 OR d.[PlatformTypeId] = {8}) 
	                        AND ({11} = -1 or a.[IsAudit] is null OR a.[IsAudit] = (CASE WHEN (0 = {12}) THEN cast(0 as bit) ELSE cast(1 as bit) END)) 
	                        AND ({13} = -1 OR d.[IsEvaluate] = (CASE WHEN (0 = {14}) THEN cast(0 as bit) ELSE cast(1 as bit) END)) 
	                        AND ({15} = -1 OR d.[IsSentGifts] = (CASE WHEN (0 = {16}) THEN cast(0 as bit) ELSE cast(1 as bit) END)) 
	                        AND ({18} = -1 OR d.[IsScalping] = (CASE WHEN (0 = {18}) THEN cast(0 as bit) ELSE cast(1 as bit) END)) 
	                        AND (({19} = -1) OR ({19} = 0 AND d.[IsAbnormal] is null) OR ({19} = 0 AND d.[IsAbnormal]=0) OR ({19} = 1 AND d.[IsAbnormal]=1))  
	                       {17}
                           {20}
	                        AND d.IsEnable='false'
	                        ORDER BY d.[DeliveryTime] DESC, d.[OrderCode] DESC", value[0], value[1], value[2], value[3], value[4], value[5], value[6],
                                       value[7], value[8], value[11], value[12], value[13], value[14], value[15], value[16], value[17], value[18], param, value[20], value[21], timetype);
            }

            return sql;
            //inner join XM_ProductDetails c
            //            ON (a.PlatformMerchantCode = c.PlatformMerchantCode)  
            //                or((a.PlatformMerchantCode = c.PlatformMerchantCode)OR ((a.PlatformMerchantCode IS NULL)  AND (c.PlatformMerchantCode IS NULL))) 
            //                or ((a.PlatformMerchantCode = c.PlatformMerchantCode) OR ((a.PlatformMerchantCode IS NULL)  AND (c.PlatformMerchantCode IS NULL)))
            //            inner join XM_Product e
            //                on c.ProductId=e.Id
            //                AND ({9} = -1 OR e.[BrandTypeId] = {10}) AND (e.[ProductName] LIKE  '%{19}%' )

        }
        #endregion
        public string XMOrderInfoCreateDate(string param, string[] value, string OrderCodes, string timetype)
        {
            string sql = "";
            if (OrderCodes != "")
            {
                sql = string.Format(@"  select * from XM_OrderInfo d 
                        left join XM_OrderInfoProductDetails  a
                        on a.OrderInfoId=d.Id
                        INNER join  XM_Nick  b 
                        on d.NickID=b.nick_id                        
                         WHERE (d.[OrderCode] in  ({0}) )  
	                        AND ({1} = -1 OR b.[ProjectId] = {2}) 
	                        AND ({3} = -1 OR d.[NickID] ={4}) 
	                        AND (a.[PlatformMerchantCode] LIKE '%{5}%' or a.[PlatformMerchantCode] is null) 
                            AND ((a.[PlatformMerchantCode] <>'1063737519' and  a.[PlatformMerchantCode] <>'1064377859') or a.[PlatformMerchantCode] is null)
	                        AND (d.[FullName] LIKE '%{6}%' )   
	                        AND ({7} = -1 OR d.[PlatformTypeId] = {8}) 
	                        AND ({13} = -1 or a.[IsAudit] is null OR a.[IsAudit] = (CASE WHEN (0 = {14}) THEN cast(0 as bit) ELSE cast(1 as bit) END))  
	                        AND (d.[IsScalping] is null or d.[IsScalping]={16})  
	                        AND (({17} = -1) OR ({17} = 0 AND d.[IsAbnormal] is null) OR ({17} = 0 AND d.[IsAbnormal]=0) OR ({17} = 1 AND d.[IsAbnormal]=1))  
	                        {15}
                            {18}
	                        and d.IsEnable='false'
	                        ORDER BY d.[DeliveryTime] DESC, d.[OrderCode] DESC", value[0], value[1], value[2], value[3], value[4], value[5], value[6],
                                   value[7], value[8], value[11], value[12], value[13], value[14], value[15], value[16], param, value[18], value[19], timetype);
            }
            else
            {
                sql = string.Format(@"  select * from XM_OrderInfo d 
                        left join XM_OrderInfoProductDetails  a
                        on a.OrderInfoId=d.Id
                        INNER join  XM_Nick  b 
                        on d.NickID=b.nick_id                        
                         WHERE (d.[OrderCode] LIKE '%{0}%' )  
                            AND ({1} = -1 OR b.[ProjectId] = {2}) 
	                        AND ({3} = -1 OR d.[NickID] ={4}) 
	                        AND (a.[PlatformMerchantCode] LIKE '%{5}%' or a.[PlatformMerchantCode] is null) 
                            AND ((a.[PlatformMerchantCode] <>'1063737519' and  a.[PlatformMerchantCode] <>'1064377859') or a.[PlatformMerchantCode] is null)
	                        AND (d.[FullName] LIKE '%{6}%' )   
	                        AND ({7} = -1 OR d.[PlatformTypeId] = {8}) 
	                        AND ({13} = -1 or a.[IsAudit] is null OR a.[IsAudit] = (CASE WHEN (0 = {14}) THEN cast(0 as bit) ELSE cast(1 as bit) END))  
	                        AND (d.[IsScalping] is null or d.[IsScalping]={16})    
	                        AND (({17} = -1) OR ({17} = 0 AND d.[IsAbnormal] is null) OR ({17} = 0 AND d.[IsAbnormal]=0) OR ({17} = 1 AND d.[IsAbnormal]=1))  
	                        {15}
                            {18}
	                        and d.IsEnable='false'
	                        ORDER BY d.[DeliveryTime] DESC, d.[OrderCode] DESC", value[0], value[1], value[2], value[3], value[4], value[5], value[6],
                                  value[7], value[8], value[11], value[12], value[13], value[14], value[15], value[16], param, value[18], value[19], timetype);
            }

            return sql;
            //inner join XM_ProductDetails c
            //            ON (a.PlatformMerchantCode = c.PlatformMerchantCode)  
            //                or((a.PlatformMerchantCode = c.PlatformMerchantCode)OR ((a.PlatformMerchantCode IS NULL)  AND (c.PlatformMerchantCode IS NULL))) 
            //                or ((a.PlatformMerchantCode = c.PlatformMerchantCode) OR ((a.PlatformMerchantCode IS NULL)  AND (c.PlatformMerchantCode IS NULL)))
            //            inner join XM_Product e
            //                on c.ProductId=e.Id
            //AND ({9} = -1 OR e.[BrandTypeId] = {10}) AND (e.[ProductName] LIKE  '%{17}%' )
        }

        /// <summary>
        /// 根据id获取店铺数据
        /// </summary>
        /// <param name="nickID">店铺id</param>
        /// <returns></returns>
        public XMNick GetXMNickByID(int nickID)
        {
            var query = from x in this._context.XMNicks
                        where x.nick_id.Equals(nickID)
                        select x;
            return query.SingleOrDefault();
        }

        /// <summary>
        /// 获取所有的可用店铺
        /// </summary>
        /// <returns></returns>
        public List<XMNick> GetXMNickList()
        {
            var query = from m in this._context.XMNicks // where m.isEnable
                        select m;
            return query.ToList();
        }

        /// <summary>
        /// 根据店铺名称、是否在运营查询
        /// </summary>
        /// <param name="nick">店铺名称</param>
        /// <param name="IsEnable">是否在运营</param>
        /// <param name="ProjectId">项目Id</param>
        /// <returns></returns>
        public List<XMNick> GetXMNickList(string nick, int IsEnable, int ProjectId)
        {
            var query = from p in this._context.XMNicks
                        where p.nick.Contains(nick)
                        && (ProjectId == -1 || p.ProjectId == ProjectId)
                         && (IsEnable == -1 || p.isEnable.Equals(IsEnable == 0 ? false : true))
                        select p;
            return query.ToList();

        }

        /// <summary>
        /// 根据店铺名称、是否在运营查询,平台ID
        /// </summary>
        /// <param name="nick">店铺名称</param>
        /// <param name="IsEnable">是否在运营</param>
        /// <param name="PlatformId">平台Id</param>
        /// <returns></returns>
        public List<XMNick> GetXMNickListbyPlatformId(string nick, int IsEnable, int PlatformId)
        {
            var query = from p in this._context.XMNicks
                        where p.nick.Contains(nick)
                        && (PlatformId == -1 || p.PlatformTypeId == PlatformId)
                         && (IsEnable == -1 || p.isEnable.Equals(IsEnable == 0 ? false : true))
                        select p;
            return query.ToList();

        }

        /// <summary>
        /// 根据店铺名称、是否在运营查询(根据用户)
        /// </summary>
        /// <param name="nick">店铺名称</param>
        /// <param name="IsEnable">是否在运营</param>
        /// <param name="ProjectId">项目Id</param>
        /// <returns></returns>
        public List<XMNick> GetXMNickListSS(string nick, int IsEnable, int ProjectId, int userid, int ProjectName)
        {

            IQueryable<XMNick> query = from b in this._context.XMNicks
                                       join a in this._context.XMProjects
                                         on b.ProjectId equals a.Id
                                         into JoinedEmpDept
                                       from a in JoinedEmpDept.DefaultIfEmpty()
                                       join c in this._context.XMNickCustomerMappings
                                       on b.nick_id equals c.NickId
                                         into JoinedEmpDept2
                                       from c in JoinedEmpDept2.DefaultIfEmpty()
                                       where (a.customerId == userid || c.CustomerID == userid)
                                       && a.IsEnable == true && (a.ProjectTypeId == ProjectName || ProjectName == 0)
                                       && b.nick.Contains(nick)
                                       && (ProjectId == -1 || ProjectId == 99 || b.ProjectId == ProjectId)
                                       && (IsEnable == -1 || b.isEnable.Equals(IsEnable == 0 ? false : true))
                                       select b;
            //var query = from p in this._context.XMNicks
            //            where p.nick.Contains(nick)
            //            && (ProjectId == -1 || p.ProjectId == ProjectId)
            //             && (IsEnable == -1 || p.isEnable.Equals(IsEnable == 0 ? false : true))
            //            select p;
            return new List<XMNick>(query.ToList().Distinct());

        }

        /// <summary>
        /// yhd.trade.fullinfo.get 获取单笔交易的详细信息（兼容淘宝）(一号店)
        /// </summary>
        /// <param name="Tid">订单Id</param>
        /// <returns></returns>
        public Yhd.Api.Object.Trade.Trade GetYHDTrade(long Tid, XMOrderInfoApp xMorderInfoApp)
        {
            try
            {
                if (xMorderInfoApp != null)
                {
                    Yhd.Api.YhdClient client = new Yhd.Api.YhdClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret);
                    Yhd.Api.Request.TradeGetRequest reqTrade = new Yhd.Api.Request.TradeGetRequest();
                    //reqTrade.Fields = "seller_nick,buyer_nick,title,type,created,sid,tid,seller_rate,buyer_rate,buyer_memo,buyer_message,status,payment,discount_fee,adjust_fee,post_fee,total_fee,pay_time,end_time,modified,consign_time,buyer_obtain_point_fee,point_fee,real_point_fee,received_payment,commission_fee,pic_path,num_iid,num_iid,num,price,cod_fee,cod_status,shipping_type,receiver_name,receiver_state,receiver_city,receiver_district,receiver_address,receiver_zip,receiver_mobile,receiver_phone,buyer_alipay_no,orders.title,orders.pic_path,orders.price,orders.num,orders.iid,orders.num_iid,orders.sku_id,orders.refund_status,orders.status,orders.oid,orders.total_fee,orders.payment,orders.discount_fee,orders.adjust_fee,orders.sku_properties_name,orders.item_meal_name,orders.buyer_rate,orders.seller_rate,orders.outer_iid,orders.outer_sku_id,orders.refund_id,orders.seller_type,orders.logistics_company ,orders.invoice_no";
                    reqTrade.Tid = Tid;
                    Yhd.Api.Response.TradeGetResponse response = client.Execute(reqTrade, xMorderInfoApp.AccessToken);

                    if (response.Trade == null)
                    {
                        for (int i = 1; i < 10; i++)
                        {
                            Yhd.Api.YhdClient clientfor = new Yhd.Api.YhdClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret);
                            Yhd.Api.Request.TradeGetRequest responsefor = new Yhd.Api.Request.TradeGetRequest();
                            //reqTrade.Fields = "seller_nick,buyer_nick,title,type,created,sid,tid,seller_rate,buyer_rate,buyer_memo,buyer_message,status,payment,discount_fee,adjust_fee,post_fee,total_fee,pay_time,end_time,modified,consign_time,buyer_obtain_point_fee,point_fee,real_point_fee,received_payment,commission_fee,pic_path,num_iid,num_iid,num,price,cod_fee,cod_status,shipping_type,receiver_name,receiver_state,receiver_city,receiver_district,receiver_address,receiver_zip,receiver_mobile,receiver_phone,buyer_alipay_no,orders.title,orders.pic_path,orders.price,orders.num,orders.iid,orders.num_iid,orders.sku_id,orders.refund_status,orders.status,orders.oid,orders.total_fee,orders.payment,orders.discount_fee,orders.adjust_fee,orders.sku_properties_name,orders.item_meal_name,orders.buyer_rate,orders.seller_rate,orders.outer_iid,orders.outer_sku_id,orders.refund_id,orders.seller_type,orders.logistics_company ,orders.invoice_no";
                            reqTrade.Tid = Tid;
                            Yhd.Api.Response.TradeGetResponse mfor = client.Execute(reqTrade, xMorderInfoApp.AccessToken);


                            if (mfor.Trade != null)
                            {
                                if (mfor.Error_code == null)
                                {
                                    return mfor.Trade;
                                }
                                else
                                {
                                    throw new Exception("错误代码：" + mfor.Error_code + "错误信息：" + mfor.Msg);
                                }
                            }
                        }
                    }
                    else
                    {
                        if (response.Error_code == null)
                        {
                            return response.Trade;
                        }
                        else
                        {
                            throw new Exception("错误代码：" + response.Error_code + "错误信息：" + response.Msg);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }

            return null;
        }

        /// <summary>
        /// taobao.trade.fullinfo.get 获取单笔交易的详细信息
        /// </summary>
        /// <param name="Tid">订单Id</param>
        /// <returns></returns>
        public Trade GetTrade(long Tid, XMOrderInfoApp xMorderInfoApp)
        {
            try
            {
                string appKey = xMorderInfoApp.AppKey;//"21694549";
                string appSecret = xMorderInfoApp.AppSecret;//"b7912dff738b8f83d4495310a308500a";
                string sessionKey = xMorderInfoApp.AccessToken;//"6102b2467ad6c54e45b37b6a0f44f6241c7443386d865671123900782";
                string url = xMorderInfoApp.ServerUrl;//"http://gw.api.taobao.com/router/rest";

                ITopClient client = new DefaultTopClient(url, appKey, appSecret);
                TradeFullinfoGetRequest req = new TradeFullinfoGetRequest();
                //req.Fields = " buyer_nick,num, seller_memo,orders.outer_sku_id";
                req.Fields = "credit_cardfee,trade_source,commission_fee,real_point_fee,trade_from,buyer_obtain_point_fee,seller_nick,buyer_nick,title,type,created,sid,tid,seller_rate,buyer_rate,buyer_memo,buyer_message,status,payment,discount_fee,adjust_fee,post_fee,total_fee,pay_time,end_time,modified,consign_time,buyer_obtain_point_fee,point_fee,real_point_fee,received_payment,commission_fee,pic_path,num_iid,num_iid,num,price,cod_fee,cod_status,shipping_type,receiver_name,receiver_state,receiver_city,receiver_district,receiver_address,receiver_zip,receiver_mobile,receiver_phone,buyer_alipay_no,orders.title,orders.pic_path,orders.price,orders.num,orders.iid,orders.num_iid,orders.sku_id,orders.refund_status,orders.status,orders.oid,orders.total_fee,orders.payment,orders.discount_fee,orders.adjust_fee,orders.sku_properties_name,orders.item_meal_name,orders.buyer_rate,orders.seller_rate,orders.outer_iid,seller_memo,orders.outer_sku_id,orders.refund_id,orders.seller_type,step_trade_status,step_paid_fee,paid_coupon_fee,promotion_details";
                req.Tid = Tid;
                TradeFullinfoGetResponse response = client.Execute(req, sessionKey);


                if (response.Trade == null)
                {
                    for (int i = 1; i < 10; i++)
                    {
                        ITopClient clientfor = new DefaultTopClient(url, appKey, appSecret);
                        TradeFullinfoGetRequest responsefor = new TradeFullinfoGetRequest();
                        //responsefor.Fields = " buyer_nick,num, seller_memo,orders.outer_sku_id";
                        responsefor.Fields = "credit_cardfee,trade_source,commission_fee,real_point_fee,trade_from,buyer_obtain_point_fee,seller_nick,buyer_nick,title,type,created,sid,tid,seller_rate,buyer_rate,buyer_memo,buyer_message,status,payment,discount_fee,adjust_fee,post_fee,total_fee,pay_time,end_time,modified,consign_time,buyer_obtain_point_fee,point_fee,real_point_fee,received_payment,commission_fee,pic_path,num_iid,num_iid,num,price,cod_fee,cod_status,shipping_type,receiver_name,receiver_state,receiver_city,receiver_district,receiver_address,receiver_zip,receiver_mobile,receiver_phone,buyer_alipay_no,orders.title,orders.pic_path,orders.price,orders.num,orders.iid,orders.num_iid,orders.sku_id,orders.refund_status,orders.status,orders.oid,orders.total_fee,orders.payment,orders.discount_fee,orders.adjust_fee,orders.sku_properties_name,orders.item_meal_name,orders.buyer_rate,orders.seller_rate,orders.outer_iid,seller_memo,orders.outer_sku_id,orders.refund_id,orders.seller_type,step_trade_status,step_paid_fee,paid_coupon_fee,promotion_details";
                        responsefor.Tid = Tid;
                        TradeFullinfoGetResponse mfor = clientfor.Execute(responsefor, sessionKey);

                        if (mfor.Trade != null)
                        {
                            if (!mfor.IsError)
                            {
                                return mfor.Trade;
                            }
                            else
                            {
                                throw new Exception("错误代码：" + mfor.ErrCode + "错误信息：" + mfor.ErrMsg);
                            }
                        }
                    }
                }
                else
                {
                    if (!response.IsError)
                    {
                        return response.Trade;
                    }
                    else
                    {
                        throw new Exception("错误代码：" + response.ErrCode + "错误信息：" + response.ErrMsg);
                    }
                }
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }

            return null;
        }

        /// <summary>
        ///天猫：修改订单备注：  taobao.trade.memo.update 修改一笔交易备注
        /// </summary>
        /// <param name="Tid"></param>
        /// <param name="memo"></param>
        /// <param name="xMorderInfoApp"></param>
        /// <returns></returns>
        public Trade ReturnTradeMemoUpdate(long Tid, string memo, XMOrderInfoApp xMorderInfoApp)
        {
            try
            {
                string appKey = xMorderInfoApp.AppKey;
                string appSecret = xMorderInfoApp.AppSecret;
                string sessionKey = xMorderInfoApp.AccessToken;
                string url = xMorderInfoApp.ServerUrl;

                ITopClient client = new DefaultTopClient(url, appKey, appSecret);
                TradeMemoUpdateRequest rep = new TradeMemoUpdateRequest();
                rep.Tid = Tid;
                if (xMorderInfoApp.NickId != null)
                {
                    if (xMorderInfoApp.NickId.Value != 8)//除曲美领物旗舰店 不修改旗子颜色；其他店铺修改成黄色旗子
                    {
                        //卖家交易备注旗帜，可选值为：0(灰色), 1(红色), 2(黄色), 3(绿色), 4(蓝色), 5(粉红色)，默认值为0
                        rep.Flag = 4;
                    }
                }
                rep.Memo = memo;
                TradeMemoUpdateResponse response = client.Execute(rep, sessionKey);

                if (response.Trade == null)
                {
                    for (int i = 1; i < 10; i++)
                    {
                        ITopClient clientfor = new DefaultTopClient(url, appKey, appSecret);
                        TradeMemoUpdateRequest responsefor = new TradeMemoUpdateRequest();
                        responsefor.Tid = Tid;
                        responsefor.Memo = memo;
                        TradeMemoUpdateResponse mfor = clientfor.Execute(responsefor, sessionKey);

                        if (mfor.Trade != null)
                        {
                            if (!mfor.IsError)
                            {
                                return mfor.Trade;
                            }
                            else
                            {
                                throw new Exception("错误代码：" + mfor.ErrCode + "错误信息：" + mfor.ErrMsg);
                            }
                        }
                    }
                }
                else
                {
                    if (!response.IsError)
                    {
                        return response.Trade;
                    }
                    else
                    {
                        throw new Exception("错误代码：" + response.ErrCode + "错误信息：" + response.ErrMsg);
                    }
                }
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }

            return null;
        }

        /// <summary>
        /// 根据订单OrderCode
        /// </summary>
        /// <param name="OrderCode"></param>
        /// <returns></returns>
        public List<XMOrderInfo> GetXMOrderInfoByOrderCodeList(string OrderCode)
        {
            var query = from p in this._context.XMOrderInfoes
                        where (OrderCode == "" || p.OrderCode.Contains(OrderCode))
                        && p.IsEnable == false
                        orderby p.DeliveryTime descending, p.OrderCode descending
                        select p;
            return query.ToList();
        }

        private string authorizeUrl = "http://auth.360buy.com/oauth/authorize";
        private string accessTokenUrl = "http://auth.360buy.com/oauth/token";
        protected JdSdk.DefaultJdClient Client;

        /// <summary>
        /// 授权码获取地址
        /// </summary>
        public String AuthorizeUrl
        {
            get
            {
                return authorizeUrl;
            }

            set
            {
                authorizeUrl = value;
            }
        }

        /// <summary>
        /// 访问令牌获取
        /// </summary>
        public String AccessTokenUrl
        {
            get
            {
                return accessTokenUrl;
            }
            set
            {
                accessTokenUrl = value;
            }
        }

        /// <summary>
        /// 获取App Key
        /// </summary>
        public string AppKey
        {
            get;
            internal set;
        }
        /// <summary>
        /// 获取App Secret
        /// </summary>
        public string AppSecret
        {
            get;
            internal set;
        }

        /// <summary>
        /// 获取Access Token
        /// </summary>
        public string AccessToken
        {
            get;
            internal set;
        }

        /// <summary>
        /// 获取或设置回调地址
        /// </summary>
        public string CallbackUrl
        {
            get;
            set;
        }

        /// <summary>
        /// 通过 Authorization Code 获取AccessToken
        /// </summary>
        /// <param name="code"></param>
        /// <returns></returns>
        public AccessToken GetAccessTokenByAuthorizationCode()
        {
            string code = "RnPk5f";
            AppKey = "C3BDD1943916998096181AFFE213DFB5";
            AppSecret = "1d67aab61ca949a7ae372d331d81c8d6";
            CallbackUrl = "http://www.hozest.com";
            return GetAccessToken(GrantType.AuthorizationCode, new Dictionary<string, string> { 
				{"code",code},
				{"redirect_uri", CallbackUrl}
			});
        }

        private AccessToken GetAccessToken(GrantType type, Dictionary<string, string> parameters)
        {
            parameters.Add("client_id", AppKey);
            parameters.Add("client_secret", AppSecret);
            parameters.Add("scope", "read");
            parameters.Add("state", "swkeji");

            switch (type)
            {
                case GrantType.AuthorizationCode:
                    parameters.Add("grant_type", "authorization_code");
                    break;
                case GrantType.Password:
                    parameters.Add("grant_type", "password");
                    break;
                case GrantType.RefreshToken:
                    parameters.Add("grant_type", "refresh_token");
                    break;
            }

            JdSdk.WebUtils webUtil = new JdSdk.WebUtils();
            var response = DoAccessTokenPost(parameters);
            if (!string.IsNullOrEmpty(response))
            {
                AccessToken token = JsonConvert.DeserializeObject<AccessToken>(response);
                //token.CreateTime = DateTime.Now;
                AccessToken = token.Token;
                return token;
            }
            else
            {
                return null;
            }
        }

        public string DoAccessTokenPost(IDictionary<string, string> parameters)
        {
            String url = AccessTokenUrl;
            if (url.Contains("?"))
            {
                url = url + "&" + JdSdk.WebUtils.BuildQuery(parameters);
            }
            else
            {
                url = url + "?" + JdSdk.WebUtils.BuildQuery(parameters);
            }

            HttpWebRequest req = GetWebRequest(url, "POST");
            HttpWebResponse rsp = (HttpWebResponse)req.GetResponse();
            Encoding encoding = Encoding.UTF8;

            if (!String.IsNullOrEmpty(rsp.ContentEncoding) || !String.IsNullOrEmpty(rsp.CharacterSet))
            {
                try
                {
                    if (!String.IsNullOrEmpty(rsp.ContentEncoding))
                    {
                        encoding = Encoding.GetEncoding(rsp.ContentEncoding);
                    }
                    else
                    {
                        encoding = Encoding.GetEncoding(rsp.CharacterSet);
                    }
                }
                catch { }
            }

            return JdSdk.WebUtils.GetResponseAsString(rsp, encoding);
        }

        public HttpWebRequest GetWebRequest(string url, string method)
        {
            HttpWebRequest req = (HttpWebRequest)WebRequest.Create(url);
            req.ServicePoint.Expect100Continue = false;
            req.Method = method;
            req.KeepAlive = true;
            req.UserAgent = "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0)";
            req.ContentType = "application/x-www-form-urlencoded;charset=utf-8";
            return req;
        }

        /// <summary>
        /// 360buy.order.get 根据订单id获取单个订单
        /// </summary>
        /// <param name="orderId"></param>
        /// <returns></returns>
        public JdSdk.Domain.OrderInfo getOrderInfo(string orderId, XMOrderInfoApp xMorderInfoApp)
        {

            try
            {

                AppKey = xMorderInfoApp.AppKey;//"C3BDD1943916998096181AFFE213DFB5";
                AppSecret = xMorderInfoApp.AppSecret;//"7ac900a3cbba49568a884098fb4a8a7f";
                CallbackUrl = xMorderInfoApp.CallbackUrl;// "http://www.hozest.com";
                AccessToken = xMorderInfoApp.AccessToken;// "8367ab51-9345-4a43-8893-9ded184ced2d";

                JdSdk.IJdClient client = new JdSdk.DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);
                JdSdk.Request.OrderGetRequest request = new JdSdk.Request.OrderGetRequest();
                request.OptionalFields = "order_id,vender_id,pay_type,order_total_price,order_payment,order_seller_price,freight_price,seller_discount,order_state,delivery_type,invoice_info,order_remark,order_start_time,order_end_time,modified,payment_confirm_time,pin,consignee_info,coupon_detail_list,item_info_list,logistics_id,waybill,vender_remark";
                request.OrderId = orderId;
                JdSdk.Response.OrderGetResponse response = client.Execute(request);

                string s = "\"orderInfo\":\"\"";
                string ns = "\"orderInfo\":null";
                string str = response.Body.Replace(s, ns);
                JdSdk.Response.OrderGetResponse OR = JsonConvert.DeserializeObject<JdSdk.Response.OrderGetResponse>(str);

                //   "orderInfo": ""

                if (OR.OD == null)
                {
                    for (int i = 1; i < 10; i++)
                    {
                        JdSdk.IJdClient clientfor = new JdSdk.DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);
                        JdSdk.Request.OrderGetRequest requestfor = new JdSdk.Request.OrderGetRequest();
                        request.OptionalFields = "order_id,vender_id,pay_type,order_total_price,order_payment,order_seller_price,freight_price,seller_discount,order_state,delivery_type,invoice_info,order_remark,order_start_time,order_end_time,modified,payment_confirm_time,pin,consignee_info,coupon_detail_list,item_info_list,logistics_id,waybill,vender_remark";
                        requestfor.OrderId = orderId;
                        JdSdk.Response.OrderGetResponse responsefor = clientfor.Execute(requestfor);
                        string s1 = "\"orderInfo\":\"\"";
                        string ns1 = "\"orderInfo\":null";
                        string str1 = responsefor.Body.Replace(s1, ns1);
                        JdSdk.Response.OrderGetResponse ORfor = JsonConvert.DeserializeObject<JdSdk.Response.OrderGetResponse>(str1);

                        if (ORfor.OD != null)
                        {
                            if (!responsefor.IsError)
                            {
                                return ORfor.OD.Order.OrderInfo;
                            }
                            else
                            {
                                throw new Exception("错误代码：" + responsefor.ErrCode + "错误信息：" + responsefor.ErrMsg);
                            }
                        }
                    }
                }
                else
                {
                    if (!response.IsError)
                    {
                        return OR.OD.Order.OrderInfo;
                    }
                    else
                    {
                        throw new Exception("错误代码：" + response.ErrCode + "错误信息：" + response.ErrMsg);
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

            return null;
        }

        /// <summary>
        /// 京东修改备注： 商家订单备注修改  360buy.order.vender.remark.update      
        /// </summary>
        /// <param name="OrderId"></param>
        /// <param name="Remark"></param>
        /// <param name="TradeNo"></param>
        /// <param name="xMorderInfoApp"></param>
        /// <returns></returns>
        public OrderVenderRemarkUpdateResponseOne SetOrderVenderRemark(string OrderId, string Remark, string TradeNo, XMOrderInfoApp xMorderInfoApp)
        {
            try
            {
                AppKey = xMorderInfoApp.AppKey;
                AppSecret = xMorderInfoApp.AppSecret;
                CallbackUrl = xMorderInfoApp.CallbackUrl;
                AccessToken = xMorderInfoApp.AccessToken;
                this.Client = new JdSdk.DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);

                OrderVenderRemarkUpdateRequest request = new OrderVenderRemarkUpdateRequest();
                request.OrderId = OrderId;
                request.Remark = Remark;
                //request.TradeNo = TradeNo;
                OrderVenderRemarkUpdateResponseOne response = Client.Execute(request);
                OrderVenderRemarkUpdateResponseOne m = JsonConvert.DeserializeObject<OrderVenderRemarkUpdateResponseOne>(response.Body);

                if (m.OUP == null)
                {
                    for (int i = 1; i < 10; i++)
                    {
                        this.Client = new JdSdk.DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);

                        OrderVenderRemarkUpdateRequest requestfor = new OrderVenderRemarkUpdateRequest();
                        requestfor.OrderId = OrderId;
                        requestfor.Remark = Remark;
                        //request.TradeNo = TradeNo;
                        OrderVenderRemarkUpdateResponseOne responsefor = Client.Execute(requestfor);
                        OrderVenderRemarkUpdateResponseOne mfor = JsonConvert.DeserializeObject<OrderVenderRemarkUpdateResponseOne>(responsefor.Body);

                        if (mfor.OUP != null)
                        {
                            if (!responsefor.IsError)
                            {
                                return mfor;
                            }
                            else
                            {
                                throw new Exception("错误代码：" + responsefor.ErrCode + "错误信息：" + responsefor.ErrMsg);
                            }
                        }
                    }
                }
                else
                {
                    if (!response.IsError)
                    {
                        return m;
                    }
                    else
                    {
                        throw new Exception("错误代码：" + response.ErrCode + "错误信息：" + response.ErrMsg);
                    }
                }
            }
            catch (Exception ex)
            {
                IoC.Resolve<IRecordErrorLogs>().WriteErrorLog("负责人:" + HozestERPContext.Current.User.CustomerID.ToString() + ";   方法名:SetOrderVenderRemark;  异常提示：" + ex.Message.ToString() + ";   InnerException:" + ex.InnerException);
            }

            return null;

        }

        /// <summary>
        /// 订单检索  360buy.order.search
        /// </summary>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="orderState"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalCount"></param>
        /// <param name="recursive"></param>
        /// <returns></returns>
        public List<JdSdk.Domain.OrderInfo> GetOrderList(DateTime startDate, DateTime endDate, string orderState, int page, int pageSize, out Int32 totalCount, bool recursive, XMOrderInfoApp xMorderInfoApp)
        {
            try
            {
                if (xMorderInfoApp.NickId == 1 && xMorderInfoApp.PlatformTypeId == 251)
                {
                    string aa = "";
                }
                int count = 0;
                //AppKey = "C3BDD1943916998096181AFFE213DFB5";
                //AppSecret = "7ac900a3cbba49568a884098fb4a8a7f";
                //CallbackUrl = "http://www.hozest.com";
                //AccessToken = "8367ab51-9345-4a43-8893-9ded184ced2d";
                AppKey = xMorderInfoApp.AppKey;//"C3BDD1943916998096181AFFE213DFB5";
                AppSecret = xMorderInfoApp.AppSecret;//"7ac900a3cbba49568a884098fb4a8a7f";
                CallbackUrl = xMorderInfoApp.CallbackUrl;// "http://www.hozest.com";
                AccessToken = xMorderInfoApp.AccessToken;// "8367ab51-9345-4a43-8893-9ded184ced2d";
                this.Client = new JdSdk.DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);

                OrderSearchRequest request = new OrderSearchRequest();
                request.StartDate = startDate;//付款开始时间
                request.EndDate = endDate;//付款结束时间
                request.OrderState = orderState;
                request.Page = page;
                request.PageSize = pageSize;
                request.OrderState = "WAIT_SELLER_STOCK_OUT,WAIT_GOODS_RECEIVE_CONFIRM,FINISHED_L,TRADE_CANCELED,LOCKED";
                request.OptionalFields = "order_id,vender_id,pay_type,order_total_price,order_payment,order_seller_price,freight_price,seller_discount,order_state,delivery_type,invoice_info,order_remark,order_start_time,order_end_time,modified,payment_confirm_time,pin,consignee_info,coupon_detail_list,item_info_list,logistics_id,waybill,vender_remark";
                OrderSearchResponse response = Client.Execute(request);


                string s = "\"consignee_info\":\"\",";
                string ns = "\"consignee_info\":null,";
                string str = response.Body.Replace(s, ns);
                OrderSearchResponse m = JsonConvert.DeserializeObject<OrderSearchResponse>(str);

                //if (m.Child == null)
                //{
                //    for (int i = 1; i < 10; i++)
                //    {
                //        this.Client = new DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);

                //        OrderSearchRequest requestfor = new OrderSearchRequest();
                //        requestfor.StartDate = startDate;//付款开始时间
                //        requestfor.EndDate = endDate;//付款结束时间
                //        requestfor.OrderState = orderState;
                //        requestfor.Page = page;
                //        requestfor.PageSize = pageSize;
                //        requestfor.OptionalFields = "order_id,vender_id,pay_type,order_total_price,order_payment,order_seller_price,freight_price,seller_discount,order_state,delivery_type,invoice_info,order_remark,order_start_time,order_end_time,modified,payment_confirm_time,pin,consignee_info,coupon_detail_list,item_info_list,logistics_id,waybill,vender_remark";
                //        OrderSearchResponse responsefor = Client.Execute(requestfor);
                //        string sfor = "\"consignee_info\":\"\",";
                //        string nsfor = "\"consignee_info\":null,";
                //        string strfor = responsefor.Body.Replace(sfor, nsfor);
                //        OrderSearchResponse mfor = JsonConvert.DeserializeObject<OrderSearchResponse>(strfor);

                //        if (mfor.Child != null)
                //        {
                //            if (!responsefor.IsError)
                //            {
                //                count = mfor.Child.OrderSearch.OrderTotal;
                //                totalCount = count;
                //                return mfor.Child.OrderSearch.OrderInfoList;
                //            }
                //            else
                //            {
                //                throw new Exception("错误代码：" + responsefor.ErrCode + "错误信息：" + responsefor.ErrMsg);
                //            }
                //        }
                //    }
                //}
                //else
                //{
                if (!response.IsError)
                {
                    count = m.Child.OrderSearch.OrderTotal;
                    totalCount = count;
                    return m.Child.OrderSearch.OrderInfoList;
                }
                else
                {
                    throw new Exception("错误代码：" + response.ErrCode + "错误信息：" + response.ErrMsg);
                }
                //}
                //totalCount = count;
            }
            catch (Exception ex)
            {
                //throw new Exception(ex.Message); 
                //BusinessLogic.ErrorLog.RecordErrorLogs.WriteError(ex.Message.ToString(), CRMContext.Current.User.CustomerID.ToString());
                totalCount = 0;
                IoC.Resolve<IRecordErrorLogs>().WriteErrorLog("负责人:" + HozestERPContext.Current.User.CustomerID.ToString() + ";   方法名:GetOrderList;  异常提示：" + ex.Message.ToString() + ";   InnerException:" + ex.InnerException);
            }

            return null;
        }

        /// <summary>
        /// 产品查询
        /// </summary>
        /// <param name="paramProductName">产品名称</param>
        /// <param name="paramMerchantcode">商家编码</param>
        /// <param name="nickId">店铺id</param>
        /// <returns></returns>
        public List<XMProductDetails> GetProductList(string paramProductName, string paramMerchantcode, int nickId)
        {
            string sql = @"select * from XM_ProductDetails a
                            inner join XM_Product b
                            on  a.Id=b.ProductId
                        where b.ProductName like {0} and a.Merchantcode like {1} and  a.IsEnable = 0   ";
            if (nickId != 0)
                sql += " and b.nickId=" + nickId;
            var ProductList = this._context.ExecuteStoreQuery<XMProductDetails>(sql, "%" + paramProductName + "%", "%" + paramMerchantcode + "%");
            return ProductList.ToList();
        }

        /// <summary>
        /// 根据商品编码查询
        /// </summary>
        /// <param name="Merchantcode"></param>
        /// <returns></returns>
        public List<XMProductDetails> GetXMProductListByMerchantcode(string PlatFormMerchantCode)
        {
            var query = from p in this._context.XMProductDetails
                        where p.IsEnable == false
                        && p.PlatformMerchantCode.Equals(PlatFormMerchantCode)
                        select p;
            return query.ToList();
        }

        /// <summary>
        /// 根据订单号，抓取数据 京东 (单个订单同步)
        /// </summary>
        /// <param name="orderInfo"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        public void getOrderInfoJD(JDsingleServiceReference.OrderInfo orderInfo, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            try
            {
                var dd = JsonConvert.SerializeObject(orderInfo);
                #region 判断商品主信息是不是只有双十一大礼包信息
                var orderitemarray = orderInfo.item_info_list.ToArray();//订单中的商品明细
                if (orderitemarray.Length == 1)//如果商品只有一个而且是大礼包则不同步数据
                {
                    var bigpackagearray = orderitemarray.Where(p => p.sku_name.Contains("大礼包")).ToArray();
                    if (bigpackagearray.Length == 1)
                        return;
                }
                #endregion

                #region 订单信息

                //     送货（日期）类型（1-只工作日送货(双休日、假日不用送);2-只双休日、假日送货(工作日不用送);3-工作日、双休日与假日均可送货;其他值-返回“任意时间”）
                string DeliveryType = orderInfo.delivery_type;
                //     商品的运费
                string FreightPrice = orderInfo.freight_price;
                //     发票信息 “invoice_info: 不需要开具发票”下无需开具发票；其它返回值请正常开具发票
                string InvoiceInfo = orderInfo.invoice_info;
                //     变更时间, 默认必须返回
                string Modified = orderInfo.modified;

                string PaymentConfirmTime = orderInfo.payment_confirm_time;
                //     订单id, 默认必须返回
                string OrderId = orderInfo.order_id;
                //     用户应付金额
                string OrderPayment = orderInfo.order_payment;
                //     买家下单时订单备注
                // string OrderRemark = orderInfo.OrderRemark;
                //     订单货款金额（订单总金额-商家优惠金额）
                string OrderSellerPrice = orderInfo.order_seller_price;
                //     下单时间
                string OrderStartTime = orderInfo.order_start_time;
                //     订单状态（英文）具体返回值列表请发邮件至jos#jd.com获取
                string OrderState = orderInfo.order_state;
                //     订单总金额
                string OrderTotalPrice = orderInfo.order_total_price;
                //     支付方式（1货到付款, 2邮局汇款, 3自提, 4在线支付, 5公司转账, 6银行转账）
                string PayType = orderInfo.pay_type;
                ////     商家优惠金额
                string SellerDiscount = orderInfo.seller_discount;
                //     商家id
                string VenderId = orderInfo.vender_id;
                //  ID（买家帐号）
                string Pin = orderInfo.pin;
                //物流公司ID
                string LogisticsId = orderInfo.logistics_id;
                // 	运单号
                string Waybill = orderInfo.waybill;
                //商品总额
                decimal productprice = 0;
                //用户支付金额
                decimal payprice = 0;
                if (orderInfo.payment_confirm_time != null && orderInfo.payment_confirm_time != "" && orderInfo.payment_confirm_time != "0001-01-01 00:00:00")
                {
                    payprice = Decimal.Parse(orderInfo.order_payment);
                }
                #endregion

                #region 买家 信息

                ////省
                string Province;
                ////市 
                string City;
                ////县
                string County;

                //地址
                string FullAddress;
                //姓名
                string Fullname;
                //手机
                string Mobile;
                ////省
                //string Province;
                //固定电话
                string Telephone;

                if (orderInfo.consignee_info != null)
                {
                    City = orderInfo.consignee_info.city;
                    Province = orderInfo.consignee_info.province;
                    County = orderInfo.consignee_info.county;

                    FullAddress = orderInfo.consignee_info.full_address;
                    Fullname = orderInfo.consignee_info.fullname;
                    Mobile = orderInfo.consignee_info.mobile;
                    // Province = orderInfo.ConsigneeInfo.Province; 

                    if (orderInfo.consignee_info.telephone != orderInfo.consignee_info.mobile)
                    {
                        Telephone = orderInfo.consignee_info.telephone;
                    }
                    else
                    {
                        Telephone = "";
                    }

                }
                else
                {
                    ////省
                    Province = "";
                    ////市 
                    City = "";
                    ////县
                    County = "";
                    FullAddress = "";
                    Fullname = "";
                    Mobile = "";
                    Telephone = "";
                }
                #endregion

                #region 其他

                //优惠金额 
                string CouponPrice;
                //优惠类型: 20-套装优惠, 28-闪团优惠, 29-团购优惠, 30-单品促销优惠, 35-满返满送(返现);41-京东券优惠;52-礼品卡优惠,100-店铺优惠
                string CouponType;
                //平台优惠金额
                decimal PlatformDiscountAmount = 0;
                //商家优惠金额
                decimal MerchantDiscountAmount = 0;
                //赠送积分 
                string GiftPoint = "";

                if (orderInfo.coupon_detail_list != null && orderInfo.coupon_detail_list.Count() > 0)
                {
                    //CouponPrice = orderInfo.CouponDetailList[0].CouponPrice;
                    //CouponType = orderInfo.CouponDetailList[0].CouponType;
                    foreach (var item in orderInfo.coupon_detail_list)
                    {
                        if (item.coupon_type == "39-京豆优惠" || item.coupon_type == "41-京东券优惠" || item.coupon_type == "52-礼品卡优惠")
                        {
                            PlatformDiscountAmount += decimal.Parse(item.coupon_price);
                            if (item.coupon_type == "39-京豆优惠")
                            {
                                //京豆
                                GiftPoint = item.coupon_price;
                            }
                        }
                        else if (item.coupon_type == "35-满返满送(返现)")
                        {
                            MerchantDiscountAmount += decimal.Parse(item.coupon_price);
                        }
                    }
                }

                #endregion

                #region 买家信息
                //数量 
                string ItemTotal;
                //SKU的京东价 
                string JdPrice;
                //SKU外部ID 
                string OuterSkuId;
                //京东内部SKU的ID   京东sku编号 (优惠类型是:35-满返满送(返现) 100-店铺优惠,sku_id值为””)
                string SkuId = "";
                // 商品的名称+SKU规格（比如 
                string SkuName;
                //京东内部商品ID 
                string WareId;

                // string Remarks = "";//备注 
                string Remarks = orderInfo.order_remark;//备注
                string CustomerServiceRemark = orderInfo.vender_remark;//客服备注
                //是否发票  
                bool? IsInvoices = false;
                if (orderInfo.invoice_info != null && orderInfo.invoice_info != "" && orderInfo.invoice_info != "不需要开具发票")
                {
                    IsInvoices = true;
                }
                //发票编号
                string InvoiceNo = "";
                if (IsInvoices == true && orderInfo.vat_invoice_info != null)
                {
                    if (orderInfo.vat_invoice_info != null)
                    {
                        InvoiceNo = orderInfo.vat_invoice_info.taxpayer_ident;
                    }
                }
                //支付方式
                string paymethod = orderInfo.pay_type;

                decimal scSalePrice = 0;//销售价(刷单)
                #endregion

                #region 备注
                // string Remarks = row1["商家备注"].ToString().Trim();

                string changesize = "";
                if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                {
                    if (CustomerServiceRemark.IndexOf("发票") > -1)
                    {
                        IsInvoices = true;//要发票
                    }
                }
                else
                {
                    CustomerServiceRemark = "";
                    //Remarks = "";
                }

                #endregion

                //var orderInfoitems = orderInfo.item_info_list.Where(p => !p.sku_name.Contains("大礼包")).ToList();//排除大礼包
                var orderInfoitems = orderInfo.item_info_list.ToList();

                if (orderInfoitems.Count() > 0)
                {
                    scSalePrice = payprice;
                    var xmorderInfo = IoC.Resolve<IXMOrderInfoService>().GetXMOrderByOrderCode(OrderId);//订单编号查询

                    #region 新增
                    if (xmorderInfo == null)
                    {
                        #region 订单主表信息
                        xmorderInfo = new XMOrderInfo();
                        xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();
                        xmorderInfo.NickID = xMorderInfoApp.NickId.Value;// 1;//1:城市爱情旗舰店
                        xmorderInfo.PlatformTypeId = xMorderInfoApp.PlatformTypeId;//251;//京东平台

                        if (Modified != null && Modified != "")
                        {
                            xmorderInfo.OrderInfoModified = DateTime.Parse(Modified);//变更时间
                        }

                        if (PaymentConfirmTime != null && PaymentConfirmTime != "" && PaymentConfirmTime != "0001-01-01 00:00:00")
                        {
                            if (xmorderInfo.PayDate == null)
                            {
                                xmorderInfo.PayDate = DateTime.Parse(PaymentConfirmTime.ToString().Trim());//付款时间
                            }

                            if (OrderState.ToString().Trim() == "WAIT_GOODS_RECEIVE_CONFIRM")//等等确认收货
                            {
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Parse(Modified.ToString().Trim());
                                    //DateTime.Parse(PaymentConfirmTime.ToString().Trim()).AddDays(+15);//发货时间
                                }
                            }
                            if (OrderState.ToString().Trim() == "FINISHED_L")//完成时间
                            {
                                if (xmorderInfo.CompletionTime == null)
                                {
                                    xmorderInfo.CompletionTime = DateTime.Parse(Modified.ToString().Trim());
                                    //查询发票管理 有未排单 为开票的发票记录自动排单
                                    AutoSingleRow(OrderId);
                                }
                                //新增 判断发货时间是否为空为空则增加
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Parse(Modified.ToString().Trim());
                                }
                            }

                            #region 赠品、返现---修改收款确认、完成后增加赠品返现状态
                            //OrderState.ToString().Trim() == "WAIT_SELLER_STOCK_OUT" || OrderState.ToString().Trim() == "SEND_TO_DISTRIBUTION_CENER"
                            //    || OrderState.ToString().Trim() == "DISTRIBUTION_CENTER_RECEIVED" || OrderState.ToString().Trim() == "WAIT_GOODS_RECEIVE_CONFIRM"
                            //    || || OrderState.ToString().Trim() == "WAIT_SELLER_DELIVERY"
                            //if (OrderState.ToString().Trim() == "RECEIPTS_CONFIRM" || OrderState.ToString().Trim() == "FINISHED_L")
                            //{

                            if (OrderStartTime.ToString().Trim() != null && OrderStartTime.ToString().Trim() != "")
                            {
                                if (DateTime.Parse(OrderStartTime.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                {
                                    if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                    {
                                        //string CashBackMoney = "";//返现金额
                                        //string BuyerAlipayNo = "";//收款账号
                                        string BuyerName = Fullname.ToString().Trim();//收货人名称
                                        string WantNo = Pin;//旺旺号
                                        string OrderCode = OrderId;//订单号 
                                        string paramMessage = string.Empty;

                                        if (CustomerServiceRemark.IndexOf("/赠品") > -1 || CustomerServiceRemark.IndexOf("/退差价") > -1)
                                        {
                                            #region 赠品
                                            if (CustomerServiceRemark.IndexOf("/赠品") > -1)
                                            {
                                                //返回赠品条数
                                                int PremiumsInst = XMPremiumsInst(CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, xMorderInfoApp.PlatformTypeId.Value, xMorderInfoApp.NickId.Value);

                                            }
                                            #endregion

                                            #region 返现
                                            if (CustomerServiceRemark.IndexOf("退差价") > -1)
                                            {
                                                //返回返现条数
                                                int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                            }

                                            #endregion
                                        }
                                    }
                                }
                            }
                            //}
                            #endregion

                        }

                        if (OrderStartTime.ToString().Trim() != null && OrderStartTime.ToString().Trim() != "")
                        {
                            xmorderInfo.OrderInfoCreateDate = DateTime.Parse(OrderStartTime.ToString().Trim());//创单时间
                        }
                        xmorderInfo.OrderCode = OrderId;//订单Id  
                        xmorderInfo.OrderStatus = OrderState.ToString().Trim();//订单状态
                        xmorderInfo.WantID = Pin;//买家旺旺id
                        xmorderInfo.FullName = Fullname.ToString().Trim();//收货人名称
                        xmorderInfo.DeliveryAddress = FullAddress.ToString().Trim();//收货人地址
                        xmorderInfo.Province = Province.ToString().Trim();//收货人省
                        xmorderInfo.City = City.ToString().Trim();//收货人省
                        xmorderInfo.County = County.ToString().Trim();//收货人区
                        string sMobile = Mobile.ToString().Trim();//收货人手机
                        if (sMobile.IndexOf("'") == -1)
                        {
                            xmorderInfo.Mobile = Mobile.ToString().Trim();
                        }
                        else
                        {
                            string suMobile = sMobile.Substring(Mobile.LastIndexOf("'") + 1).ToLower();
                            xmorderInfo.Mobile = suMobile;
                        }

                        xmorderInfo.Tel = Telephone.ToString();//收货人电话
                        xmorderInfo.SourceType = CustomerServiceRemark.Contains("京仓订单")  ? "京仓订单" : "同步";//数据来源类型
                        xmorderInfo.FinancialAudit = true;//财务审核
                        xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//客服备注(新增)
                        xmorderInfo.Remark = CustomerServiceRemark.Contains("京仓订单") ? CustomerServiceRemark + Remarks : Remarks;//订单备注
                        //OrderyReport.LogisticsNumber = Waybill;//物流单号(运单号)
                        // OrderyReport.LogisticsId = LogisticsId;//物流公司ID

                        xmorderInfo.IsInvoiced = IsInvoices.Value;//是否发票
                        xmorderInfo.InvoiceNo = InvoiceNo;//发票编号

                        if (xmorderInfo.IsInvoiced == true && InvoiceInfo.IndexOf("发票抬头:") != -1 && (InvoiceInfo.LastIndexOf(";") - InvoiceInfo.IndexOf("发票抬头:")) > 5)
                        {
                            string invoiceHead = InvoiceInfo.Substring(InvoiceInfo.IndexOf("发票抬头:") + 5, InvoiceInfo.LastIndexOf(";") - InvoiceInfo.IndexOf("发票抬头:") - 5);
                            xmorderInfo.InvoiceHead = invoiceHead;
                        }
                    
                        xmorderInfo.PayMethod = paymethod;//支付方式
                        xmorderInfo.DistributePrice = Decimal.Parse(orderInfo.freight_price);//配送费用(京东)
                        xmorderInfo.OrderPromotion = PlatformDiscountAmount;//平台优惠
                        xmorderInfo.ProductPromotion = MerchantDiscountAmount;//商家优惠
                        xmorderInfo.OrderPrice = Decimal.Parse(orderInfo.order_total_price);//订单总金额
                        xmorderInfo.ReceivablePrice = decimal.Parse(orderInfo.order_seller_price);//应收金额
                        xmorderInfo.PayPrice = payprice + PlatformDiscountAmount;//已支付金额
                        xmorderInfo.RealPointFee = decimal.Parse(GiftPoint == "" ? "0" : GiftPoint);//京豆

                        xmorderInfo.IsCashBack = false;//是否返现
                        xmorderInfo.IsSentGifts = false;//是否已发赠品 
                        xmorderInfo.IsEvaluate = false;//是否赔付

                        //OrderyReport.IsHadPlanBill = false;//是否已排单
                        //OrderyReport.IsReDelivery = false;//是否重发
                        //OrderyReport.IsChangeGoods = false;//是否换货
                        //OrderyReport.IsReturnGoods = false;//是否退货
                        xmorderInfo.IsEnable = false;
                        xmorderInfo.IsOurOrder = true;//是我们的订单

                        if (HozestERPContext.Current.User != null)
                        {
                            xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                            xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                        }
                        else
                        {
                            string UserName = "admin";
                            List<HozestERP.BusinessLogic.CustomerManagement.Customer> customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                            if (customer.Count > 0)
                            {
                                xmorderInfo.CreateID = customer[0].CustomerID;
                                xmorderInfo.UpdateID = customer[0].CustomerID;
                            }
                        }
                        xmorderInfo.CreateDate = DateTime.Now;
                        xmorderInfo.UpdateDate = DateTime.Now;
                        #endregion

                        string scProductName = "";//商品名称（刷单） 
                        decimal priceTotal = 0;//总商品金额
                        for (int k = 0; k < orderInfoitems.Count(); k++)
                        {
                            if (orderInfoitems[k].sku_name.Contains("大礼包"))//如果商品明细中有大礼包直接跳过
                                continue;
                            decimal PriceNum = decimal.Parse(orderInfoitems[k].jd_price == null ? "0" : (orderInfoitems[k].jd_price == "" ? "0" : orderInfoitems[k].jd_price)) * decimal.Parse(orderInfoitems[k].item_total);
                            priceTotal += PriceNum;
                        }
                        decimal payPriceK = 0;//已赋值付款金额
                        //var xmorderInfo = IoC.Resolve<IXMOrderInfoService>().GetXMOrderByOrderCode(OrderId);//订单编号查询
                        //订单从表商品详情
                        for (int j = 0; j < orderInfoitems.Count(); j++)
                        {
                            if (orderInfoitems[j].sku_name.Contains("大礼包"))//如果商品明细中有大礼包直接跳过
                                continue;

                            if (orderInfoitems[j].sku_name.IndexOf("衣撑") == -1)//排除智曼衣撑
                            {

                                productprice += Decimal.Parse(orderInfoitems[j].jd_price);//叠加商品金额
                                // XMOrderInfoProductDetails OrderyReportProduct = new XMOrderInfoProductDetails();
                                SkuName = orderInfoitems[j].sku_name;//商品名称
                                ItemTotal = orderInfoitems[j].item_total;//数量
                                JdPrice = orderInfoitems[j].jd_price == null ? "0" : (orderInfoitems[j].jd_price == "" ? "0" : orderInfoitems[j].jd_price);//商品价格
                                OuterSkuId = orderInfoitems[j].outer_sku_id;
                                SkuId = orderInfoitems[j].sku_id;
                                WareId = orderInfoitems[j].ware_id;
                                if ((SkuId != "" && SkuId != null))
                                {
                                    #region 数据赋值
                                    //京东Id查询产品所有关联信息
                                    var ProductList = IoC.Resolve<XMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(SkuId.ToString(), int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                    //var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == SkuId).ToList();//.SingleOrDefault();
                                    //2015-7-28新增
                                    decimal a = 0;
                                    decimal? tj = 0;
                                    bool IsZuHe = false;
                                    if (ProductList.Count == 0)
                                    {
                                        ProductList = GetXMProductListByzuheCode(SkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                        a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                        if (ProductList.Count > 0)
                                        {
                                            IsZuHe = true;
                                        }
                                    }

                                    //XMOrderInfoProductDetails OrderyReportProduct = null;

                                    //if (OrderyReportProductList.Count == 0)
                                    //{
                                    //    OrderyReportProduct = new XMOrderInfoProductDetails();
                                    //}
                                    //else
                                    //{

                                    //    OrderyReportProduct = OrderyReportProductList[0];
                                    //}
                                    if (ProductList.Count > 0)
                                    {
                                        decimal payPriceI = 0;//组合已赋值付款金额
                                        decimal ZuHeTotal = 0;
                                        for (int i = 0; i < ProductList.Count; i++)
                                        {
                                            decimal ZuHeNum = (decimal)ProductList[i].Saleprice * decimal.Parse(ProductList[i].count.ToString());
                                            ZuHeTotal += ZuHeNum;
                                        }
                                        for (int i = 0; i < ProductList.Count; i++)
                                        {
                                            //if (ProductList.Count > 0)
                                            //{
                                            var OrderyReportProduct = new XMOrderInfoProductDetails();
                                            if (ProductList[i].TDateTimeStart != null && ProductList[i].TDateTimeEnd != null && PaymentConfirmTime != null && PaymentConfirmTime != "" && PaymentConfirmTime != "0001-01-01 00:00:00")
                                            {
                                                if (DateTime.Parse(PaymentConfirmTime.ToString().Trim()) >= ProductList[i].TDateTimeStart && DateTime.Parse(PaymentConfirmTime.ToString().Trim()) <= ProductList[i].TDateTimeEnd)
                                                {

                                                    //OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                                                    OrderyReportProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                                                    OrderyReportProduct.Specifications = ProductList[i].Specifications;//尺寸
                                                    OrderyReportProduct.FactoryPrice = ProductList[i].TCostprice * Convert.ToInt32(ItemTotal) * ProductList[i].count;//出厂价
                                                    OrderyReportProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                                    OrderyReportProduct.TCostprice = ProductList[i].TCostprice;
                                                    if (!string.IsNullOrEmpty(ProductList[i].TManufacturersCode))
                                                    {
                                                        OrderyReportProduct.TManufacturersCode = ProductList[i].TManufacturersCode;
                                                    }
                                                    else
                                                    {
                                                        OrderyReportProduct.TManufacturersCode = ProductList[i].ManufacturersCode;
                                                    }
                                                }
                                                else
                                                {
                                                    //OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                                                    OrderyReportProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                                                    OrderyReportProduct.Specifications = ProductList[i].Specifications;//尺寸
                                                    OrderyReportProduct.FactoryPrice = ProductList[i].Costprice * Convert.ToInt32(ItemTotal) * ProductList[i].count;//出厂价
                                                    OrderyReportProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                                    OrderyReportProduct.TCostprice = ProductList[i].Costprice;
                                                    OrderyReportProduct.TManufacturersCode = ProductList[i].ManufacturersCode;
                                                }
                                            }
                                            else
                                            {
                                                //OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                                                OrderyReportProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                                                OrderyReportProduct.Specifications = ProductList[i].Specifications;//尺寸
                                                OrderyReportProduct.FactoryPrice = ProductList[i].Costprice * Convert.ToInt32(ItemTotal) * ProductList[i].count;//出厂价
                                                OrderyReportProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                                OrderyReportProduct.TCostprice = ProductList[i].Costprice;
                                                OrderyReportProduct.TManufacturersCode = ProductList[i].ManufacturersCode;
                                            }

                                            #region 原代码
                                            //if (ProductList.Count > 0)
                                            //{
                                            //    if (ProductList[0].TDateTimeStart != null && ProductList[0].TDateTimeEnd != null && PaymentConfirmTime != null && PaymentConfirmTime != "" && PaymentConfirmTime != "0001-01-01 00:00:00")
                                            //    {
                                            //        if (DateTime.Parse(PaymentConfirmTime.ToString().Trim()) >= ProductList[0].TDateTimeStart && DateTime.Parse(PaymentConfirmTime.ToString().Trim()) <= ProductList[0].TDateTimeEnd)
                                            //        {

                                            //            OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                                            //            OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                                            //            OrderyReportProduct.FactoryPrice = ProductList[0].TCostprice * Convert.ToInt32(ItemTotal);//出厂价
                                            //            OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                            //            OrderyReportProduct.TCostprice = ProductList[0].TCostprice;
                                            //        }
                                            //        else
                                            //        {
                                            //            OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                                            //            OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                                            //            OrderyReportProduct.FactoryPrice = ProductList[0].Costprice * Convert.ToInt32(ItemTotal);//出厂价
                                            //            OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                            //            OrderyReportProduct.TCostprice = ProductList[0].Costprice;
                                            //        }

                                            //    }
                                            //    else
                                            //    {
                                            //        OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                                            //        OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                                            //        OrderyReportProduct.FactoryPrice = ProductList[0].Costprice * Convert.ToInt32(ItemTotal);//出厂价
                                            //        OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                            //        OrderyReportProduct.TCostprice = ProductList[0].Costprice;
                                            //    }
                                            //}

                                            //else
                                            //{
                                            //    OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                                            //    OrderyReportProduct.Specifications = "";//尺寸
                                            //    OrderyReportProduct.FactoryPrice = 0;//出厂价
                                            //    OrderyReportProduct.ProductName = "无产品";


                                            //    xmorderInfo.IsAbnormal = true;//是否异常
                                            //}
                                            #endregion

                                            OrderyReportProduct.Remarks = Remarks;
                                            //OrderyReportProduct.PlatformMerchantCode = SkuId.ToString();//京东Id
                                            OrderyReportProduct.ProductNum = Convert.ToInt32(ItemTotal) * ProductList[i].count;

                                            if (PaymentConfirmTime != null && PaymentConfirmTime != "" && PaymentConfirmTime != "0001-01-01 00:00:00")
                                            {
                                                OrderyReportProduct.CutoffShipDay = DateTime.Parse(PaymentConfirmTime.ToString().Trim()).AddDays(+20);//截止发货日 
                                            }

                                            //decimal SalesPriceV = Convert.ToDecimal(OrderSellerPrice.ToString().Trim());//销售价
                                            //OrderyReportProduct.SalesPrice = Math.Round(SalesPriceV / Convert.ToInt32(ItemTotal), 2);// SalesPriceV / Convert.ToInt32(ItemTotal);//销售价
                                            //OrderyReportProduct.SalesPrice = decimal.Parse(JdPrice == null ? "0" : JdPrice);//销售价
                                            //if (i < ProductList.Count - 1)
                                            //{
                                            //    OrderyReportProduct.SalesPrice = Math.Round(decimal.Parse(((ProductList[i].Costprice * ProductList[i].count * decimal.Parse(ItemTotal) / a) * decimal.Parse(JdPrice)).ToString()), 2);//销售价
                                            //    tj = tj + OrderyReportProduct.SalesPrice;
                                            //}
                                            //else
                                            //{
                                            //    OrderyReportProduct.SalesPrice = decimal.Parse(JdPrice) - tj;//销售价
                                            //}

                                            decimal PartPayPrice = 0;
                                            if (j == orderInfoitems.Count() - 1)
                                            {
                                                PartPayPrice = (decimal)xmorderInfo.PayPrice - payPriceK;
                                            }
                                            else
                                            {
                                                PartPayPrice = Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(JdPrice) * decimal.Parse(ItemTotal) / priceTotal, 2);
                                                //payPriceK += PartPayPrice;
                                            }
                                            if (IsZuHe)
                                            {
                                                if (i == ProductList.Count - 1)
                                                {
                                                    OrderyReportProduct.SalesPrice = PartPayPrice - payPriceI;
                                                    payPriceK += PartPayPrice;
                                                }
                                                else
                                                {
                                                    if (ZuHeTotal == 0) //产品销售价没有维护，是0时导致分母为0，计算出错
                                                    {
                                                        OrderyReportProduct.SalesPrice = 0;
                                                    }
                                                    else
                                                    {
                                                        OrderyReportProduct.SalesPrice = Math.Round(PartPayPrice * (decimal)ProductList[i].Saleprice * decimal.Parse(ProductList[i].count.ToString()) / ZuHeTotal, 2);//销售价
                                                    }
                                                    payPriceI += (decimal)OrderyReportProduct.SalesPrice;
                                                }
                                            }
                                            else
                                            {
                                                OrderyReportProduct.SalesPrice = Math.Round(PartPayPrice, 2);//销售价
                                                payPriceK += PartPayPrice;
                                            }

                                            OrderyReportProduct.IsEnable = false;//是否删除
                                            OrderyReportProduct.IsAudit = false;//是否审核
                                            OrderyReportProduct.ISArrivedLibrary = false;//是否抵库
                                            OrderyReportProduct.IsExpedited = false;//是否加急

                                            if (scProductName == "")
                                            {
                                                scProductName = OrderyReportProduct.ProductName;
                                                //scSalePrice = decimal.Parse(OrderyReportProduct.SalesPrice == null ? "0" : OrderyReportProduct.SalesPrice.ToString());
                                            }

                                            if (HozestERPContext.Current.User != null)
                                            {
                                                OrderyReportProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                OrderyReportProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                            }
                                            else
                                            {
                                                string UserName = "admin";
                                                List<HozestERP.BusinessLogic.CustomerManagement.Customer> customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                if (customer.Count > 0)
                                                {
                                                    OrderyReportProduct.CreateID = customer[0].CustomerID;
                                                    OrderyReportProduct.UpdateID = customer[0].CustomerID;
                                                }
                                            }

                                            OrderyReportProduct.CreateDate = DateTime.Now;
                                            OrderyReportProduct.UpdateDate = DateTime.Now;
                                            xmorderInfo.XM_OrderInfoProductDetails.Add(OrderyReportProduct);
                                        }
                                    }
                                    else
                                    {
                                        var OrderyReportProduct = new XMOrderInfoProductDetails();

                                        OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                                        OrderyReportProduct.Specifications = "";//尺寸
                                        OrderyReportProduct.FactoryPrice = 0;//出厂价
                                        OrderyReportProduct.ProductName = "无产品";


                                        xmorderInfo.IsAbnormal = true;//是否异常

                                        OrderyReportProduct.Remarks = Remarks;
                                        //OrderyReportProduct.PlatformMerchantCode = SkuId.ToString();//京东Id
                                        OrderyReportProduct.ProductNum = Convert.ToInt32(ItemTotal);

                                        if (PaymentConfirmTime != null && PaymentConfirmTime != "" && PaymentConfirmTime != "0001-01-01 00:00:00")
                                        {
                                            OrderyReportProduct.CutoffShipDay = DateTime.Parse(PaymentConfirmTime.ToString().Trim()).AddDays(+20);//截止发货日 
                                        }

                                        //decimal SalesPriceV = Convert.ToDecimal(OrderSellerPrice.ToString().Trim());//销售价
                                        //OrderyReportProduct.SalesPrice = Math.Round(SalesPriceV / Convert.ToInt32(ItemTotal), 2);// SalesPriceV / Convert.ToInt32(ItemTotal);//销售价
                                        OrderyReportProduct.SalesPrice = decimal.Parse(JdPrice == null ? "0" : (decimal.Parse(ItemTotal.ToString()) * decimal.Parse(JdPrice.ToString())).ToString());//销售价

                                        OrderyReportProduct.IsEnable = false;//是否删除
                                        OrderyReportProduct.IsAudit = false;//是否审核
                                        OrderyReportProduct.ISArrivedLibrary = false;//是否抵库
                                        OrderyReportProduct.IsExpedited = false;//是否加急

                                        if (scProductName == "")
                                        {
                                            scProductName = OrderyReportProduct.ProductName;
                                            //scSalePrice = decimal.Parse(OrderyReportProduct.SalesPrice == null ? "0" : OrderyReportProduct.SalesPrice.ToString());
                                        }

                                        if (HozestERPContext.Current.User != null)
                                        {
                                            OrderyReportProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                            OrderyReportProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                        }
                                        else
                                        {
                                            string UserName = "admin";
                                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                            if (customer.Count > 0)
                                            {
                                                OrderyReportProduct.CreateID = customer[0].CustomerID;
                                                OrderyReportProduct.UpdateID = customer[0].CustomerID;
                                            }
                                        }

                                        OrderyReportProduct.CreateDate = DateTime.Now;
                                        OrderyReportProduct.UpdateDate = DateTime.Now;
                                        xmorderInfo.XM_OrderInfoProductDetails.Add(OrderyReportProduct);
                                    }
                                    //InsertXMOrderInfo(OrderyReport);//base.ProjectService.InsertXMOrderInfo(OrderyReport);
                                    #endregion
                                }
                            }
                        }
                        //是否刷单
                        orderstatus = "WAIT_SELLER_STOCK_OUT,WAIT_SELLER_DELIVERY,WAIT_GOODS_RECEIVE_CONFIRM,SEND_TO_DISTRIBUTION_CENER,RECEIPTS_CONFIRM,FINISHED_L,DISTRIBUTION_CENTER_RECEIVED,TRADE_CANCELED";
                        if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                        {
                            xmorderInfo.IsScalping = IoC.Resolve<IXMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), OrderId, Remarks, CustomerServiceRemark, Pin, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                        }
                        xmorderInfo.ProductPrice = productprice;//商品总额

                        #region  保存数据

                        IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
                        InsertCount++;

                        //新建发票
                        if (xmorderInfo.IsInvoiced != null && xmorderInfo.IsInvoiced == true)
                        {
                            if (InvoiceInfo.IndexOf("普通发票") > -1)
                            {
                                ToAddXMInvoiceInfo(xmorderInfo, 719, "", "", "", "", "");
                            }
                            else if (InvoiceInfo.IndexOf("专用发票") > -1)
                            {
                                if (orderInfo.vat_invoice_info != null)
                                {
                                    ToAddXMInvoiceInfo(xmorderInfo, 720, orderInfo.vat_invoice_info.taxpayer_ident, orderInfo.vat_invoice_info.registered_address, orderInfo.vat_invoice_info.registered_phone, orderInfo.vat_invoice_info.deposit_bank, orderInfo.vat_invoice_info.bank_account);
                                }
                                else
                                {
                                    ToAddXMInvoiceInfo(xmorderInfo, 720, "", "", "", "", "");
                                }
                            }
                        }

                        #endregion
                    }
                    #endregion

                    #region 修改
                    else
                    {
                        #region 订单主表信息
                        if (Modified != null && Modified != "")
                        {
                            xmorderInfo.OrderInfoModified = DateTime.Parse(Modified);
                        }
                        if (PaymentConfirmTime != null && PaymentConfirmTime != "")
                        {
                            if (xmorderInfo.PayDate == null)
                            {
                                xmorderInfo.PayDate = DateTime.Parse(PaymentConfirmTime.ToString().Trim());
                            }

                            if (OrderState.ToString().Trim() == "WAIT_GOODS_RECEIVE_CONFIRM")//等等确认收货
                            {
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Parse(Modified.ToString().Trim());
                                }
                            }
                            if (OrderState.ToString().Trim() == "FINISHED_L")//完成时间
                            {
                                if (xmorderInfo.CompletionTime == null)
                                {
                                    xmorderInfo.CompletionTime = DateTime.Parse(Modified.ToString().Trim());
                                    //查询发票管理 有未排单 为开票的发票记录自动排单
                                    AutoSingleRow(OrderId);
                                }
                                //新增 如果发货时间为空则增加发货时间为完成时间
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Parse(Modified.ToString().Trim());
                                }
                            }
                            //OrderyReportProduct.CutoffShipDay = DateTime.Parse(PaymentConfirmTime.ToString().Trim()).AddDays(+20);//截止发货日 

                        }

                        if (OrderStartTime.ToString().Trim() != null && OrderStartTime.ToString().Trim() != "")
                        {
                            xmorderInfo.OrderInfoCreateDate = DateTime.Parse(OrderStartTime.ToString().Trim());//创单时间

                        }
                        decimal SalesPriceV1 = Convert.ToDecimal(OrderSellerPrice.ToString().Trim());//销售价 

                        //OrderyReportProduct.SalesPrice = Math.Round(SalesPriceV1 / Convert.ToInt32(ItemTotal), 2);// SalesPriceV1 / Convert.ToInt32(ItemTotal);//销售价

                        xmorderInfo.OrderStatus = OrderState.ToString().Trim();
                        xmorderInfo.RealPointFee = decimal.Parse(GiftPoint == "" ? "0" : GiftPoint);//京豆

                        //xmorderInfo.FullName = Fullname.ToString().Trim();//收货人名称
                        //xmorderInfo.DeliveryAddress = FullAddress.ToString().Trim();//收货人地址
                        //xmorderInfo.Province = Province.ToString().Trim();//收货人省
                        //xmorderInfo.City = City.ToString().Trim();//收货人省
                        //xmorderInfo.County = County.ToString().Trim();//收货人区
                        //string sMobile = Mobile.ToString().Trim();//收货人手机
                        //if (sMobile.IndexOf("'") == -1)
                        //{
                        //    xmorderInfo.Mobile = Mobile.ToString().Trim();
                        //}
                        //else
                        //{
                        //    string suMobile = sMobile.Substring(Mobile.LastIndexOf("'") + 1).ToLower();
                        //    xmorderInfo.Mobile = suMobile;
                        //}
                        xmorderInfo.OrderPromotion = PlatformDiscountAmount;//平台优惠
                        xmorderInfo.ProductPromotion = MerchantDiscountAmount;//商家优惠
                        xmorderInfo.OrderPrice = Decimal.Parse(orderInfo.order_total_price);//订单总金额
                        xmorderInfo.ReceivablePrice = decimal.Parse(orderInfo.order_seller_price);//应收金额
                        xmorderInfo.PayPrice = payprice;//已支付金额
                        xmorderInfo.IsOurOrder = true;//是我们的订单

                        #region 赠品、返现 (修改) ----修改只有订单状态为 收货确认、完成时后才能修改赠品、返现状态
                        //if (OrderState.ToString().Trim() == "RECEIPTS_CONFIRM" || OrderState.ToString().Trim() == "FINISHED_L")
                        //{
                        if (xmorderInfo.CustomerServiceRemark.Trim() != CustomerServiceRemark.Trim())
                        {
                            string CustomerServiceRemarkOld = xmorderInfo.CustomerServiceRemark.Trim();
                            string CustomerServiceRemarkNew = CustomerServiceRemark.Trim();

                            if (CustomerServiceRemarkNew.IndexOf("/赠品") > -1 || CustomerServiceRemarkNew.IndexOf("/退差价") > -1)
                            {
                                IoC.Resolve<IXMOrderInfoAPIService>().XMPremiumsAndCashBackApplication(CustomerServiceRemarkOld, CustomerServiceRemarkNew, xmorderInfo.OrderCode, xmorderInfo.WantID, xmorderInfo.FullName, (int)xmorderInfo.PlatformTypeId, (int)xmorderInfo.NickID);
                            }
                        }
                        //}
                        #endregion

                        //更改收货地址
                        //if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
                        //{
                        //    string csr = CustomerServiceRemark + "$";
                        //    string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                        //    string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");
                        //    xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                        //}

                        //更改尺寸、产品
                        //if (CustomerServiceRemark.IndexOf("//更改尺寸为") > -1)
                        //{
                        //    CustomerServiceRemark = CustomerServiceRemark + "$";
                        //    string st1 = CustomerServiceRemark.Substring(CustomerServiceRemark.IndexOf("//更改尺寸为") + 7).Replace(":", "").Replace("：", "");
                        //    changesize = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");
                        //}

                        string Memo = Remarks + CustomerServiceRemark;//OrderRemark.Substring(OrderRemark.LastIndexOf("'") + 1).ToLower();
                        string RemarksValue = "";
                        string StatusValue = "";
                        if (xmorderInfo.Remark != null && xmorderInfo.CustomerServiceRemark != null)
                        {
                            RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;
                        }
                        if (xmorderInfo.OrderStatus != null)
                        {
                            StatusValue = xmorderInfo.OrderStatus.Trim();
                        }

                        if (Memo.Trim() != RemarksValue.Trim() || StatusValue != OrderState.ToString().Trim() || DateTime.Parse(PaymentConfirmTime.ToString().Trim()) != xmorderInfo.PayDate)
                        {
                            xmorderInfo.Remark = Remarks;
                            xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//修改
                            //xmorderInfo.City = City.ToString().Trim();
                            //xmorderInfo.County = County.ToString().Trim();
                            //xmorderInfo.Province = Province.ToString().Trim();
                            xmorderInfo.IsInvoiced = IsInvoices.Value;

                            if (xmorderInfo.IsInvoiced == true && InvoiceInfo.IndexOf("发票抬头:") != -1 && (InvoiceInfo.LastIndexOf(";") - InvoiceInfo.IndexOf("发票抬头:")) > 5)
                            {
                                string invoiceHead = InvoiceInfo.Substring(InvoiceInfo.IndexOf("发票抬头:") + 5, InvoiceInfo.LastIndexOf(";") - InvoiceInfo.IndexOf("发票抬头:") - 5);
                                xmorderInfo.InvoiceHead = invoiceHead;
                            }

                            #region 记录操作

                            int UpsatorID = 0;
                            if (HozestERPContext.Current.User != null)
                            {
                                UpsatorID = HozestERPContext.Current.User.CustomerID;
                            }
                            else
                            {
                                string UserName = "admin";
                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                if (customer.Count > 0)
                                {
                                    UpsatorID = customer[0].CustomerID;
                                }
                            }

                            if (PaymentConfirmTime.ToString().Trim() != null && PaymentConfirmTime.ToString().Trim() != "")
                            {
                                if (xmorderInfo.PayDate != Convert.ToDateTime(PaymentConfirmTime.ToString().Trim()))
                                {
                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    record.OrderInfoId = xmorderInfo.ID;
                                    record.PropertyName = "PayDate";
                                    record.OldValue = System.Convert.ToString(xmorderInfo.PayDate);
                                    record.NewValue = PaymentConfirmTime.ToString().Trim();
                                    record.UpdatorID = UpsatorID;
                                    record.UpdateTime = DateTime.Now;
                                    IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record);// base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                                }
                            }


                            if (Modified != null && Modified != "")
                            {
                                if (xmorderInfo.OrderInfoModified != Convert.ToDateTime(Modified))
                                {
                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    record.OrderInfoId = xmorderInfo.ID;
                                    record.PropertyName = "OrderInfoModified";
                                    record.OldValue = System.Convert.ToString(xmorderInfo.OrderInfoModified);
                                    record.NewValue = Modified.ToString().Trim();
                                    record.UpdatorID = UpsatorID;
                                    record.UpdateTime = DateTime.Now;
                                    IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record);//base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                                }
                            }

                            if (Remarks != null && Remarks != "")
                            {
                                if (xmorderInfo.Remark != Remarks)
                                {
                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    record.OrderInfoId = xmorderInfo.ID;
                                    record.PropertyName = "Remarks";
                                    record.OldValue = xmorderInfo.Remark;
                                    record.NewValue = Remarks;
                                    record.UpdatorID = UpsatorID;
                                    record.UpdateTime = DateTime.Now;
                                    IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                }
                            }
                            if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                            {
                                if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
                                {
                                    var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, CustomerServiceRemark);
                                    if (RecordExist == null || RecordExist.Count == 0)
                                    {
                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                        record.OrderInfoId = xmorderInfo.ID;
                                        record.PropertyName = "CustomerServiceRemark";
                                        record.OldValue = xmorderInfo.CustomerServiceRemark;
                                        record.NewValue = CustomerServiceRemark;
                                        record.UpdatorID = UpsatorID;
                                        record.UpdateTime = DateTime.Now;
                                        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                    }
                                }
                            }
                            if (xmorderInfo.OrderStatus != OrderState.ToString().Trim())
                            {
                                XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                record.OrderInfoId = xmorderInfo.ID;
                                record.PropertyName = "OrderStatus";
                                record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                                record.NewValue = System.Convert.ToString(OrderState.ToString().Trim());
                                record.UpdatorID = UpsatorID;

                                if (Modified != null && Modified != "")
                                {
                                    record.UpdateTime = DateTime.Parse(Modified);
                                }
                                else
                                {
                                    record.UpdateTime = DateTime.Now;
                                }
                                IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                            }

                            #endregion
                        }

                        if (HozestERPContext.Current.User != null)
                        {
                            xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                        }
                        else
                        {
                            string UserName = "admin";
                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                            if (customer.Count > 0)
                            {
                                xmorderInfo.UpdateID = customer[0].CustomerID;
                            }
                        }
                        xmorderInfo.UpdateDate = DateTime.Now;

                        #endregion

                        string scProductName = "";//商品名称（刷单）
                        //decimal scSalePrice = 0;//销售价(刷单)

                        #region 注释的原订单从表商品详情
                        //for (int j = 0; j < orderInfo.ItemInfoList.Count; j++)
                        //{
                        //    SkuName = orderInfo.ItemInfoList[j].SkuName;
                        //    ItemTotal = orderInfo.ItemInfoList[j].ItemTotal;
                        //    JdPrice = orderInfo.ItemInfoList[j].JdPrice;
                        //    OuterSkuId = orderInfo.ItemInfoList[j].OuterSkuId;
                        //    SkuId = orderInfo.ItemInfoList[j].SkuId;
                        //    WareId = orderInfo.ItemInfoList[j].WareId;
                        //    if ((SkuId != "" && SkuId != null))
                        //    {
                        //        #region 数据赋值
                        //        //京东Id查询。
                        //        var ProductList = IoC.Resolve<IXMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(SkuId.ToString(), int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());

                        //        //var OrderyReportProduct = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == SkuId && p.IsEnable==false).SingleOrDefault();

                        //        //if (OrderyReportProduct == null)
                        //        //{
                        //        //    OrderyReportProduct = new XMOrderInfoProductDetails();
                        //        //}

                        //        var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == SkuId).ToList();//.SingleOrDefault();

                        //        XMOrderInfoProductDetails OrderyReportProduct = null;

                        //        if (OrderyReportProductList.Count == 0)
                        //        {
                        //            OrderyReportProduct = new XMOrderInfoProductDetails();
                        //        }
                        //        else
                        //        {
                        //            OrderyReportProduct = OrderyReportProductList[0];
                        //        }

                        //        decimal FactoryPrice = 0;

                        //        if (ProductList.Count > 0)
                        //        {
                        //            if (ProductList[0].TDateTimeStart != null && ProductList[0].TDateTimeEnd != null && PaymentConfirmTime != null && PaymentConfirmTime != "" && PaymentConfirmTime != "0001-01-01 00:00:00")
                        //            {
                        //                if (DateTime.Parse(PaymentConfirmTime.ToString().Trim()) >= ProductList[0].TDateTimeStart && DateTime.Parse(PaymentConfirmTime.ToString().Trim()) <= ProductList[0].TDateTimeEnd)
                        //                {
                        //                    OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                        //                    OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                        //                    OrderyReportProduct.FactoryPrice = ProductList[0].TCostprice * Convert.ToInt32(ItemTotal);//出厂价
                        //                    OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                        //                    FactoryPrice = ProductList[0].TCostprice.Value * Convert.ToInt32(ItemTotal);//出厂价
                        //                }
                        //                else
                        //                {
                        //                    OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                        //                    OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                        //                    OrderyReportProduct.FactoryPrice = ProductList[0].Costprice * Convert.ToInt32(ItemTotal);//出厂价
                        //                    OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                        //                    FactoryPrice = ProductList[0].Costprice.Value * Convert.ToInt32(ItemTotal);//出厂价
                        //                }

                        //            }
                        //            else
                        //            {
                        //                OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                        //                OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                        //                OrderyReportProduct.FactoryPrice = ProductList[0].Costprice * Convert.ToInt32(ItemTotal);//出厂价
                        //                OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                        //                FactoryPrice = ProductList[0].Costprice.Value * Convert.ToInt32(ItemTotal);//出厂价
                        //            }
                        //        }
                        //        else
                        //        {
                        //            OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                        //            OrderyReportProduct.Specifications = "";//尺寸
                        //            OrderyReportProduct.FactoryPrice = 0;//出厂价
                        //            OrderyReportProduct.ProductName = "无产品";
                        //        }
                        //        if (scProductName == "")
                        //        {
                        //            scProductName = OrderyReportProduct.ProductName;
                        //            // scSalePrice = decimal.Parse(OrderyReportProduct.SalesPrice == null ? "0" : OrderyReportProduct.SalesPrice.ToString());
                        //        }

                        //        if (Memo.Trim() != RemarksValue.Trim() || StatusValue != OrderState.ToString().Trim() || DateTime.Parse(PaymentConfirmTime.ToString().Trim()) != xmorderInfo.PayDate
                        //            || OrderyReportProduct.FactoryPrice.ToString() != FactoryPrice.ToString())
                        //        {
                        //            if (PaymentConfirmTime != null && PaymentConfirmTime != "")
                        //            {
                        //                OrderyReportProduct.CutoffShipDay = DateTime.Parse(PaymentConfirmTime.ToString().Trim()).AddDays(+20);//截止发货日 
                        //            }

                        //            //OrderyReportProduct.SalesPrice = Math.Round(SalesPriceV1 / Convert.ToInt32(ItemTotal), 2);// SalesPriceV1 / Convert.ToInt32(ItemTotal);//销售价
                        //            OrderyReportProduct.SalesPrice = decimal.Parse(JdPrice);//销售价

                        //            if (HozestERPContext.Current.User != null)
                        //            {
                        //                OrderyReportProduct.UpdateID = HozestERPContext.Current.User.CustomerID;
                        //            }
                        //            else
                        //            {
                        //                string UserName = "admin";
                        //                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                        //                if (customer.Count > 0)
                        //                {
                        //                    OrderyReportProduct.UpdateID = customer[0].CustomerID;
                        //                }
                        //            }
                        //            OrderyReportProduct.UpdateDate = DateTime.Now;
                        //        }
                        //        #endregion
                        //    }
                        //}
                        #endregion

                        //是否刷单
                        orderstatus = "WAIT_SELLER_STOCK_OUT,WAIT_SELLER_DELIVERY,WAIT_GOODS_RECEIVE_CONFIRM,SEND_TO_DISTRIBUTION_CENER,RECEIPTS_CONFIRM,FINISHED_L,DISTRIBUTION_CENTER_RECEIVED,TRADE_CANCELED";
                        if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                        {
                            xmorderInfo.IsScalping = IoC.Resolve<IXMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), OrderId, Remarks, CustomerServiceRemark, Pin, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                        }

                        #region 保存数据

                        IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
                        UpdateCount++;

                        #endregion

                    }
                    #endregion
                }
            }
            catch (Exception e)
            {
                throw new Exception(e.Message);
            }

        }

        /// <summary>
        /// 根据订单号，抓取数据 天猫
        /// </summary>
        /// <param name="trade"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        public void getTradeTM(Trade trade, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            XMOrderInfo xmOrderInfo = new XMOrderInfo();

            List<Order> order = null;
            if (trade.Orders.Count > 0)
            {
                order = trade.Orders;
            }
            string buyerNick = "";//ID 
            // string Remarks = "";//备注
            string CustomerServiceRemark = "";//客服备注

            string buyermessage = trade.BuyerMessage;//买家留言

            string SellerMemo = "";
            //是否发票  
            bool? IsInvoices = false;

            string changesize = "";//改变尺寸（商品编码）
            string deliveryaddressspare = "";//备用地址
            if (trade != null)
            {
                buyerNick = trade.BuyerNick;//ID 
                SellerMemo = trade.SellerMemo; //备注

                #region 备注
                if (SellerMemo != null)
                {
                    //if (SellerMemo.IndexOf("//赠品") > -1)
                    //{
                    //    string strRemarks = SellerMemo.Substring(0, SellerMemo.LastIndexOf("//赠品")); //备注
                    //    if (SellerMemo.Length != strRemarks.Length)
                    //    {
                    //        string CustomerServiceRemarks = SellerMemo.Substring(SellerMemo.LastIndexOf("//赠品") + 2).ToLower();//  客服备注  
                    //        CustomerServiceRemark = CustomerServiceRemarks;
                    //    }
                    //    else
                    //    {
                    //        CustomerServiceRemark = "";
                    //    }
                    //    Remarks = strRemarks;
                    //}
                    //else
                    //{
                    //    Remarks = SellerMemo;
                    //}

                    CustomerServiceRemark = SellerMemo;
                    if (SellerMemo.IndexOf("发票") > -1)
                    {
                        IsInvoices = true;//要发票
                    }
                }
                else
                {
                    CustomerServiceRemark = "";
                    //Remarks = "";
                }
                #endregion
            }
            string buyeralipayno = trade.BuyerAlipayNo;
            string created = trade.Created;// 创单时间
            string PayTime = trade.PayTime;//支付时间
            string ConsignTime = trade.ConsignTime;//发货时间
            string Modified = trade.Modified;//修改时间
            string Payment = trade.Payment;//支付金额  
            if (trade.StepPaidFee != null)
            {
                Payment = trade.StepPaidFee;//预付金额  
            }
            if (trade.PaidCouponFee != null) //支付金额减去满减金额
            {
                Payment = (decimal.Parse(Payment) - decimal.Parse(trade.PaidCouponFee)).ToString();
            }
            string receivedPayment = trade.ReceivedPayment;//支付宝到帐金额
            string receiverState = trade.ReceiverState; //省
            string receiverAddress = trade.ReceiverAddress;//详细地址
            string receiverCity = trade.ReceiverCity;//市
            string receiverDistrict = trade.ReceiverDistrict;//区 
            long pNum = trade.Num;
            string receiverZip = trade.ReceiverZip;

            string Mobile = "";
            string ReceiverMobile = trade.ReceiverMobile;//手机 

            if (ReceiverMobile != null)
            {
                if (ReceiverMobile.IndexOf("'") == -1)
                {
                    Mobile = trade.ReceiverMobile;//手机
                }
                else
                {
                    string suMobile = ReceiverMobile.Substring(ReceiverMobile.LastIndexOf("'") + 1).ToLower();
                    Mobile = suMobile;
                }
            }
            else
            {
                Mobile = "";
            }

            string receiverName = trade.ReceiverName;//收货人
            string receiverPhone = trade.ReceiverPhone;//电话
            string Address = receiverState + receiverCity + receiverDistrict + receiverAddress + "(" + receiverZip + ")";//地址   
            string Tid = trade.Tid.ToString();//订单编号
            string TotalFee = trade.TotalFee; //总费用   
            string ShippingType = trade.ShippingType;//

            string OuterSkuId = "";//商品编码
            long num = 0;//数量
            string title = "";
            string InvoiceNo = "";//包裹的运单号
            string LogisticsCompanys = "";//发货的快递公司名称
            string price = "";//价格
            decimal scSalePrice = 0;//销售价(刷单)

            //平台优惠金额
            decimal PlatformDiscountAmount = 0;
            if (trade.PromotionDetails != null && trade.PromotionDetails.Count > 0)
            {
                foreach (var item in trade.PromotionDetails)
                {
                    if (item.PromotionName == "红包" || item.PromotionName == "天猫购物券" || item.PromotionName == "天猫积分" || item.PromotionName == "集分宝")
                    {
                        PlatformDiscountAmount += decimal.Parse(item.DiscountFee);
                    }
                }
            }

            //if (order.Count > 0 && order[0].Title != null && order[0].Title != "喜临门城市爱情运费补拍专用链接")
            //{
            //订单主表详情
            XMOrderInfo xmorderInfo = new XMOrderInfo();
            xmorderInfo = IoC.Resolve<IXMOrderInfoAPIService>().GetXMOrderInfoByOrderCode(Tid);

            #region 新增
            if (xmorderInfo == null)
            {
                xmorderInfo = new XMOrderInfo();
                xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();
                xmorderInfo.NickID = xMorderInfoApp.NickId.Value; //1;//1:城市爱情旗舰店
                xmorderInfo.PlatformTypeId = xMorderInfoApp.PlatformTypeId;//250;//平台类型（天猫）
                xmorderInfo.OrderInfoCreateDate = Convert.ToDateTime(created);//创单时间

                if (PayTime != null && PayTime != "")
                {
                    if (xmorderInfo.PayDate == null)
                    {
                        xmorderInfo.PayDate = Convert.ToDateTime(PayTime);//付款时间
                    }
                    if (ConsignTime != "" && ConsignTime != null && ConsignTime != "0001-01-01 00:00:00")// "WAIT_BUYER_CONFIRM_GOODS")//等待买家确认收货,即:卖家已发货
                    {
                        if (xmorderInfo.DeliveryTime == null)
                        {
                            xmorderInfo.DeliveryTime = Convert.ToDateTime(ConsignTime);//发货时间
                        }
                    }
                    if (trade.Status == "TRADE_FINISHED")//交易成功
                    {
                        if (Modified != null && Modified != "")
                        {

                            if (xmorderInfo.CompletionTime == null)
                            {
                                xmorderInfo.CompletionTime = DateTime.Parse(Modified.ToString().Trim());//完成时间
                                //查询发票管理 自动将未排单 未开票的发票 自动排单
                                AutoSingleRow(Tid);
                            }
                            //--新增 如果订单完成则发货时间为完成时间
                            if (xmorderInfo.DeliveryTime == null)
                            {
                                xmorderInfo.DeliveryTime = Convert.ToDateTime(Modified.ToString().Trim());//发货时间
                            }
                        }
                    }

                    //if (trade.Status == "WAIT_BUYER_CONFIRM_GOODS")
                    //{
                    //    xmorderInfo.DeliveryTime = Convert.ToDateTime(PayTime);// DateTime.Parse(PayTime.ToString().Trim()).AddDays(+15);//发货时间
                    //}
                    //XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//发货时间

                    #region 赠品、返现 ---订单完成才新增返现和赠品
                    //trade.Status.ToString().Trim() == "WAIT_SELLER_SEND_GOODS" || trade.Status.ToString().Trim() == "SELLER_CONSIGNED_PART"
                    //    || trade.Status.ToString().Trim() == "WAIT_BUYER_CONFIRM_GOODS" || 
                    //                                || trade.Status.ToString().Trim() == "WAIT_SELLER_STOCK_OUT" || trade.Status.ToString().Trim() == "WAIT_GOODS_RECEIVE_CONFIRM"
                    //    || trade.Status.ToString().Trim() == "FINISHED_L" 
                    //if (trade.Status.ToString().Trim() == "TRADE_FINISHED")
                    //{
                    if (created.ToString().Trim() != null && created.ToString().Trim() != "")
                    {
                        if (DateTime.Parse(created.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                        {
                            if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                            {
                                //string BuyerAlipayNoS = buyeralipayno;//收款账号  
                                string BuyerName = receiverName;//收货人名称
                                string WantNo = buyerNick;//旺旺号
                                string OrderCode = Tid;//订单号 
                                string paramMessage = string.Empty;

                                if (CustomerServiceRemark.IndexOf("/赠品") > -1 || CustomerServiceRemark.IndexOf("/退差价") > -1)
                                {
                                    #region 赠品
                                    if (CustomerServiceRemark.IndexOf("/赠品") > -1)
                                    {
                                        //返回赠品条数
                                        int PremiumsInst = XMPremiumsInst(CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, xMorderInfoApp.PlatformTypeId.Value, xMorderInfoApp.NickId.Value);

                                    }
                                    #endregion

                                    #region 返现
                                    if (CustomerServiceRemark.IndexOf("/退差价") > -1)
                                    {
                                        if ((CustomerServiceRemark.IndexOf("/支付宝") > -1 || CustomerServiceRemark.IndexOf("/卡号") > -1))
                                        {
                                            //返回返现条数
                                            int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                        }
                                        else
                                        {

                                            //返回返现条数
                                            int CashBackApplicationInstCount = TMCashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                        }
                                    }

                                    #endregion
                                }
                            }
                        }
                    }

                    //}
                    #endregion

                }
                if (Modified != null && Modified != "")
                {
                    xmorderInfo.OrderInfoModified = DateTime.Parse(Modified);//变更时间
                }
                xmorderInfo.OrderCode = Tid;//订单号
                xmorderInfo.OrderStatus = trade.Status;//状态 
                //orderInfo.LogisticsId = LogisticsCompanys;//物流公司ID 
                // orderInfo.LogisticsNumber = InvoiceNo;//物流单号(运单号) 
                xmorderInfo.WantID = buyerNick;//旺旺id
                xmorderInfo.Mobile = Mobile;//手机
                xmorderInfo.Tel = receiverPhone;//电话
                xmorderInfo.BuyerE_mail = trade.BuyerEmail;//买家邮件地址
                xmorderInfo.FullName = receiverName;//姓名

                //orderInfo.Province= receiverState; //省 
                //orderInfo.City =receiverCity;//市
                //orderInfo.County= receiverDistrict;//区 
                if (receiverCity != null)
                {
                    xmorderInfo.City = receiverCity.ToString().Trim();//市
                }
                if (receiverDistrict != null)
                {
                    xmorderInfo.County = receiverDistrict.ToString().Trim();//区
                }
                if (receiverState != null)
                {
                    xmorderInfo.Province = receiverState.ToString().Trim();//省
                }
                xmorderInfo.DeliveryAddress = Address;//收货地址
                xmorderInfo.SourceType = "同步";//数据来源类型
                xmorderInfo.FinancialAudit = true;//财务审核
                xmorderInfo.Remark = buyermessage;//备注
                xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//客服备注（新增）
                xmorderInfo.IsInvoiced = IsInvoices.Value;//是否发票
                xmorderInfo.InvoiceHead = trade.InvoiceName;//发票抬头
                xmorderInfo.PayMethod = trade.Type;//支付方式
                xmorderInfo.DistributeMethod = trade.ShippingType;//配送方式
                xmorderInfo.DistributePrice = Decimal.Parse(trade.PostFee == null ? "0" : trade.PointFee.ToString());//配送费用（天猫）
                xmorderInfo.IsDistributed = trade.HasYfx;//是否保价（运费险）
                if (trade.HasYfx == true)
                {
                    xmorderInfo.SupportPrice = Decimal.Parse(trade.YfxFee);//保价费用
                }
                xmorderInfo.ProductPrice = decimal.Parse(trade.TotalFee);//商品总金额
                xmorderInfo.Taxes = decimal.Parse(trade.CommissionFee);//税金

                decimal ordertotal = 0;//订单总金额  (商品总额+邮费+运费险+交易佣金)
                ordertotal = decimal.Parse(trade.TotalFee) + Decimal.Parse(trade.PostFee);
                if (xmorderInfo.IsDistributed == true)
                {
                    ordertotal += Decimal.Parse(trade.YfxFee);
                }
                ordertotal += decimal.Parse(trade.CommissionFee);
                xmorderInfo.OrderPrice = ordertotal;//订单金额

                decimal receiveprice = 0;//应收金额  （订单总金额-优惠金额）
                if (trade.PromotionDetails != null && trade.PromotionDetails.Count > 0)
                {
                    receiveprice = ordertotal - decimal.Parse(trade.PromotionDetails[0].DiscountFee);
                }
                xmorderInfo.PayPrice = Decimal.Parse(Payment) + PlatformDiscountAmount;//支付金额
                xmorderInfo.ReceivablePrice = Decimal.Parse(receivedPayment);//支付宝到帐金额
                scSalePrice = Decimal.Parse(trade.Payment);
                //orderInfo.IsScalping = false;//是否刷单
                xmorderInfo.IsCashBack = false;//是否返现
                xmorderInfo.IsSentGifts = false;//是否已发赠品 
                xmorderInfo.IsEvaluate = false;//是否赔付
                xmorderInfo.IsEnable = false;//是否删除
                xmorderInfo.IsOurOrder = true;//是我们的订单

                if (HozestERPContext.Current.User != null)
                {
                    xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                    xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;

                }
                else
                {
                    string UserName = "admin";
                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                    if (customer.Count > 0)
                    {
                        xmorderInfo.CreateID = customer[0].CustomerID;
                        xmorderInfo.UpdateID = customer[0].CustomerID;
                    }
                }

                xmorderInfo.CreateDate = DateTime.Now;
                xmorderInfo.UpdateDate = DateTime.Now;


                string scProductName = "";//商品名称（刷单）
                decimal priceTotal = 0;//总商品金额
                for (int k = 0; k < order.Count; k++)
                {
                    decimal PriceNum = decimal.Parse(order[k].Price == null ? "0" : (order[k].Price == "" ? "0" : order[k].Price)) * order[k].Num;
                    priceTotal += PriceNum;
                }
                decimal payPriceK = 0;//已赋值付款金额
                for (int k = 0; k < order.Count; k++)
                {
                    OuterSkuId = order[k].OuterSkuId;//商品编码
                    //如果没有细分的商家编码并且有统一的商家编码就用统一商家编码代替OuterSkuId
                    if (OuterSkuId == null && order[k].OuterIid != null)
                    {
                        OuterSkuId = order[k].OuterIid;
                    }
                    num = order[k].Num;//数量
                    title = order[k].Title; //标题
                    InvoiceNo = order[k].InvoiceNo;//包裹的运单号
                    LogisticsCompanys = order[k].LogisticsCompany;//发货的快递公司名称
                    price = order[k].Price == null ? "0" : (order[k].Price == "" ? "0" : order[k].Price);//商品价格
                    //XMOrderInfoProductDetails XMOrderInfoProduct = new XMOrderInfoProductDetails();
                    if (OuterSkuId != "" && OuterSkuId != null)
                    {
                        bool IsZuHe = false;
                        //商家编码查询
                        var ProductList = IoC.Resolve<IXMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);

                        //2015-7-28新增
                        decimal a = 0;
                        decimal? tj = 0;
                        if (ProductList.Count == 0)
                        {
                            ProductList = GetXMProductListByzuheCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                            a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                            if (ProductList.Count > 0)
                            {
                                IsZuHe = true;
                            }
                        }

                        //var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                        //XMOrderInfoProductDetails XMOrderInfoProduct = null;

                        //if (OrderyReportProductList.Count == 0)
                        //{
                        //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
                        //}
                        //else
                        //{

                        //    XMOrderInfoProduct = OrderyReportProductList[0];
                        //}
                        if (ProductList.Count > 0)
                        {
                            decimal payPriceI = 0;//组合已赋值付款金额
                            decimal ZuHeTotal = 0;
                            for (int i = 0; i < ProductList.Count; i++)
                            {
                                decimal ZuHeNum = (decimal)ProductList[i].Saleprice * decimal.Parse(ProductList[i].count.ToString());
                                ZuHeTotal += ZuHeNum;
                            }
                            for (int i = 0; i < ProductList.Count; i++)
                            {
                                var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                //if (ProductList.Count > 0)
                                //{
                                //商品关联主表信息
                                //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList.ProductId.ToString()));
                                if (ProductList[i].TDateTimeStart != null && ProductList[i].TDateTimeEnd != null && PayTime != null && PayTime != "" && PayTime != "0001-01-01 00:00:00")
                                {
                                    if (Convert.ToDateTime(PayTime) >= ProductList[i].TDateTimeStart && Convert.ToDateTime(PayTime) <= ProductList[i].TDateTimeEnd)
                                    {
                                        XMOrderInfoProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)OuterSkuId
                                        //orderInfo.PartNo = ProductList[i].Merchantcode; //料号（商品编码）
                                        XMOrderInfoProduct.Specifications = ProductList[i].Specifications;//尺寸
                                        XMOrderInfoProduct.FactoryPrice = ProductList[i].TCostprice * Convert.ToInt32(num * ProductList[i].count);//出厂价
                                        XMOrderInfoProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                        XMOrderInfoProduct.TCostprice = ProductList[i].TCostprice;
                                        if (!string.IsNullOrEmpty(ProductList[i].TManufacturersCode))
                                        {
                                            XMOrderInfoProduct.TManufacturersCode = ProductList[i].TManufacturersCode;
                                        }
                                        else
                                        {
                                            XMOrderInfoProduct.TManufacturersCode = ProductList[i].ManufacturersCode;
                                        }
                                    }
                                    else
                                    {
                                        XMOrderInfoProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)OuterSkuId
                                        XMOrderInfoProduct.Specifications = ProductList[i].Specifications;//尺寸
                                        XMOrderInfoProduct.FactoryPrice = ProductList[i].Costprice * num * ProductList[i].count;//出厂价*数量
                                        XMOrderInfoProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                        XMOrderInfoProduct.TCostprice = ProductList[i].Costprice;
                                        XMOrderInfoProduct.TManufacturersCode = ProductList[i].ManufacturersCode;
                                    }
                                }
                                else
                                {
                                    //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                    XMOrderInfoProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;
                                    XMOrderInfoProduct.Specifications = ProductList[i].Specifications;//尺寸
                                    XMOrderInfoProduct.FactoryPrice = ProductList[i].Costprice * num * ProductList[i].count;//出厂价*数量
                                    XMOrderInfoProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                    XMOrderInfoProduct.TCostprice = ProductList[i].Costprice;
                                    XMOrderInfoProduct.TManufacturersCode = ProductList[i].ManufacturersCode;
                                }
                                //}
                                XMOrderInfoProduct.ProductNum = Convert.ToInt32(num * ProductList[i].count);//数量
                                if (PayTime != null && PayTime != "")
                                {
                                    XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//截止发货时间

                                }
                                //XMOrderInfoProduct.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);// Convert.ToDecimal(Payment) / Convert.ToInt32(num);//销售价
                                //XMOrderInfoProduct.SalesPrice = decimal.Parse(price);//销售价
                                //if (i < ProductList.Count - 1)
                                //{
                                //    XMOrderInfoProduct.SalesPrice = Math.Round(decimal.Parse(((ProductList[i].Costprice * ProductList[i].count * num / a) * decimal.Parse(price)).ToString()), 2);//销售价
                                //    tj = tj + XMOrderInfoProduct.SalesPrice;
                                //}
                                //else
                                //{
                                //    XMOrderInfoProduct.SalesPrice = decimal.Parse(price) - tj;//销售价
                                //}

                                decimal PartPayPrice = 0;
                                if (k == order.Count - 1)
                                {
                                    PartPayPrice = (decimal)xmorderInfo.PayPrice - payPriceK;
                                }
                                else
                                {
                                    PartPayPrice = Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(price) * num / priceTotal, 2);
                                    //payPriceK += PartPayPrice;
                                }
                                if (IsZuHe)
                                {
                                    if (i == ProductList.Count - 1)
                                    {
                                        XMOrderInfoProduct.SalesPrice = PartPayPrice - payPriceI;
                                        payPriceK += PartPayPrice;
                                    }
                                    else
                                    {
                                        if (ZuHeTotal == 0) //产品销售价没有维护，是0时导致分母为0，计算出错
                                        {
                                            XMOrderInfoProduct.SalesPrice = 0;
                                        }
                                        else
                                        {
                                            XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice * (decimal)ProductList[i].Saleprice * decimal.Parse(ProductList[i].count.ToString()) / ZuHeTotal, 2);//销售价
                                        }
                                        payPriceI += (decimal)XMOrderInfoProduct.SalesPrice;
                                    }
                                }
                                else
                                {
                                    XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice, 2);//销售价
                                    payPriceK += PartPayPrice;
                                }

                                XMOrderInfoProduct.IsEnable = false;//是否删除
                                XMOrderInfoProduct.IsAudit = false;//是否审核
                                XMOrderInfoProduct.IsExpedited = false;//是否加急

                                XMOrderInfoProduct.ISArrivedLibrary = false;
                                //XMOrderInfoProduct.ShippingType = ShippingType;

                                //XMOrderInfoProduct.IsHadPlanBill = false;
                                //XMOrderInfoProduct.IsReDelivery = false;
                                //XMOrderInfoProduct.IsChangeGoods = false;
                                //XMOrderInfoProduct.IsReturnGoods = false;
                                //XMOrderInfoProduct.IsContinue = false;

                                if (scProductName == "")
                                {
                                    scProductName = XMOrderInfoProduct.ProductName;
                                    //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                }

                                if (HozestERPContext.Current.User != null)
                                {
                                    XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                    XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                }
                                else
                                {
                                    string UserName = "admin";
                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                    if (customer.Count > 0)
                                    {
                                        XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                        XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                    }
                                }

                                XMOrderInfoProduct.CreateDate = DateTime.Now;
                                XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                            }
                        }
                        else
                        {
                            var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                            XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                            XMOrderInfoProduct.Specifications = "";//尺寸
                            XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                            XMOrderInfoProduct.ProductName = "无产品";

                            xmorderInfo.IsAbnormal = true;//是否异常

                            XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                            if (PayTime != null && PayTime != "")
                            {
                                XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//截止发货时间

                            }
                            //XMOrderInfoProduct.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);// Convert.ToDecimal(Payment) / Convert.ToInt32(num);//销售价
                            //XMOrderInfoProduct.SalesPrice = decimal.Parse(price);//销售价
                            XMOrderInfoProduct.SalesPrice = decimal.Parse(price) * num;//销售价--xiugai
                            XMOrderInfoProduct.IsEnable = false;//是否删除
                            XMOrderInfoProduct.IsAudit = false;//是否审核
                            XMOrderInfoProduct.IsExpedited = false;//是否加急

                            XMOrderInfoProduct.ISArrivedLibrary = false;
                            //XMOrderInfoProduct.ShippingType = ShippingType;

                            //XMOrderInfoProduct.IsHadPlanBill = false;
                            //XMOrderInfoProduct.IsReDelivery = false;
                            //XMOrderInfoProduct.IsChangeGoods = false;
                            //XMOrderInfoProduct.IsReturnGoods = false;
                            //XMOrderInfoProduct.IsContinue = false;

                            if (scProductName == "")
                            {
                                scProductName = XMOrderInfoProduct.ProductName;
                                //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                            }

                            if (HozestERPContext.Current.User != null)
                            {
                                XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                            }
                            else
                            {
                                string UserName = "admin";
                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                if (customer.Count > 0)
                                {
                                    XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                    XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                }
                            }

                            XMOrderInfoProduct.CreateDate = DateTime.Now;
                            XMOrderInfoProduct.UpdateDate = DateTime.Now;

                            xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                        }
                    }

                }
                //判断是否刷单
                orderstatus = "WAIT_SELLER_SEND_GOODS,SELLER_CONSIGNED_PART,WAIT_BUYER_CONFIRM_GOODS,TRADE_BUYER_SIGNED,TRADE_FINISHED,TRADE_CLOSED";
                if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                {
                    xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), Tid, buyermessage, CustomerServiceRemark, buyerNick, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                }

                #region  保存数据

                IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
                InsertCount++;

                //新建发票
                if (xmorderInfo.IsInvoiced != null && xmorderInfo.IsInvoiced == true)
                {
                    ToAddXMInvoiceInfo(xmorderInfo,719,"","","","","");
                }

                #endregion
            }
            #endregion

            #region 修改
            else
            {
                #region 订单主表信息
                if (PayTime != null && PayTime != "")
                {
                    if (xmorderInfo.PayDate == null)
                    {
                        xmorderInfo.PayDate = Convert.ToDateTime(PayTime);//付款时间 OK
                    }

                    if (ConsignTime != "" && ConsignTime != null && ConsignTime != "0001-01-01 00:00:00")// "WAIT_BUYER_CONFIRM_GOODS")//等待买家确认收货,即:卖家已发货
                    {
                        if (xmorderInfo.DeliveryTime == null)
                        {
                            xmorderInfo.DeliveryTime = Convert.ToDateTime(ConsignTime);//发货时间
                        }
                    }
                    if (trade.Status == "TRADE_FINISHED")//交易成功
                    {
                        if (Modified != null && Modified != "")
                        {
                            if (xmorderInfo.CompletionTime == null)
                            {
                                xmorderInfo.CompletionTime = DateTime.Parse(Modified.ToString().Trim());//完成时间
                                //查询发票管理 有未排单 为开票的发票记录自动排单
                                AutoSingleRow(Tid);
                            }
                            //--新增 如果发货时间为空则发货时间为完成时间
                            if (xmorderInfo.DeliveryTime == null)
                            {
                                xmorderInfo.DeliveryTime = Convert.ToDateTime(Modified.ToString().Trim());//发货时间
                            }
                        }
                    }

                    //if (trade.Status == "WAIT_BUYER_CONFIRM_GOODS")
                    //{
                    //    xmorderInfo.DeliveryTime = Convert.ToDateTime(PayTime);// DateTime.Parse(PayTime.ToString().Trim()).AddDays(+15);//发货时间
                    //}
                    //xmorderinfoproduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//发货时间
                }

                if (Modified != null && Modified != "")
                {
                    xmorderInfo.OrderInfoModified = DateTime.Parse(Modified);
                }
                xmorderInfo.OrderInfoCreateDate = Convert.ToDateTime(created);//创单时间
                xmorderInfo.OrderStatus = trade.Status;//状态 OK
                xmorderInfo.IsOurOrder = true;//是我们的订单

                //xmorderInfo.FullName = receiverName;//姓名
                //xmorderInfo.DeliveryAddress = Address;//收货地址
                //xmorderInfo.Mobile = Mobile;//手机
                xmorderInfo.DistributeMethod = trade.ShippingType;//配送方式
                xmorderInfo.DistributePrice = Decimal.Parse(trade.PostFee == null ? "0" : trade.PointFee.ToString());//配送费用（天猫）
                xmorderInfo.ProductPrice = decimal.Parse(trade.TotalFee);//商品总金额
                decimal ordertotal = 0;//订单总金额  (商品总额+邮费+运费险+交易佣金)
                ordertotal = decimal.Parse(trade.TotalFee) + Decimal.Parse(trade.PostFee);
                if (xmorderInfo.IsDistributed == true)
                {
                    ordertotal += Decimal.Parse(trade.YfxFee);
                }
                if (trade.CommissionFee != null)
                    ordertotal += decimal.Parse(trade.CommissionFee);
                xmorderInfo.OrderPrice = ordertotal;//订单金额

                #region 赠品、返现 (修改)  ---修改只有订单完成才可以修改赠品发现状态
                //if (trade.Status.ToString().Trim() == "TRADE_FINISHED")
                //{
                if (xmorderInfo.CustomerServiceRemark.Trim() != CustomerServiceRemark.Trim())
                {
                    string CustomerServiceRemarkOld = xmorderInfo.CustomerServiceRemark.Trim();
                    string CustomerServiceRemarkNew = CustomerServiceRemark.Trim();

                    if (CustomerServiceRemarkNew.IndexOf("/赠品") > -1 || CustomerServiceRemarkNew.IndexOf("/退差价") > -1)
                    {
                        string BuyerName = receiverName;//收货人名称
                        string WantNo = buyerNick;//旺旺号
                        string OrderCode = Tid;//订单号 
                        string paramMessage = string.Empty;

                        if ((CustomerServiceRemark.IndexOf("/支付宝") > -1 || CustomerServiceRemark.IndexOf("/卡号") > -1))
                        {
                            //返回返现条数
                            int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);
                        }
                        else
                        {
                            //返回返现条数
                            int CashBackApplicationInstCount = TMCashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);
                        }

                        IoC.Resolve<IXMOrderInfoAPIService>().XMPremiumsAndCashBackApplication(CustomerServiceRemarkOld, CustomerServiceRemarkNew, xmorderInfo.OrderCode, xmorderInfo.WantID, xmorderInfo.FullName, (int)xmorderInfo.PlatformTypeId, (int)xmorderInfo.NickID);
                    }
                }
                //}
                #endregion

                //更改收货地址
                //if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
                //{
                //    string csr = CustomerServiceRemark + "$";
                //    string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                //    string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");
                //    xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                //}

                string Memo = CustomerServiceRemark; //Remarks + CustomerServiceRemark;//SellerMemo.Substring(SellerMemo.LastIndexOf("'") + 1).ToLower();
                string RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;
                string StatusValue = xmorderInfo.OrderStatus.Trim();
                decimal FactoryPrice = 0;

                if (Memo != RemarksValue || StatusValue != trade.Status.Trim() || Convert.ToDateTime(PayTime) != xmorderInfo.PayDate)
                {
                    #region 记录操作

                    int UpsatorID = 0;
                    if (HozestERPContext.Current.User != null)
                    {
                        UpsatorID = HozestERPContext.Current.User.CustomerID;
                    }
                    else
                    {
                        string UserName = "admin";
                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                        if (customer.Count > 0)
                        {
                            UpsatorID = customer[0].CustomerID;
                        }
                    }

                    if (PayTime != null && PayTime != "")
                    {
                        if (xmorderInfo.PayDate != Convert.ToDateTime(PayTime))
                        {
                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                            record.OrderInfoId = xmorderInfo.ID;
                            record.PropertyName = "PayDate";
                            record.OldValue = System.Convert.ToString(xmorderInfo.PayDate);
                            record.NewValue = PayTime;
                            record.UpdatorID = UpsatorID;
                            record.UpdateTime = DateTime.Now;
                            IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                        }
                    }

                    if (Modified != null && Modified != "")
                    {
                        if (xmorderInfo.OrderInfoModified != Convert.ToDateTime(Modified))
                        {
                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                            record.OrderInfoId = xmorderInfo.ID;
                            record.PropertyName = "OrderInfoModified";
                            record.OldValue = System.Convert.ToString(xmorderInfo.OrderInfoModified);
                            record.NewValue = Modified.ToString().Trim();
                            record.UpdatorID = UpsatorID;
                            record.UpdateTime = DateTime.Now;
                            IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record);//base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                        }
                    }

                    if (buyermessage != null && buyermessage != "")
                    {
                        if (xmorderInfo.Remark != buyermessage)
                        {
                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                            record.OrderInfoId = xmorderInfo.ID;
                            record.PropertyName = "Remarks";
                            record.OldValue = xmorderInfo.Remark;
                            record.NewValue = buyermessage;
                            record.UpdatorID = UpsatorID;
                            record.UpdateTime = DateTime.Now;
                            IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                        }
                    }
                    if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                    {
                        if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
                        {
                            var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, CustomerServiceRemark);
                            if (RecordExist == null || RecordExist.Count == 0)
                            {
                                XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                record.OrderInfoId = xmorderInfo.ID;
                                record.PropertyName = "CustomerServiceRemark";
                                record.OldValue = xmorderInfo.CustomerServiceRemark;
                                record.NewValue = CustomerServiceRemark;
                                record.UpdatorID = UpsatorID;
                                record.UpdateTime = DateTime.Now;
                                IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                            }
                        }
                    }
                    if (xmorderInfo.OrderStatus != trade.Status)
                    {
                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                        record.OrderInfoId = xmorderInfo.ID;
                        record.PropertyName = "OrderStatus";
                        record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                        record.NewValue = System.Convert.ToString(trade.Status);
                        record.UpdatorID = UpsatorID;

                        if (Modified != null && Modified != "")
                        {
                            record.UpdateTime = DateTime.Parse(Modified);
                        }
                        else
                        {
                            record.UpdateTime = DateTime.Now;
                        }
                        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                    }

                    #endregion
                }

                //if (receiverCity != null)
                //{
                //    xmorderInfo.City = receiverCity.ToString().Trim();
                //}
                //if (receiverDistrict != null)
                //{
                //    xmorderInfo.County = receiverDistrict.ToString().Trim();
                //}
                //if (receiverState != null)
                //{
                //    xmorderInfo.Province = receiverState.ToString().Trim();
                //}
                xmorderInfo.IsInvoiced = IsInvoices.Value;
                //xmorderInfo.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);//销售价
                xmorderInfo.PayPrice = Decimal.Parse(Payment);//支付金额
                if (trade.StepTradeStatus != "FRONT_NOPAID_FINAL_NOPAID")//预付款退款时让订单保留已付款金额
                {
                    xmorderInfo.PayPrice = Decimal.Parse(Payment);//支付金额
                }
                xmorderInfo.ReceivablePrice = Decimal.Parse(receivedPayment);//支付宝到帐金额
                scSalePrice = Decimal.Parse(trade.Payment);
                xmorderInfo.Remark = buyermessage;//备注 OK
                xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;// 修改
                //xmorderInfo.ShippingType = ShippingType;

                // WAIT_SELLER_SEND_GOODS 等待卖家发货TM
                // TRADE_NO_CREATE_PAY 没有创建支付宝交易TM
                // WAIT_BUYER_PAY 等待买家付款TM 
                //if (trade.Status == "WAIT_SELLER_SEND_GOODS" ||
                //    trade.Status == "TRADE_NO_CREATE_PAY" ||
                //    trade.Status == "WAIT_BUYER_PAY")
                //{
                //    xmorderInfo.IsHadPlanBill = false;
                //}
                //else
                //{
                //    xmorderInfo.IsHadPlanBill = true;
                //}
                if (HozestERPContext.Current.User != null)
                {
                    xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                }
                else
                {
                    string UserName = "admin";
                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                    if (customer.Count > 0)
                    {
                        xmorderInfo.UpdateID = customer[0].CustomerID;
                    }
                }
                xmorderInfo.UpdateDate = DateTime.Now;
                #endregion

                string scProductName = "";//商品名称（刷单）
                //decimal scSalePrice = 0;//销售价(刷单)

                #region 注释的原订单详细信息
                //for (int k = 0; k < order.Count; k++)
                //{
                //    //OuterSkuId = "142424242423";
                //    OuterSkuId = order[k].OuterSkuId;//商品编码
                //    num = order[k].Num;//数量
                //    title = order[k].Title; //标题
                //    InvoiceNo = order[k].InvoiceNo;//包裹的运单号
                //    LogisticsCompanys = order[k].LogisticsCompany;//发货的快递公司名称
                //    price = order[k].Price;//商品价格
                //    if (OuterSkuId != "" && OuterSkuId != null)
                //    {
                //        //商家编码查询商品从表信息。
                //        var ProductList = IoC.Resolve<IXMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);
                //        //var OrderyReportProduct = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).SingleOrDefault();
                //        //2015-7-28新增
                //        decimal a = 0;
                //        decimal? tj = 0;
                //        if (ProductList.Count == 0)
                //        {
                //            ProductList = GetXMProductListByzuheCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                //            a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                //        }
                //        //if (OrderyReportProduct == null)
                //        //{
                //        //    OrderyReportProduct = new XMOrderInfoProductDetails();
                //        //}

                //        //var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                //        //XMOrderInfoProductDetails OrderyReportProduct = null;

                //        //if (OrderyReportProductList.Count == 0)
                //        //{
                //        //    OrderyReportProduct = new XMOrderInfoProductDetails();
                //        //}
                //        //else
                //        //{

                //        //    OrderyReportProduct = OrderyReportProductList[0];
                //        //}
                //        if (ProductList.Count > 0)
                //        {
                //            for (int i = 0; i < ProductList.Count; i++)
                //            {
                //                var OrderyReportProduct = new XMOrderInfoProductDetails();
                //                //商品关联主表信息
                //                //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[i].ProductId.ToString()));
                //                if (ProductList[i].TDateTimeStart != null && ProductList[i].TDateTimeEnd != null && PayTime != null && PayTime != "" && PayTime != "0001-01-01 00:00:00")
                //                {
                //                    if (Convert.ToDateTime(PayTime) >= ProductList[i].TDateTimeStart && Convert.ToDateTime(PayTime) <= ProductList[i].TDateTimeEnd)
                //                    {
                //                        //OrderyReportProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                //                        OrderyReportProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                //                        OrderyReportProduct.Specifications = ProductList[i].Specifications;//尺寸
                //                        OrderyReportProduct.FactoryPrice = ProductList[i].TCostprice * Convert.ToInt32(num * ProductList[i].count);//出厂价
                //                        OrderyReportProduct.ProductName = ProductList[i].ProductName;//产品名称 
                //                        FactoryPrice = ProductList[i].TCostprice.Value * Convert.ToInt32(num * ProductList[i].count);//出厂价
                //                    }
                //                    else
                //                    {
                //                        OrderyReportProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                //                        OrderyReportProduct.Specifications = ProductList[i].Specifications;//尺寸
                //                        OrderyReportProduct.FactoryPrice = ProductList[i].Costprice * num * ProductList[i].count;//出厂价*数量
                //                        OrderyReportProduct.ProductName = ProductList[i].ProductName;//产品名称 
                //                        FactoryPrice = ProductList[i].Costprice.Value * num * decimal.Parse(ProductList[i].count.ToString());//出厂价*数量
                //                    }
                //                }
                //                else
                //                {
                //                    OrderyReportProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                //                    OrderyReportProduct.Specifications = ProductList[i].Specifications;//尺寸
                //                    OrderyReportProduct.FactoryPrice = ProductList[i].Costprice * num * ProductList[i].count;//出厂价*数量
                //                    OrderyReportProduct.ProductName = ProductList[i].ProductName;//产品名称 
                //                    FactoryPrice = ProductList[i].Costprice.Value * num * decimal.Parse(ProductList[i].count.ToString());//出厂价*数量
                //                }
                //                if (scProductName == "")
                //                {
                //                    scProductName = OrderyReportProduct.ProductName;
                //                    //scSalePrice = decimal.Parse(OrderyReportProduct.SalesPrice == null ? "0" : OrderyReportProduct.SalesPrice.ToString());
                //                }

                //                if (Memo != RemarksValue || StatusValue != trade.Status.Trim() || Convert.ToDateTime(PayTime) != xmorderInfo.PayDate
                //                    || OrderyReportProduct.FactoryPrice.ToString() != FactoryPrice.ToString())
                //                {
                //                    //OrderyReportProduct.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);// Convert.ToDecimal(Payment) / Convert.ToInt32(num);//销售价
                //                    if (i < ProductList.Count - 1)
                //                    {
                //                        OrderyReportProduct.SalesPrice = Math.Round(decimal.Parse(((ProductList[i].Costprice * ProductList[i].count * num / a) * decimal.Parse(price)).ToString()), 2);//销售价
                //                        tj = tj + OrderyReportProduct.SalesPrice;
                //                    }
                //                    else
                //                    {
                //                        OrderyReportProduct.SalesPrice = decimal.Parse(price) - tj;//销售价
                //                    }
                //                    OrderyReportProduct.ProductNum = Convert.ToInt32(num * ProductList[i].count);//数量
                //                    OrderyReportProduct.IsEnable = false;
                //                    if (PayTime != null && PayTime != "")
                //                    {
                //                        OrderyReportProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//发货时间
                //                    }
                //                    if (HozestERPContext.Current.User != null)
                //                    {
                //                        OrderyReportProduct.UpdateID = HozestERPContext.Current.User.CustomerID;
                //                    }
                //                    else
                //                    {
                //                        string UserName = "admin";
                //                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                //                        if (customer.Count > 0)
                //                        {
                //                            OrderyReportProduct.UpdateID = customer[0].CustomerID;
                //                        }
                //                    }

                //                    OrderyReportProduct.UpdateDate = DateTime.Now;
                //                    //xmorderInfo.XM_OrderInfoProductDetails.Add(OrderyReportProduct);
                //                }
                //            }
                //        }
                //        else
                //        {
                //            var OrderyReportProduct = new XMOrderInfoProductDetails();
                //            OrderyReportProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                //            OrderyReportProduct.Specifications = "";//尺寸
                //            OrderyReportProduct.FactoryPrice = 0;//出厂价
                //            OrderyReportProduct.ProductName = "无产品";
                //            if (scProductName == "")
                //            {
                //                scProductName = OrderyReportProduct.ProductName;
                //                //scSalePrice = decimal.Parse(OrderyReportProduct.SalesPrice == null ? "0" : OrderyReportProduct.SalesPrice.ToString());
                //            }

                //            if (Memo != RemarksValue || StatusValue != trade.Status.Trim() || Convert.ToDateTime(PayTime) != xmorderInfo.PayDate
                //                || OrderyReportProduct.FactoryPrice.ToString() != FactoryPrice.ToString())
                //            {
                //                //OrderyReportProduct.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);// Convert.ToDecimal(Payment) / Convert.ToInt32(num);//销售价
                //                OrderyReportProduct.SalesPrice = decimal.Parse(price) * num;//销售价
                //                if (PayTime != null && PayTime != "")
                //                {
                //                    OrderyReportProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//发货时间
                //                }

                //                if (HozestERPContext.Current.User != null)
                //                {
                //                    OrderyReportProduct.UpdateID = HozestERPContext.Current.User.CustomerID;
                //                }
                //                else
                //                {
                //                    string UserName = "admin";
                //                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                //                    if (customer.Count > 0)
                //                    {
                //                        OrderyReportProduct.UpdateID = customer[0].CustomerID;
                //                    }
                //                }

                //                OrderyReportProduct.UpdateDate = DateTime.Now;
                //                //xmorderInfo.XM_OrderInfoProductDetails.Add(OrderyReportProduct);
                //            }
                //        }
                //    }
                //}
                #endregion

                //判断是否刷单
                orderstatus = "WAIT_SELLER_SEND_GOODS,SELLER_CONSIGNED_PART,WAIT_BUYER_CONFIRM_GOODS,TRADE_BUYER_SIGNED,TRADE_FINISHED,TRADE_CLOSED";
                if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                {
                    xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), Tid, buyermessage, CustomerServiceRemark, buyerNick, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                }

                #region 保存数据

                IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
                UpdateCount++;

                #endregion
            }

            #endregion

            //}
        }

        /// <summary>
        /// 根据订单号，抓取数据 唯品会
        /// </summary>
        public void getOrderVPH(string startdate, string enddate, string ordercode, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoAppVPH)
        {
            try
            {
                bool iscontinue = false;//判断儿童床垫是否添加订单

                #region 订单信息
                //----------订单信息--------------
                int? newnickid = xMorderInfoAppVPH.NickId;

                #region 【订单信息】初始化参数信息

                JSONConvert.appKey = xMorderInfoAppVPH.AppKey;
                JSONConvert.appSecret = xMorderInfoAppVPH.AppSecret;
                JSONConvert.service = "vipapis.delivery.DvdDeliveryService";
                JSONConvert.method = "getOrderList";
                JSONConvert.version = "1.0.0";
                JSONConvert.timestamp = JSONConvert.ConvertDateTimeInt(DateTime.Now).ToString();

                //post应用级参数
                String UseInter = "{\"st_add_time\":" + "\"" + startdate + "\",\"et_add_time\":\""
                    + enddate + "\",\"order_id\":\"" + ordercode
                    + "\",\"vendor_id\":\"" + JSONConvert.vendorid + "\"}";

                #endregion

                //订单json字符串
                string jsonstr = JSONConvert.post(UseInter);

                if (jsonstr != null)
                {
                    //解析json操作
                    JObject jo = (JObject)JsonConvert.DeserializeObject(jsonstr);
                    if (jo["result"]["dvd_order_list"] != null && jo["result"]["dvd_order_list"].ToString() != "")  //判断是否返回错误代码
                    {
                        iscontinue = false;
                        string liststr = jo["result"]["dvd_order_list"].ToString(); //list组数据
                        if (liststr != "[]")
                        {
                            JArray ja = (JArray)JsonConvert.DeserializeObject(liststr);
                            //----------解析获取的订单信息--------------
                            string order_id = ja[0]["order_id"].ToString().Replace("\"", "");//订单编号
                            //string status = ja[0]["order_status"].ToString().Replace("\"", "");//订单状态编码
                            string buyer = ja[0]["buyer"].ToString().Replace("\"", "");//收货人
                            string address = ja[0]["address"].ToString().Replace("\"", "");//收货地址
                            string mobile = ja[0]["mobile"].ToString().Replace("\"", "");//手机号码
                            string tel = ja[0]["tel"].ToString().Replace("\"", "");//联系电话
                            string postcode = ja[0]["postcode"].ToString().Replace("\"", "");//邮政编码
                            string city = ja[0]["city"].ToString().Replace("\"", "");//城市
                            string province = ja[0]["province"].ToString().Replace("\"", "");//省份
                            string country_id = ja[0]["country_id"].ToString().Replace("\"", "");//国家代码
                            string invoice = ja[0]["invoice"].ToString().Replace("\"", "");//发票抬头
                            string carriage = ja[0]["carriage"].ToString().Replace("\"", "");//快递金额（计算 整张出库单商品金额总和+快递费用 == 订单金额）
                            string remark = ja[0]["remark"].ToString().Replace("\"", "");//备注
                            string transport_day = ja[0]["transport_day"].ToString().Replace("\"", "");//期望收货时间
                            string vendor_id = ja[0]["vendor_id"].ToString().Replace("\"", "");//供应商ID
                            string vendor_name = ja[0]["vendor_name"].ToString().Replace("\"", "");//供应商名称
                            string ex_fav_money = ja[0]["promo_discount_amount"].ToString().Replace("\"", "");//促销优惠金额
                            string favourable_money = ja[0]["discount_amount"].ToString().Replace("\"", "");//优惠金额
                            string product_money = ja[0]["product_money"].ToString().Replace("\"", "");//整张出库单商品金额总和(计算发票金额 == 整张出库单商品金额总和 + 快递费用 - 优惠金额 - 促销优惠金额)
                            string add_time = ja[0]["add_time"].ToString().Replace("\"", "");//订单下单时间
                            string po_id = ja[0]["po_no"].ToString().Replace("\"", "");//PO号
                            string county = ja[0]["country"].ToString().Replace("\"", "");//区/县

                            //----------订单状态信息--------------
                            //获取json操作
                            string status = "";//订单状态编码
                            #region 【订单商品信息】初始化参数信息

                            JSONConvert.service = "vipapis.delivery.DvdDeliveryService";
                            JSONConvert.method = "getOrderStatusById";
                            JSONConvert.version = "1.0.0";
                            JSONConvert.timestamp = JSONConvert.ConvertDateTimeInt(DateTime.Now).ToString();

                            //post应用级参数
                            UseInter = "{\"order_id\":" + "\"" + order_id + "\",\"vendor_id\":\"" + JSONConvert.vendorid + "\"}";
                            //订单商品信息
                            string jsonstr_status = JSONConvert.post(UseInter);

                            #endregion
                            //解析json操作
                            JObject jo_status = (JObject)JsonConvert.DeserializeObject(jsonstr_status);
                            if (jo_status["result"] != null && jo_status["result"].ToString() != "")  //判断是否返回错误代码
                            {
                                JArray ja_status = (JArray)JsonConvert.DeserializeObject(jo_status["result"].ToString());
                                status = ja_status[0]["order_status"] == null ? "" : ja_status[0]["order_status"].ToString().Replace("\"", "");
                            }

                            //----------订单商品信息--------------
                            //获取json操作

                            #region 【订单商品信息】初始化参数信息
                            JSONConvert.service = "vipapis.delivery.DvdDeliveryService";
                            JSONConvert.method = "getOrderDetail";
                            JSONConvert.version = "1.0.0";
                            JSONConvert.timestamp = JSONConvert.ConvertDateTimeInt(DateTime.Now).ToString();

                            //post应用级参数
                            UseInter = "{\"order_id\":" + "\"" + order_id + "\",\"vendor_id\":\"" + JSONConvert.vendorid + "\"}";
                            //订单商品信息
                            string jsonstr_goods = JSONConvert.post(UseInter);
                            #endregion

                            string scProductName = "";//商品名称（刷单）
                            decimal scSalePrice = 0;//销售价(刷单)

                            //解析json操作
                            JObject jo_goods = (JObject)JsonConvert.DeserializeObject(jsonstr_goods);
                            if (jo_goods["result"]["orderDetails"] != null && jo_goods["result"]["orderDetails"].ToString() != "")  //判断是否返回错误代码
                            {
                                //json解析商品
                                string liststr_goods = jo_goods["result"]["orderDetails"].ToString(); //list组数据
                                JArray ja_goods = (JArray)JsonConvert.DeserializeObject(liststr_goods);
                                //订单编号、商家编码查询订单
                                var xmorderInfo = IoC.Resolve<IXMOrderInfoAPIService>().GetXMOrderInfoByOrderCode(order_id);
                                //客服备注
                                string CustomerServiceRemark = "/收货时间:" + transport_day + "/发票抬头:" + invoice + "/发票金额" +
                                        (Convert.ToDecimal(product_money) + Convert.ToDecimal(carriage) - Convert.ToDecimal(favourable_money) - Convert.ToDecimal(ex_fav_money)).ToString();

                                #region 新增
                                if (xmorderInfo == null)
                                {
                                    bool IsAudit = false;//同步已发货及以后状态订单，自动审核
                                    //订单主表信息
                                    xmorderInfo = new XMOrderInfo();//初始化
                                    xmorderInfo.NickID = int.Parse(newnickid.ToString());//1;//1:城市爱情旗舰店    22:利豪利嘉旗舰店
                                    xmorderInfo.PlatformTypeId = 259;//259;//平台类型（唯品会）
                                    xmorderInfo.OrderInfoCreateDate = Convert.ToDateTime(add_time);//创单时间
                                    //if (transport_day != "")
                                    //{
                                    //    orderInfo.AppointDeliveryTime = Convert.ToDateTime(transport_day);//预约发货时间
                                    //}
                                    xmorderInfo.OrderCode = order_id;//订单号
                                    xmorderInfo.OrderStatus = status;//订单状态

                                    if (status == "STATUS_10")
                                    {
                                        if (xmorderInfo.PayDate == null)
                                        {
                                            xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                        }
                                    }
                                    if (status == "STATUS_22")
                                    {
                                        IsAudit = true;
                                        if (xmorderInfo.PayDate == null)
                                        {
                                            xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                        }
                                        if (xmorderInfo.DeliveryTime == null)
                                        {
                                            xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                        }

                                        //if (xmorderInfo.CompletionTime == null)
                                        //{
                                        //    xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                        //}
                                    }
                                    if (status == "STATUS_25")
                                    {
                                        IsAudit = true;
                                        if (xmorderInfo.PayDate == null)
                                        {
                                            xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                        }
                                        if (xmorderInfo.DeliveryTime == null)
                                        {
                                            xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                        }

                                        if (xmorderInfo.CompletionTime == null)
                                        {
                                            xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间
                                            AutoSingleRow(order_id);
                                        }
                                    }

                                    #region 赠品、返现  新增--已签收才生成赠品发现信息
                                    //status == "STATUS_1" || status == "STATUS_10" || status == "STATUS_11" || status == "STATUS_22"
                                    //if (status == "STATUS_25")//待审核订单（已支付/未处理）
                                    //{

                                    if (add_time.ToString().Trim() != null && add_time.ToString().Trim() != "")
                                    {
                                        if (DateTime.Parse(add_time.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                        {
                                            if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                            {
                                                string BuyerName = buyer;//收货人名称
                                                string WantNo = "";//buyerNick;//旺旺号
                                                string OrderCode = order_id;//订单号 
                                                string paramMessage = string.Empty;

                                                if (CustomerServiceRemark.IndexOf("/赠品") > -1 || CustomerServiceRemark.IndexOf("/退差价") > -1)
                                                {
                                                    #region 赠品
                                                    if (CustomerServiceRemark.IndexOf("/赠品") > -1)
                                                    {
                                                        //返回赠品条数
                                                        int PremiumsInst = XMPremiumsInst(CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, 259,int.Parse(newnickid.ToString()));

                                                    }
                                                    #endregion

                                                    #region 返现
                                                    if (CustomerServiceRemark.IndexOf("/退差价") > -1)
                                                    {
                                                        //返回返现条数
                                                        int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);


                                                    }

                                                    #endregion
                                                }
                                            }
                                        }
                                    }

                                    //}
                                    #endregion

                                    xmorderInfo.FullName = buyer;//收货人
                                    xmorderInfo.DeliveryAddress = address + "(" + postcode + ")";//收货地址
                                    xmorderInfo.City = city;
                                    xmorderInfo.Province = province;
                                    xmorderInfo.County = county;
                                    xmorderInfo.Mobile = mobile;//手机
                                    xmorderInfo.Tel = tel;//电话
                                    //orderInfo.WantID = buyerNick;//ID（买家帐号）
                                    xmorderInfo.SourceType = "同步";//数据来源类型
                                    xmorderInfo.FinancialAudit = true;//财务审核
                                    xmorderInfo.Remark = remark;//备注
                                    xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//客服备注（新增）
                                    if (invoice != "")
                                    {
                                        xmorderInfo.IsInvoiced = true;//是否发票
                                        xmorderInfo.InvoiceHead = invoice;//发票抬头
                                    }
                                    xmorderInfo.ProductPrice = Decimal.Parse(product_money == "" ? "0" : product_money);//商品总金额
                                    xmorderInfo.ProductPromotion = Decimal.Parse(ex_fav_money == "" ? "0" : ex_fav_money);//商品促销金额
                                    xmorderInfo.OrderPromotion = Decimal.Parse(favourable_money == "" ? "0" : favourable_money);//订单促销金额
                                    xmorderInfo.OrderPrice = Decimal.Parse(carriage == "" ? "0" : carriage) + xmorderInfo.ProductPrice;//订单金额
                                    xmorderInfo.PayPrice = (decimal)xmorderInfo.OrderPrice - Convert.ToDecimal(ex_fav_money) - Convert.ToDecimal(favourable_money);
                                    if (status == "STATUS_25")
                                    {
                                        xmorderInfo.ReceivablePrice = (decimal)xmorderInfo.OrderPrice - Convert.ToDecimal(favourable_money);//到账金额
                                    }
                                    else
                                    {
                                        xmorderInfo.ReceivablePrice = 0;//到账金额
                                    }

                                    xmorderInfo.IsEnable = false;//是否删除
                                    xmorderInfo.IsCashBack = false;//是否返现
                                    xmorderInfo.IsSentGifts = false;//是否已发赠品 
                                    xmorderInfo.IsEvaluate = false;//是否赔付
                                    xmorderInfo.IsOurOrder = false;
                                    xmorderInfo.IsAudit = IsAudit;//是否审核

                                    if (HozestERPContext.Current.User != null)
                                    {
                                        xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                                        xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                                    }
                                    else
                                    {
                                        string UserName = "admin";
                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                        if (customer.Count > 0)
                                        {
                                            xmorderInfo.CreateID = customer[0].CustomerID;
                                            xmorderInfo.UpdateID = customer[0].CustomerID;
                                        }
                                    }
                                    xmorderInfo.CreateDate = DateTime.Now;
                                    xmorderInfo.UpdateDate = DateTime.Now;

                                    xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();//初始化

                                    //decimal orderprice = 0;//订单金额
                                    decimal priceTotal = 0;//总商品金额
                                    for (int k = 0; k < ja_goods.Count; k++)
                                    {
                                        decimal PriceNum = decimal.Parse(ja_goods[k]["sell_price"].ToString().Replace("\"", "") == null ? "0" : (ja_goods[k]["sell_price"].ToString().Replace("\"", "") == "" ? "0" : ja_goods[k]["sell_price"].ToString().Replace("\"", ""))) * decimal.Parse(ja_goods[k]["amount"].ToString().Replace("\"", ""));
                                        priceTotal += PriceNum;
                                    }
                                    decimal payPriceK = 0;//已赋值付款金额

                                    //----------解析获取订单商品信息--------------
                                    for (int i = 0; i < ja_goods.Count; i++)
                                    {
                                        string brand_name = ja_goods[i]["brand_name"].ToString().Replace("\"", "");//品牌名称
                                        string product_name = ja_goods[i]["product_name"].ToString().Replace("\"", "");//商品名称
                                        string size = ja_goods[i]["size"].ToString().Replace("\"", "");//尺码
                                        //string product_no = ja_goods[i]["art_no"].ToString().Replace("\"", "");//货号（对应商品编码）
                                        string product_no = ja_goods[i]["barcode"].ToString().Replace("\"", "");//货号,对应的其实是传过来的条形码的值
                                        //string barcode = ja_goods[i]["barcode"].ToString().Replace("\"", "");//条形码
                                        string amount = ja_goods[i]["amount"].ToString().Replace("\"", "");//商品数量
                                        string price = ja_goods[i]["sell_price"].ToString().Replace("\"", "") == "" ? "0" : ja_goods[i]["sell_price"].ToString().Replace("\"", "");//单价
                                        //XMOrderInfoProductDetails XMOrderInfoProduct = new XMOrderInfoProductDetails();

                                        

                                        if (product_no != null && product_no != "")
                                        {
                                            //商家编码查询从表信息。
                                            var ProductList = IoC.Resolve<IXMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(product_no, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);
                                            
                                            if (ProductList.Count > 0) //是否查到对应商品
                                            {
                                                if (ProductList[0].BrandTypeId == 764) //迪士尼的品牌编号
                                                {
                                                    newnickid = 64;
                                                    xmorderInfo.NickID = newnickid;
                                                    xmorderInfo.IsOurOrder = true;
                                                }
                                            }

                                            if (newnickid == 32)
                                            {
                                                #region 排除呼噜噜的订单
                                                if (!product_no.StartsWith("CM"))
                                                {
                                                    if (xmorderInfo.ProductPrice != null && xmorderInfo.ProductPrice != 0)
                                                    {
                                                        xmorderInfo.PayPrice -= Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(price) * decimal.Parse(amount) / (decimal)xmorderInfo.ProductPrice, 2);
                                                    }
                                                    else if (xmorderInfo.OrderPrice != null && xmorderInfo.OrderPrice != 0)
                                                    {
                                                        xmorderInfo.PayPrice -= Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(price) * decimal.Parse(amount) / (decimal)xmorderInfo.OrderPrice, 2);
                                                    }
                                                    continue;
                                                }

                                                //2015-7-28 修改 
                                                var ddh = product_no.Substring(0, 2);
                                                //if (product_name.IndexOf("儿童") == -1 && product_name.IndexOf("青少年") == -1 && product_name.IndexOf("亲子") == -1 && product_name.IndexOf("青少年定制床垫") == -1 && product_name.IndexOf("独立弹簧乳胶可拆卸床垫") == -1)
                                                //2015-7-28 修改

                                                if (ddh == "CM")
                                                {
                                                    xmorderInfo.NickID = newnickid;
                                                    xmorderInfo.IsOurOrder = true;
                                                }
                                                #endregion
                                            }
                                            //2015-7-28新增
                                            decimal a = 0;
                                            //decimal? tj = 0;
                                            bool IsZuHe = false;
                                            if (ProductList.Count == 0)
                                            {
                                                ProductList = GetXMProductListByzuheCode(product_no, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                                a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                                if (ProductList.Count > 0)
                                                {
                                                    IsZuHe = true;
                                                }
                                            }
                                            //var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == product_no).ToList();//.SingleOrDefault();

                                            //XMOrderInfoProductDetails XMOrderInfoProduct = null;

                                            //if (OrderyReportProductList.Count == 0)
                                            //{
                                            //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                            //}
                                            //else
                                            //{

                                            //    XMOrderInfoProduct = OrderyReportProductList[0];
                                            //}
                                            if (ProductList.Count > 0)
                                            {
                                                decimal payPriceI = 0;//组合已赋值付款金额
                                                decimal ZuHeTotal = 0;
                                                for (int s = 0; s < ProductList.Count; s++)
                                                {
                                                    decimal ZuHeNum = (decimal)ProductList[s].Saleprice * decimal.Parse(ProductList[s].count.ToString());
                                                    ZuHeTotal += ZuHeNum;
                                                }
                                                for (int s = 0; s < ProductList.Count; s++)
                                                {
                                                    var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                    //商品关联主表信息
                                                    //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList.ProductId.ToString()));
                                                    if (ProductList[s].TDateTimeStart != null && ProductList[s].TDateTimeEnd != null && add_time != null && add_time != "" && add_time != "0001-01-01 00:00:00")
                                                    {
                                                        if (Convert.ToDateTime(add_time) >= ProductList[s].TDateTimeStart && Convert.ToDateTime(add_time) <= ProductList[s].TDateTimeEnd)
                                                        {
                                                            //XMOrderInfoProduct.PlatformMerchantCode = product_no;//货号
                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                            XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                            XMOrderInfoProduct.FactoryPrice = ProductList[s].TCostprice * Convert.ToInt32(amount) * ProductList[s].count;//出厂价
                                                            XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                            XMOrderInfoProduct.TCostprice = ProductList[s].TCostprice;
                                                            if (!string.IsNullOrEmpty(ProductList[s].TManufacturersCode))
                                                            {
                                                                XMOrderInfoProduct.TManufacturersCode = ProductList[s].TManufacturersCode;
                                                            }
                                                            else
                                                            {
                                                                XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //XMOrderInfoProduct.PlatformMerchantCode = product_no;//货号
                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                            XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                            XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * Convert.ToInt32(amount) * ProductList[s].count;//出厂价*数量
                                                            XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                            XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                            XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //XMOrderInfoProduct.PlatformMerchantCode = product_no;//货号
                                                        XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                        XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                        XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * Convert.ToInt32(amount) * ProductList[s].count;//出厂价*数量
                                                        XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                        XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                        XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                    }
                                                    XMOrderInfoProduct.ProductNum = Convert.ToInt32(amount) * ProductList[s].count;//数量

                                                    //XMOrderInfoProduct.SalesPrice = decimal.Parse(price);//销售价
                                                    //if (s < ProductList.Count - 1)
                                                    //{
                                                    //    XMOrderInfoProduct.SalesPrice = Math.Round(decimal.Parse(((ProductList[s].Costprice * ProductList[s].count * Convert.ToInt32(amount) / a) * decimal.Parse(price)).ToString()), 2);//销售价
                                                    //    tj = tj + XMOrderInfoProduct.SalesPrice;
                                                    //}
                                                    //else
                                                    //{
                                                    //    XMOrderInfoProduct.SalesPrice = decimal.Parse(price) - tj;//销售价
                                                    //}

                                                    decimal PartPayPrice = 0;
                                                    if (i == ja_goods.Count - 1)
                                                    {
                                                        PartPayPrice = (decimal)xmorderInfo.PayPrice - payPriceK;
                                                    }
                                                    else
                                                    {
                                                        PartPayPrice = Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(price) * decimal.Parse(amount) / priceTotal, 2);
                                                        //payPriceK += PartPayPrice;
                                                    }
                                                    if (IsZuHe)
                                                    {
                                                        if (s == ProductList.Count - 1)
                                                        {
                                                            XMOrderInfoProduct.SalesPrice = PartPayPrice - payPriceI;
                                                            payPriceK += PartPayPrice;
                                                        }
                                                        else
                                                        {
                                                            if (ZuHeTotal == 0) //产品销售价没有维护，是0时导致分母为0，计算出错
                                                            {
                                                                XMOrderInfoProduct.SalesPrice = 0;
                                                            }
                                                            else
                                                            {
                                                                XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice * (decimal)ProductList[s].Saleprice * decimal.Parse(ProductList[s].count.ToString()) / ZuHeTotal, 2);//销售价
                                                            }
                                                            payPriceI += (decimal)XMOrderInfoProduct.SalesPrice;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice, 2);//销售价
                                                        payPriceK += PartPayPrice;
                                                    }

                                                    //orderprice += decimal.Parse(price) * Convert.ToInt32(amount);

                                                    //if (i > 0)
                                                    //{
                                                    //    XMOrderInfoProduct.SalesPrice = 0;//销售价
                                                    //}
                                                    //else
                                                    //{
                                                    //    XMOrderInfoProduct.SalesPrice = Convert.ToDecimal(product_money) + Convert.ToDecimal(carriage);//销售价
                                                    //}

                                                    XMOrderInfoProduct.IsEnable = false;//是否删除
                                                    XMOrderInfoProduct.IsAudit = IsAudit;//是否审核
                                                    XMOrderInfoProduct.IsExpedited = false;//是否加急
                                                    XMOrderInfoProduct.ISArrivedLibrary = false;//是否抵库

                                                    if (scProductName == "")
                                                    {
                                                        scProductName = XMOrderInfoProduct.ProductName;
                                                        //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                    }

                                                    if (HozestERPContext.Current.User != null)
                                                    {
                                                        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;
                                                    }
                                                    else
                                                    {
                                                        string UserName = "admin";
                                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                        if (customer.Count > 0)
                                                        {
                                                            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                        }
                                                    }

                                                    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                    XMOrderInfoProduct.UpdateDate = DateTime.Now;
                                                    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                                }
                                            }
                                            else
                                            {
                                                var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                XMOrderInfoProduct.PlatformMerchantCode = product_no; //料号（商品编码）
                                                XMOrderInfoProduct.Specifications = "";//尺寸
                                                XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                                XMOrderInfoProduct.ProductName = "无产品";

                                                xmorderInfo.IsAbnormal = true;//是否异常

                                                XMOrderInfoProduct.ProductNum = Convert.ToInt32(amount);//数量

                                                XMOrderInfoProduct.SalesPrice = decimal.Parse(price) * Convert.ToInt32(amount);//销售价

                                                //orderprice += decimal.Parse(price) * Convert.ToInt32(amount);

                                                //if (i > 0)
                                                //{
                                                //    XMOrderInfoProduct.SalesPrice = 0;//销售价
                                                //}
                                                //else
                                                //{
                                                //    XMOrderInfoProduct.SalesPrice = Convert.ToDecimal(product_money) + Convert.ToDecimal(carriage);//销售价
                                                //}

                                                XMOrderInfoProduct.IsEnable = false;//是否删除
                                                XMOrderInfoProduct.IsAudit = IsAudit;//是否审核
                                                XMOrderInfoProduct.IsExpedited = false;//是否加急
                                                XMOrderInfoProduct.ISArrivedLibrary = false;//是否抵库

                                                if (scProductName == "")
                                                {
                                                    scProductName = XMOrderInfoProduct.ProductName;
                                                    //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                }

                                                if (HozestERPContext.Current.User != null)
                                                {
                                                    XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                    XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                }
                                                else
                                                {
                                                    string UserName = "admin";
                                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                    if (customer.Count > 0)
                                                    {
                                                        XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                        XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                    }
                                                }

                                                XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                XMOrderInfoProduct.UpdateDate = DateTime.Now;
                                                xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                            }

                                            if (iscontinue)
                                            {
                                                continue;
                                            }
                                            else
                                            {
                                                iscontinue = true;
                                            }
                                        }
                                        //else
                                        //{
                                        //    //没有商品编码
                                        //    XMOrderInfoProduct.PlatformMerchantCode = ""; //料号（商品编码）
                                        //    XMOrderInfoProduct.Specifications = "";//尺寸
                                        //    XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                        //    XMOrderInfoProduct.ProductName = "无产品";
                                        //    XMOrderInfoProduct.ProductNum = Convert.ToInt32(amount);//数量

                                        //    XMOrderInfoProduct.SalesPrice = decimal.Parse(price);//销售价


                                        //    orderprice += decimal.Parse(price) * Convert.ToInt32(amount);
                                        //    //if (i > 0)
                                        //    //{
                                        //    //    XMOrderInfoProduct.SalesPrice = 0;//销售价
                                        //    //}
                                        //    //else
                                        //    //{
                                        //    //    XMOrderInfoProduct.SalesPrice = Convert.ToDecimal(product_money) + Convert.ToDecimal(carriage);//销售价
                                        //    //}

                                        //    XMOrderInfoProduct.IsEnable = false;//是否删除
                                        //    XMOrderInfoProduct.IsAudit = false;//是否审核
                                        //    XMOrderInfoProduct.IsExpedited = false;//是否加急
                                        //    XMOrderInfoProduct.ISArrivedLibrary = false;//是否抵库

                                        //    if (HozestERPContext.Current.User != null)
                                        //    {
                                        //        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                        //        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                        //    }
                                        //    else
                                        //    {
                                        //        string UserName = "admin";
                                        //        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                        //        if (customer.Count > 0)
                                        //        {
                                        //            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                        //            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                        //        }
                                        //    }

                                        //    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                        //    XMOrderInfoProduct.UpdateDate = DateTime.Now;
                                        //    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);

                                        //    xmorderInfo.IsAbnormal = true;//是否异常

                                        //    if (iscontinue)
                                        //    {
                                        //        continue;
                                        //    }
                                        //    else
                                        //    {
                                        //        iscontinue = true;
                                        //    }
                                        //}
                                        //}
                                    }
                                    //xmorderInfo.PayPrice = orderprice;
                                    scSalePrice = (decimal)xmorderInfo.PayPrice;

                                    //判断是否刷单
                                    if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00"))
                                    {
                                        xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), order_id, xmorderInfo.Remark, CustomerServiceRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                                    }

                                    #region  保存数据

                                    if (iscontinue && xmorderInfo.XM_OrderInfoProductDetails != null && xmorderInfo.XM_OrderInfoProductDetails.Count > 0)
                                    {
                                        IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
                                        InsertCount++;

                                        //新建发票
                                        if (xmorderInfo.IsInvoiced != null && xmorderInfo.IsInvoiced == true)
                                        {
                                            ToAddXMInvoiceInfo(xmorderInfo,719,"","","","","");
                                        }
                                    }

                                    #endregion

                                }
                                #endregion

                                #region 修改
                                else
                                {
                                    string Memo = remark + CustomerServiceRemark;//SellerMemo.Substring(SellerMemo.LastIndexOf("'") + 1).ToLower();
                                    string RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;
                                    string StatusValue = xmorderInfo.OrderStatus.Trim();

                                    xmorderInfo.OrderStatus = status;//订单状态

                                    if (status == "STATUS_10")
                                    {
                                        if (xmorderInfo.PayDate == null)
                                        {
                                            xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                        }
                                    }
                                    if (status == "STATUS_22")
                                    {
                                        if (xmorderInfo.PayDate == null)
                                        {
                                            xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                        }
                                        if (xmorderInfo.DeliveryTime == null)
                                        {
                                            xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                        }
                                        //if (xmorderInfo.CompletionTime == null)
                                        //{
                                        //    xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                        //}
                                    }
                                    if (status == "STATUS_25")
                                    {
                                        if (xmorderInfo.PayDate == null)
                                        {
                                            xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                        }
                                        if (xmorderInfo.DeliveryTime == null)
                                        {
                                            xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                        }
                                        if (xmorderInfo.CompletionTime == null)
                                        {
                                            xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                            AutoSingleRow(order_id);
                                        }
                                    }

                                    #region 赠品、返现 (修改)

                                    //if (status == "STATUS_25")//签收后才能修改赠品返现状态
                                    //{
                                    if (xmorderInfo.CustomerServiceRemark.Trim() != CustomerServiceRemark.Trim())
                                    {
                                        string CustomerServiceRemarkOld = xmorderInfo.CustomerServiceRemark.Trim();
                                        string CustomerServiceRemarkNew = CustomerServiceRemark.Trim();

                                        if (CustomerServiceRemarkNew.IndexOf("/赠品") > -1 || CustomerServiceRemarkNew.IndexOf("/退差价") > -1)
                                        {
                                            IoC.Resolve<IXMOrderInfoAPIService>().XMPremiumsAndCashBackApplication(CustomerServiceRemarkOld, CustomerServiceRemarkNew, xmorderInfo.OrderCode, xmorderInfo.WantID, xmorderInfo.FullName, (int)xmorderInfo.PlatformTypeId, (int)xmorderInfo.NickID);
                                        }
                                    }
                                    //}
                                    #endregion

                                    //xmorderInfo.FullName = buyer;//收货人
                                    //xmorderInfo.DeliveryAddress = address + "(" + postcode + ")";//收货地址
                                    //xmorderInfo.City = city;
                                    //xmorderInfo.Province = province;
                                    //xmorderInfo.Mobile = mobile;//手机
                                    //xmorderInfo.Tel = tel;//电话
                                    //orderInfo.WantID = buyerNick;//ID（买家帐号）
                                    xmorderInfo.SourceType = "同步";//数据来源类型
                                    xmorderInfo.FinancialAudit = true;//财务审核
                                    //更改收货地址
                                    //if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
                                    //{
                                    //    string csr = CustomerServiceRemark + "$";
                                    //    string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                                    //    string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");

                                    //    xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                                    //}

                                    xmorderInfo.Remark = remark;//备注
                                    //xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//客服备注（新增）
                                    if (invoice != "")
                                    {
                                        xmorderInfo.IsInvoiced = true;//是否发票
                                        xmorderInfo.InvoiceHead = invoice;//发票抬头
                                    }
                                    xmorderInfo.ProductPrice = Decimal.Parse(product_money == "" ? "0" : product_money);//商品总金额
                                    xmorderInfo.ProductPromotion = Decimal.Parse(ex_fav_money == "" ? "0" : ex_fav_money);//商品促销金额
                                    xmorderInfo.OrderPromotion = Decimal.Parse(favourable_money == "" ? "0" : favourable_money);//订单促销金额
                                    xmorderInfo.OrderPrice = Decimal.Parse(carriage == "" ? "0" : carriage) + xmorderInfo.ProductPrice;//订单金额
                                    xmorderInfo.PayPrice = (decimal)xmorderInfo.OrderPrice - Convert.ToDecimal(ex_fav_money) - Convert.ToDecimal(favourable_money);
                                    if (status == "STATUS_25")
                                    {
                                        xmorderInfo.ReceivablePrice = (decimal)xmorderInfo.OrderPrice - Convert.ToDecimal(favourable_money);//到账金额
                                    }
                                    else
                                    {
                                        xmorderInfo.ReceivablePrice = 0;//到账金额
                                    }

                                    if (HozestERPContext.Current.User != null)
                                    {
                                        xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                                    }
                                    else
                                    {
                                        string UserName = "admin";
                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                        if (customer.Count > 0)
                                        {
                                            xmorderInfo.UpdateID = customer[0].CustomerID;
                                        }
                                    }
                                    xmorderInfo.UpdateDate = DateTime.Now;
                                    //xmorderInfo.IsOurOrder = false;
                                    if (xmorderInfo.IsOurOrder == null)
                                    {
                                        if (xmorderInfo.XM_OrderInfoProductDetails.Where(x => x.PlatformMerchantCode.StartsWith("CM")).ToList().Count > 0)
                                        {
                                            xmorderInfo.IsOurOrder = true;
                                        }
                                        else
                                        {
                                            xmorderInfo.IsOurOrder = false;
                                        }
                                    }

                                    #region 记录操作

                                    xmorderInfo.Remark = remark;//备注
                                    if (invoice != "")
                                    {
                                        xmorderInfo.IsInvoiced = true;//是否发票
                                        xmorderInfo.InvoiceHead = invoice;//发票抬头
                                    }
                                    //xmorderInfo.ProductPrice = Decimal.Parse(product_money == "" ? "0" : product_money);//商品总金额
                                    //xmorderInfo.ProductPromotion = Decimal.Parse(favourable_money == "" ? "0" : favourable_money);//促销金额
                                    //xmorderInfo.OrderPrice = Decimal.Parse(carriage == "" ? "0" : carriage) + xmorderInfo.ProductPrice;//订单金额
                                    //xmorderInfo.ReceivablePrice = xmorderInfo.OrderPrice - xmorderInfo.ProductPromotion;//应收金额


                                    int UpsatorID = 0;
                                    if (HozestERPContext.Current.User != null)
                                    {
                                        UpsatorID = HozestERPContext.Current.User.CustomerID;
                                    }
                                    else
                                    {
                                        string UserName = "admin";
                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                        if (customer.Count > 0)
                                        {
                                            UpsatorID = customer[0].CustomerID;
                                        }
                                    }
                                    if (remark != null && remark != "")
                                    {
                                        if (xmorderInfo.Remark != remark)
                                        {
                                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                            record.OrderInfoId = xmorderInfo.ID;
                                            record.PropertyName = "Remark";
                                            record.OldValue = xmorderInfo.Remark;
                                            record.NewValue = remark;
                                            record.UpdatorID = UpsatorID;
                                            record.UpdateTime = DateTime.Now;
                                            IoC.Resolve<IXMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                        }
                                    }
                                    if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                    {
                                        if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
                                        {
                                            var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, CustomerServiceRemark);
                                            if (RecordExist == null || RecordExist.Count == 0)
                                            {
                                                XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                                record.OrderInfoId = xmorderInfo.ID;
                                                record.PropertyName = "CustomerServiceRemark";
                                                record.OldValue = xmorderInfo.CustomerServiceRemark;
                                                record.NewValue = CustomerServiceRemark;
                                                record.UpdatorID = UpsatorID;
                                                record.UpdateTime = DateTime.Now;
                                                IoC.Resolve<IXMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                            }
                                        }
                                    }
                                    if (xmorderInfo.OrderStatus != status)
                                    {
                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                        record.OrderInfoId = xmorderInfo.ID;
                                        record.PropertyName = "OrderStatus";
                                        record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                                        record.NewValue = System.Convert.ToString(status);
                                        record.UpdatorID = UpsatorID;
                                        //if (Modified != null && Modified != "")
                                        //{
                                        //    record.UpdateTime = DateTime.Parse(Modified);
                                        //}
                                        //else
                                        //{
                                        record.UpdateTime = DateTime.Now;
                                        //}
                                        IoC.Resolve<IXMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                    }

                                    #endregion

                                    //decimal orderprice = 0;//订单金额

                                    #region 注释的原获取订单商品信息
                                    //for (int i = 0; i < ja_goods.Count; i++)
                                    //{
                                    //    string brand_name = ja_goods[i]["brand_name"].ToString().Replace("\"", "");//品牌名称
                                    //    string product_name = ja_goods[i]["product_name"].ToString().Replace("\"", "");//商品名称
                                    //    string size = ja_goods[i]["size"].ToString().Replace("\"", "");//尺码
                                    //    //string product_no = ja_goods[i]["art_no"].ToString().Replace("\"", "");//货号（对应商品编码）
                                    //    string product_no = ja_goods[i]["barcode"].ToString().Replace("\"", "");//货号,其实对应的是传过来的条形码的值
                                    //    //string barcode = ja_goods[i]["barcode"].ToString().Replace("\"", "");//条形码
                                    //    string amount = ja_goods[i]["amount"].ToString().Replace("\"", "");//商品数量
                                    //    string price = ja_goods[i]["sell_price"].ToString().Replace("\"", "");//单价

                                    //    //2015-7-28 修改 
                                    //    var ddh = product_no.Substring(0, 2);
                                    //    //if (product_name.IndexOf("儿童") == -1 && product_name.IndexOf("青少年") == -1 && product_name.IndexOf("亲子") == -1 && product_name.IndexOf("青少年定制床垫") == -1 && product_name.IndexOf("独立弹簧乳胶可拆卸床垫") == -1)
                                    //    //2015-7-28 修改

                                    //    if (ddh == "CM")
                                    //    {
                                    //        xmorderInfo.IsOurOrder = true;
                                    //    }

                                    //    //商家编码查询从表信息。
                                    //    var ProductList = IoC.Resolve<IXMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(product_no, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);
                                    //    //根据商家编码查询对应从表信息
                                    //    //var xmorderinfoproduct = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == product_no).SingleOrDefault();
                                    //    ////XMOrderInfoProductDetails XMOrderInfoProduct = new XMOrderInfoProductDetails();

                                    //    //if (xmorderinfoproduct == null)
                                    //    //{
                                    //    //    xmorderinfoproduct = new XMOrderInfoProductDetails();
                                    //    //}
                                    //    var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == product_no).ToList();//.SingleOrDefault();

                                    //    XMOrderInfoProductDetails xmorderinfoproduct = null;

                                    //    if (OrderyReportProductList.Count == 0)
                                    //    {
                                    //        xmorderinfoproduct = new XMOrderInfoProductDetails();
                                    //    }
                                    //    else
                                    //    {

                                    //        xmorderinfoproduct = OrderyReportProductList[0];
                                    //    }
                                    //    if (ProductList.Count > 0)
                                    //    {
                                    //        //商品关联主表信息
                                    //        //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                    //        if (ProductList[0].TDateTimeStart != null && ProductList[0].TDateTimeEnd != null && add_time != null && add_time != "" && add_time != "0001-01-01 00:00:00")
                                    //        {
                                    //            if (Convert.ToDateTime(add_time) >= ProductList[0].TDateTimeStart && Convert.ToDateTime(add_time) <= ProductList[0].TDateTimeEnd)
                                    //            {
                                    //                xmorderinfoproduct.PlatformMerchantCode = product_no;//货号
                                    //                xmorderinfoproduct.Specifications = ProductList[0].Specifications;//尺寸
                                    //                xmorderinfoproduct.FactoryPrice = ProductList[0].TCostprice * Convert.ToInt32(amount);//出厂价
                                    //                xmorderinfoproduct.ProductName = ProductList[0].ProductName;//产品名称 
                                    //            }
                                    //            else
                                    //            {
                                    //                xmorderinfoproduct.PlatformMerchantCode = product_no;//货号
                                    //                xmorderinfoproduct.Specifications = ProductList[0].Specifications;//尺寸
                                    //                xmorderinfoproduct.FactoryPrice = ProductList[0].Costprice * Convert.ToInt32(amount);//出厂价*数量
                                    //                xmorderinfoproduct.ProductName = ProductList[0].ProductName;//产品名称 
                                    //            }
                                    //        }
                                    //        else
                                    //        {
                                    //            xmorderinfoproduct.PlatformMerchantCode = product_no;//货号
                                    //            xmorderinfoproduct.Specifications = ProductList[0].Specifications;//尺寸
                                    //            xmorderinfoproduct.FactoryPrice = ProductList[0].Costprice * Convert.ToInt32(amount);//出厂价*数量
                                    //            xmorderinfoproduct.ProductName = ProductList[0].ProductName;//产品名称 
                                    //        }
                                    //    }
                                    //    xmorderinfoproduct.SalesPrice = decimal.Parse(price);//销售价

                                    //    //orderprice += decimal.Parse(price) * Convert.ToInt32(amount);

                                    //    if (scProductName == "")
                                    //    {
                                    //        scProductName = xmorderinfoproduct.ProductName;
                                    //        //scSalePrice = decimal.Parse(xmorderinfoproduct.SalesPrice == null ? "0" : xmorderinfoproduct.SalesPrice.ToString());
                                    //    }

                                    //    if (HozestERPContext.Current.User != null)
                                    //    {
                                    //        xmorderinfoproduct.UpdateID = HozestERPContext.Current.User.CustomerID;
                                    //    }
                                    //    else
                                    //    {
                                    //        string UserName = "admin";
                                    //        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                    //        if (customer.Count > 0)
                                    //        {
                                    //            xmorderinfoproduct.UpdateID = customer[0].CustomerID;
                                    //        }
                                    //    }
                                    //    xmorderinfoproduct.UpdateDate = DateTime.Now;
                                    //    //base.ProjectService.UpdateXMOrderInfo(xmorderInfo);
                                    //    //}
                                    //}
                                    #endregion

                                    scSalePrice = (decimal)xmorderInfo.PayPrice;

                                    //判断是否刷单
                                    if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00"))
                                    {
                                        xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), order_id, xmorderInfo.Remark, CustomerServiceRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                                    }

                                    //xmorderInfo.PayPrice = orderprice;//已支付金额

                                    #region  保存数据

                                    IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
                                    UpdateCount++;

                                    #endregion

                                }
                                #endregion
                            }
                        }
                    }
                }
                #endregion
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// 根据订单号，抓取数据 唯品会MP
        /// </summary>
        /// <param name="ordercode"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        public void getOrderVPHMP(string ordercode, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp) 
        {
            try
            {
                List<string> mylist = new List<string>();
                mylist.Add(ordercode);
                vipapis.marketplace.delivery.SovDeliveryServiceHelper.SovDeliveryServiceClient client = new vipapis.marketplace.delivery.SovDeliveryServiceHelper.SovDeliveryServiceClient();
                vipapis.marketplace.delivery.GetOrdersRequest GOR = new vipapis.marketplace.delivery.GetOrdersRequest();
                GOR.SetOrder_ids(mylist);
                Osp.Sdk.Context.InvocationContext invocationContext = Osp.Sdk.Context.Factory.GetInstance();
                invocationContext.SetAppKey(xMorderInfoApp.AppKey);
                invocationContext.SetAppSecret(xMorderInfoApp.AppSecret);
                invocationContext.SetAppURL(xMorderInfoApp.ServerUrl);
                invocationContext.SetAccessToken(xMorderInfoApp.AccessToken);
                invocationContext.SetLanguage("zh");
                List<vipapis.marketplace.delivery.SovOrder> VPHMPOrder = client.getOrders(GOR).GetOrders();
                #region

                if (VPHMPOrder.Count > 0)
                {
                    for (int i = 0; i < VPHMPOrder.Count; i++)
                    {

                        //订单编号、商家编码查询订单
                        string OrderCode = VPHMPOrder[i].GetOrder_id();
                        string status = VPHMPOrder[i].GetStatus();
                        //客服备注
                        string CustomerServiceRemark = "/收货时间:" + VPHMPOrder[i].GetTransport_day() + "/发票抬头:" + VPHMPOrder[i].GetInvoice_title() + "/发票金额:" + VPHMPOrder[i].GetInvoice_amount();
                        decimal scSalePrice = 0;//销售价(刷单)
                        var xmorderInfo = this.GetXMOrderInfoByOrderCode(OrderCode);
                        if (xmorderInfo == null)
                        {
                            #region 新增
                            bool IsAudit = false;//同步已发货及以后状态订单，自动审核
                            //订单主表信息
                            xmorderInfo = new XMOrderInfo();//初始化;
                            xmorderInfo.NickID = int.Parse(xMorderInfoApp.NickId.ToString());//1;//1:城市爱情旗舰店    22:利豪利嘉旗舰店
                            xmorderInfo.PlatformTypeId = xMorderInfoApp.PlatformTypeId;//803;//平台类型（唯品会MP）
                            xmorderInfo.OrderInfoCreateDate = DateTime.Parse(VPHMPOrder[i].GetStore_add_time());//订单流入店铺的时间
                            //if (transport_day != "")
                            //{
                            //    orderInfo.AppointDeliveryTime = Convert.ToDateTime(transport_day);//预约发货时间
                            //}

                            xmorderInfo.OrderCode = OrderCode;//订单号
                            xmorderInfo.OrderStatus = status;//订单状态

                            if (status == "10")
                            {
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                            }
                            if (status == "22")
                            {
                                IsAudit = true;
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                }
                                //if (xmorderInfo.CompletionTime == null)
                                //{
                                //    xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                //}
                            }
                            if (status == "25")
                            {
                                IsAudit = true;
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                }
                                if (xmorderInfo.CompletionTime == null)
                                {
                                    xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                    AutoSingleRow(OrderCode);
                                }
                            }
                            xmorderInfo.FullName = VPHMPOrder[i].GetReceiver_name();//收货人
                            xmorderInfo.DeliveryAddress = VPHMPOrder[i].GetReceiver_address() + "(" + VPHMPOrder[i].GetReceiver_zip() + ")";//收货地址
                            xmorderInfo.City = VPHMPOrder[i].GetReceiver_city();//市
                            xmorderInfo.Province = VPHMPOrder[i].GetReceiver_state();//省
                            xmorderInfo.County = VPHMPOrder[i].GetReceiver_district();//区
                            xmorderInfo.Mobile = VPHMPOrder[i].GetReceiver_mobile();//手机
                            xmorderInfo.Tel = VPHMPOrder[i].GetReceiver_phone();//电话
                            //orderInfo.WantID = buyerNick;//ID（买家帐号）
                            xmorderInfo.SourceType = "同步";//数据来源类型
                            xmorderInfo.FinancialAudit = true;//财务审核
                            xmorderInfo.Remark = VPHMPOrder[i].GetRemark();//备注
                            xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//客服备注（新增）
                            if (VPHMPOrder[i].GetInvoice_title() != "")
                            {
                                xmorderInfo.IsInvoiced = true;//是否发票
                                xmorderInfo.InvoiceHead = VPHMPOrder[i].GetInvoice_title();//发票抬头
                            }
                            xmorderInfo.DistributePrice = Decimal.Parse(VPHMPOrder[i].GetPost_fee());
                            xmorderInfo.ProductPrice = Decimal.Parse(VPHMPOrder[i].GetTotal_fee() == "" ? "0" : VPHMPOrder[i].GetTotal_fee());//商品总金额
                            xmorderInfo.ProductPromotion = Decimal.Parse(VPHMPOrder[i].GetDiscount_fee() == "" ? "0" : VPHMPOrder[i].GetDiscount_fee());//商品促销金额
                            xmorderInfo.OrderPromotion = Decimal.Parse(VPHMPOrder[i].GetEx_discount_fee() == "" ? "0" : VPHMPOrder[i].GetEx_discount_fee());//订单促销金额
                            xmorderInfo.OrderPrice = Decimal.Parse(VPHMPOrder[i].GetTotal_fee() == "" ? "0" : VPHMPOrder[i].GetTotal_fee()) + Decimal.Parse(VPHMPOrder[i].GetPost_fee());//订单金额=商品总金额+快递费用
                            xmorderInfo.PayPrice = (decimal)xmorderInfo.OrderPrice - xmorderInfo.ProductPromotion - xmorderInfo.OrderPromotion;//支付金额=订单金额-商品促销金额-订单促销金额
                            if (status == "25")
                            {
                                xmorderInfo.ReceivablePrice = (decimal)xmorderInfo.OrderPrice - xmorderInfo.ProductPromotion;//到账金额
                            }
                            else
                            {
                                xmorderInfo.ReceivablePrice = 0;//到账金额
                            }

                            xmorderInfo.IsEnable = false;//是否删除
                            xmorderInfo.IsCashBack = false;//是否返现
                            xmorderInfo.IsSentGifts = false;//是否已发赠品 
                            xmorderInfo.IsEvaluate = false;//是否赔付
                            xmorderInfo.IsOurOrder = false;
                            xmorderInfo.IsAudit = IsAudit;
                            xmorderInfo.IsOurOrder = true;

                            if (HozestERPContext.Current.User != null)
                            {
                                xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                                xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                            }
                            else
                            {
                                string UserName = "admin";
                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                if (customer.Count > 0)
                                {
                                    xmorderInfo.CreateID = customer[0].CustomerID;
                                    xmorderInfo.UpdateID = customer[0].CustomerID;
                                }
                            }
                            xmorderInfo.CreateDate = DateTime.Now;
                            xmorderInfo.UpdateDate = DateTime.Now;


                            #region 赠品、返现 唯品会状态为已签收才新增赠品返现订单
                            //status == "STATUS_1" || status == "STATUS_10" || status == "STATUS_11" || status == "STATUS_22" 
                            //if (status == "STATUS_25")//待审核订单（已支付/未处理）
                            //{
                            if (xmorderInfo.OrderInfoCreateDate.ToString().Trim() != null && xmorderInfo.OrderInfoCreateDate.ToString().Trim() != "")
                            {
                                if (DateTime.Parse(xmorderInfo.OrderInfoCreateDate.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                {
                                    if (xmorderInfo.CustomerServiceRemark != null && xmorderInfo.CustomerServiceRemark != "")
                                    {
                                        string BuyerName = xmorderInfo.BuyerName;//收货人名称
                                        string WantNo = "";//buyerNick;//旺旺号
                                        string paramMessage = string.Empty;

                                        if (xmorderInfo.CustomerServiceRemark.IndexOf("/赠品") > -1 || xmorderInfo.CustomerServiceRemark.IndexOf("/退差价") > -1)
                                        {
                                            #region 赠品
                                            if (xmorderInfo.CustomerServiceRemark.IndexOf("/赠品") > -1)
                                            {
                                                //返回赠品条数
                                                int PremiumsInst = XMPremiumsInst(xmorderInfo.CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, int.Parse(xMorderInfoApp.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()));

                                            }
                                            #endregion

                                            #region 返现
                                            if (xmorderInfo.CustomerServiceRemark.IndexOf("/退差价") > -1)
                                            {

                                                //返回返现条数
                                                int CashBackApplicationInstCount = CashBackApplicationInst(xmorderInfo.CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                            }

                                            #endregion
                                        }
                                    }
                                }
                            }

                            //}
                            #endregion

                            string scProductName = "";//商品名称（刷单）
                            #region 订单商品信息
                            vipapis.marketplace.delivery.SovDeliveryServiceHelper.SovDeliveryServiceClient clientDel = new vipapis.marketplace.delivery.SovDeliveryServiceHelper.SovDeliveryServiceClient();
                            Osp.Sdk.Context.InvocationContext invocationContextDel = Osp.Sdk.Context.Factory.GetInstance();
                            vipapis.marketplace.delivery.OrderDetail GORDetail = new vipapis.marketplace.delivery.OrderDetail();
                            GORDetail.SetOrder_id(xmorderInfo.OrderCode);
                            List<string> OrderCodeList = new List<string>();
                            OrderCodeList.Add(xmorderInfo.OrderCode);
                            invocationContext.SetAppKey(xMorderInfoApp.AppKey);
                            invocationContext.SetAppSecret(xMorderInfoApp.AppSecret);
                            invocationContext.SetAppURL(xMorderInfoApp.ServerUrl);
                            invocationContext.SetAccessToken(xMorderInfoApp.AccessToken);
                            invocationContextDel.SetLanguage("");
                            List<vipapis.marketplace.delivery.OrderDetail> VPHMPOrderDel = clientDel.getOrderDetail(OrderCodeList);
                            xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();//初始化
                            if (VPHMPOrderDel.Count > 0)
                            {
                                for (int j = 0; j < VPHMPOrderDel.Count; j++)
                                {
                                    List<vipapis.marketplace.delivery.OrderProduct> paramOrderProduct = VPHMPOrderDel[j].GetOrder_products();
                                    decimal payPriceK = 0;//已赋值付款金额
                                    decimal priceTotal = 0;//总商品金额
                                    if (paramOrderProduct.Count > 0)
                                    {
                                        for (int k = 0; k < paramOrderProduct.Count; k++)
                                        {
                                            int? newnickid = xMorderInfoApp.NickId;
                                            //string brand_name = paramOrderProduct[k].ToString().Replace("\"", "");//品牌名称
                                            string product_name = paramOrderProduct[k].GetTitle();//商品名称
                                            string size = paramOrderProduct[k].GetSize();//尺码
                                            //string product_no = ja_goods[i]["art_no"].ToString().Replace("\"", "");//货号（对应商品编码）
                                            string product_no = paramOrderProduct[k].GetOuter_sku_id();//货号,条码（商家新增sku时录入）
                                            //string barcode = ja_goods[i]["barcode"].ToString().Replace("\"", "");//条形码
                                            string amount = paramOrderProduct[k].GetNum();//商品数量
                                            string price = paramOrderProduct[k].GetPrice();//单价

                                            if (product_no != null && product_no != "")
                                            {
                                                //商家编码查询从表信息。
                                                var ProductList = IoC.Resolve<IXMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(product_no, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);

                                                //2015-7-28新增
                                                decimal a = 0;
                                                decimal? tj = 0;
                                                bool IsZuHe = false;
                                                if (ProductList.Count == 0)
                                                {
                                                    ProductList = GetXMProductListByzuheCode(product_no, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                                    a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                                    if (ProductList.Count > 0)
                                                    {
                                                        IsZuHe = true;
                                                    }
                                                }

                                                if (ProductList.Count > 0)
                                                {
                                                    decimal payPriceI = 0;//组合已赋值付款金额
                                                    decimal ZuHeTotal = 0;
                                                    for (int w = 0; w < ProductList.Count; w++)
                                                    {
                                                        decimal ZuHeNum = (decimal)ProductList[w].Saleprice * decimal.Parse(ProductList[w].count.ToString());
                                                        ZuHeTotal += ZuHeNum;
                                                    }
                                                    for (int s = 0; s < ProductList.Count; s++)
                                                    {
                                                        var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                        //商品关联主表信息
                                                        //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                                        if (ProductList[s].TDateTimeStart != null && ProductList[s].TDateTimeEnd != null && xmorderInfo.OrderInfoCreateDate != null && xmorderInfo.OrderInfoCreateDate.ToString() != "" && xmorderInfo.OrderInfoCreateDate.ToString() != "0001-01-01 00:00:00")
                                                        {
                                                            if (Convert.ToDateTime(xmorderInfo.OrderInfoCreateDate) >= ProductList[s].TDateTimeStart && Convert.ToDateTime(xmorderInfo.OrderInfoCreateDate) <= ProductList[s].TDateTimeEnd)
                                                            {
                                                                //XMOrderInfoProduct.PlatformMerchantCode = product_no;//货号
                                                                XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                                XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                                XMOrderInfoProduct.FactoryPrice = ProductList[s].TCostprice * Convert.ToInt32(amount) * ProductList[s].count;//出厂价
                                                                XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                                XMOrderInfoProduct.TCostprice = ProductList[s].TCostprice;

                                                                if (!string.IsNullOrEmpty(ProductList[s].TManufacturersCode))
                                                                {
                                                                    XMOrderInfoProduct.TManufacturersCode = ProductList[s].TManufacturersCode;//临时厂家编码
                                                                }
                                                                else
                                                                {
                                                                    XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                                }

                                                            }
                                                            else
                                                            {
                                                                //XMOrderInfoProduct.PlatformMerchantCode = product_no;//货号
                                                                XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                                XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                                XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * Convert.ToInt32(amount) * ProductList[s].count;//出厂价*数量
                                                                XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                                XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                                XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                            }

                                                        }
                                                        else
                                                        {
                                                            //XMOrderInfoProduct.PlatformMerchantCode = product_no;//货号
                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                            XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                            XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * Convert.ToInt32(amount) * ProductList[s].count;//出厂价*数量
                                                            XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                            XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                            XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                        }

                                                        XMOrderInfoProduct.ProductNum = Convert.ToInt32(amount) * ProductList[s].count;//数量

                                                        decimal PartPayPrice = 0;
                                                        if (i == paramOrderProduct.Count - 1)
                                                        {
                                                            PartPayPrice = (decimal)xmorderInfo.PayPrice - payPriceK;
                                                        }
                                                        else
                                                        {
                                                            PartPayPrice = Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(price) * decimal.Parse(amount) / decimal.Parse(xmorderInfo.ProductPrice.ToString()), 2);
                                                            //payPriceK += PartPayPrice;
                                                        }
                                                        if (IsZuHe)
                                                        {
                                                            if (s == ProductList.Count - 1)
                                                            {
                                                                XMOrderInfoProduct.SalesPrice = PartPayPrice - payPriceI;
                                                                payPriceK += PartPayPrice;
                                                            }
                                                            else
                                                            {
                                                                if (ZuHeTotal == 0) //产品销售价没有维护，是0时导致分母为0，计算出错
                                                                {
                                                                    XMOrderInfoProduct.SalesPrice = 0;
                                                                }
                                                                else
                                                                {
                                                                    XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice * (decimal)ProductList[s].Saleprice * decimal.Parse(ProductList[s].count.ToString()) / ZuHeTotal, 2);//销售价
                                                                }
                                                                payPriceI += (decimal)XMOrderInfoProduct.SalesPrice;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice, 2);//销售价
                                                            payPriceK += PartPayPrice;
                                                        }

                                                        XMOrderInfoProduct.IsEnable = false;//是否删除
                                                        XMOrderInfoProduct.IsAudit = IsAudit;//是否审核
                                                        XMOrderInfoProduct.IsExpedited = false;//是否加急
                                                        XMOrderInfoProduct.ISArrivedLibrary = false;//是否抵库

                                                        if (scProductName == "")
                                                        {
                                                            scProductName = XMOrderInfoProduct.ProductName;
                                                            //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                        }

                                                        if (HozestERPContext.Current.User != null)
                                                        {
                                                            XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                            XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                        }
                                                        else
                                                        {
                                                            string UserName = "admin";
                                                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                            if (customer.Count > 0)
                                                            {
                                                                XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                                XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                            }
                                                        }

                                                        XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                        XMOrderInfoProduct.UpdateDate = DateTime.Now;
                                                        xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                                    }
                                                }
                                                else
                                                {
                                                    var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                    XMOrderInfoProduct.PlatformMerchantCode = product_no; //料号（商品编码）
                                                    XMOrderInfoProduct.Specifications = "";//尺寸
                                                    XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                                    XMOrderInfoProduct.ProductName = "无产品";

                                                    xmorderInfo.IsAbnormal = true;//是否异常

                                                    XMOrderInfoProduct.ProductNum = Convert.ToInt32(amount);//数量

                                                    XMOrderInfoProduct.SalesPrice = decimal.Parse(price) * Convert.ToInt32(amount);//销售价

                                                    XMOrderInfoProduct.IsEnable = false;//是否删除
                                                    XMOrderInfoProduct.IsAudit = IsAudit;//是否审核
                                                    XMOrderInfoProduct.IsExpedited = false;//是否加急
                                                    XMOrderInfoProduct.ISArrivedLibrary = false;//是否抵库

                                                    if (scProductName == "")
                                                    {
                                                        scProductName = XMOrderInfoProduct.ProductName;
                                                        //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                    }

                                                    if (HozestERPContext.Current.User != null)
                                                    {
                                                        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                    }
                                                    else
                                                    {
                                                        string UserName = "admin";
                                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                        if (customer.Count > 0)
                                                        {
                                                            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                        }
                                                    }

                                                    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                    XMOrderInfoProduct.UpdateDate = DateTime.Now;
                                                    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            scSalePrice = (decimal)xmorderInfo.PayPrice;//(唯品会新增)
                            //判断是否刷单
                            if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00"))
                            {
                                xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), OrderCode, xmorderInfo.Remark, CustomerServiceRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售金额：订单支付金额
                            }

                            #region  保存数据

                            if (xmorderInfo.XM_OrderInfoProductDetails != null && xmorderInfo.XM_OrderInfoProductDetails.Count > 0)
                            {
                                xmorderInfo.UpdateDate = DateTime.Now;
                                IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
                                //新建发票
                                if (xmorderInfo.IsInvoiced != null && xmorderInfo.IsInvoiced == true)
                                {
                                    ToAddXMInvoiceInfo(xmorderInfo, 719, "", "", "", "", "");
                                }
                            }
                            InsertCount++;

                            #endregion

                            #endregion
                        }
                        else
                        {
                            #region 修改
                            string Memo = VPHMPOrder[i].GetRemark() + CustomerServiceRemark;//SellerMemo.Substring(SellerMemo.LastIndexOf("'") + 1).ToLower();
                            string RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;
                            string StatusValue = xmorderInfo.OrderStatus.Trim();

                            xmorderInfo.OrderStatus = status;//订单状态

                            if (status == "10")
                            {

                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                            }
                            if (status == "22")
                            {
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                }
                            }
                            if (status == "25")
                            {
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                }
                                if (xmorderInfo.CompletionTime == null)
                                {
                                    xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                    AutoSingleRow(OrderCode);
                                }
                            }

                            #region 赠品、返现 唯品会为已签收才能修改返现赠品订单
                            //status == "STATUS_1" || status == "STATUS_10" || status == "STATUS_11" || status == "STATUS_22"
                            //if (status == "STATUS_25")//待审核订单（已支付/未处理）
                            //{ 
                            if (VPHMPOrder[i].GetStore_add_time().ToString().Trim() != null && VPHMPOrder[i].GetStore_add_time().ToString().Trim() != "")
                            {
                                if (DateTime.Parse(VPHMPOrder[i].GetStore_add_time().ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                {
                                    if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                    {
                                        string BuyerName = VPHMPOrder[i].GetReceiver_name();//收货人名称
                                        string WantNo = "";//buyerNick;//旺旺号
                                        string paramMessage = string.Empty;

                                        #region 赠品、返现 (修改)

                                        if (xmorderInfo.CustomerServiceRemark.Trim() != VPHMPOrder[i].GetRemark().Trim())
                                        {
                                            string CustomerServiceRemarkOld = xmorderInfo.CustomerServiceRemark.Trim();
                                            string CustomerServiceRemarkNew = CustomerServiceRemark.Trim();

                                            if (CustomerServiceRemarkNew.IndexOf("/赠品") > -1 || CustomerServiceRemarkNew.IndexOf("/退差价") > -1)
                                            {
                                                IoC.Resolve<IXMOrderInfoAPIService>().XMPremiumsAndCashBackApplication(CustomerServiceRemarkOld, CustomerServiceRemarkNew, xmorderInfo.OrderCode, xmorderInfo.WantID, xmorderInfo.FullName, (int)xmorderInfo.PlatformTypeId, (int)xmorderInfo.NickID);
                                            }
                                        }
                                        #endregion
                                    }
                                }
                            }

                            //}
                            #endregion

                            xmorderInfo.SourceType = "同步";//数据来源类型
                            xmorderInfo.FinancialAudit = true;//财务审核
                            //更改收货地址
                            if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
                            {
                                string csr = CustomerServiceRemark + "$";
                                string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                                string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");

                                //xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                            }

                            xmorderInfo.Remark = VPHMPOrder[i].GetRemark();//备注
                            // xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//客服备注
                            if (VPHMPOrder[i].GetInvoice_title() != "")
                            {
                                xmorderInfo.IsInvoiced = true;//是否发票
                                xmorderInfo.InvoiceHead = VPHMPOrder[i].GetInvoice_title();//发票抬头
                            }
                            xmorderInfo.DistributePrice = Decimal.Parse(VPHMPOrder[i].GetPost_fee());
                            xmorderInfo.ProductPrice = Decimal.Parse(VPHMPOrder[i].GetTotal_fee() == "" ? "0" : VPHMPOrder[i].GetTotal_fee());//商品总金额
                            xmorderInfo.ProductPromotion = Decimal.Parse(VPHMPOrder[i].GetDiscount_fee() == "" ? "0" : VPHMPOrder[i].GetDiscount_fee());//商品促销金额
                            xmorderInfo.OrderPromotion = Decimal.Parse(VPHMPOrder[i].GetEx_discount_fee() == "" ? "0" : VPHMPOrder[i].GetEx_discount_fee());//订单促销金额
                            xmorderInfo.OrderPrice = Decimal.Parse(VPHMPOrder[i].GetTotal_fee() == "" ? "0" : VPHMPOrder[i].GetTotal_fee()) + Decimal.Parse(VPHMPOrder[i].GetPost_fee());//订单金额=商品总金额+快递费用
                            xmorderInfo.PayPrice = (decimal)xmorderInfo.OrderPrice - xmorderInfo.ProductPromotion - xmorderInfo.OrderPromotion;//支付金额=订单金额-商品促销金额-订单促销金额
                            if (status == "STATUS_25")
                            {
                                xmorderInfo.ReceivablePrice = (decimal)xmorderInfo.OrderPrice - (decimal)xmorderInfo.ProductPromotion;//到账金额
                            }
                            else
                            {
                                xmorderInfo.ReceivablePrice = 0;//到账金额
                            }

                            if (HozestERPContext.Current.User != null)
                            {
                                xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                            }
                            else
                            {
                                string UserName = "admin";
                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                if (customer.Count > 0)
                                {
                                    xmorderInfo.UpdateID = customer[0].CustomerID;
                                }
                            }
                            xmorderInfo.UpdateDate = DateTime.Now;
                            xmorderInfo.IsOurOrder = true;

                            #region 记录操作

                            int UpsatorID = 0;
                            if (HozestERPContext.Current.User != null)
                            {
                                UpsatorID = HozestERPContext.Current.User.CustomerID;
                            }
                            else
                            {
                                string UserName = "admin";
                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                if (customer.Count > 0)
                                {
                                    UpsatorID = customer[0].CustomerID;
                                }
                            }
                            if (VPHMPOrder[i].GetRemark() != null && VPHMPOrder[i].GetRemark() != "")
                            {
                                if (xmorderInfo.Remark != VPHMPOrder[i].GetRemark())
                                {
                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    record.OrderInfoId = xmorderInfo.ID;
                                    record.PropertyName = "Remark";
                                    record.OldValue = xmorderInfo.Remark;
                                    record.NewValue = VPHMPOrder[i].GetRemark();
                                    record.UpdatorID = UpsatorID;
                                    record.UpdateTime = DateTime.Now;
                                    IoC.Resolve<IXMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                }
                            }
                            if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                            {
                                if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
                                {
                                    var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, CustomerServiceRemark);
                                    if (RecordExist == null || RecordExist.Count == 0)
                                    {
                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                        record.OrderInfoId = xmorderInfo.ID;
                                        record.PropertyName = "CustomerServiceRemark";
                                        record.OldValue = xmorderInfo.CustomerServiceRemark;
                                        record.NewValue = CustomerServiceRemark;
                                        record.UpdatorID = UpsatorID;
                                        record.UpdateTime = DateTime.Now;
                                        IoC.Resolve<IXMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                                    }
                                }
                            }
                            if (xmorderInfo.OrderStatus != status)
                            {
                                XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                record.OrderInfoId = xmorderInfo.ID;
                                record.PropertyName = "OrderStatus";
                                record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                                record.NewValue = System.Convert.ToString(status);
                                record.UpdatorID = UpsatorID;
                                //if (Modified != null && Modified != "")
                                //{
                                //    record.UpdateTime = DateTime.Parse(Modified);
                                //}
                                //else
                                //{
                                record.UpdateTime = DateTime.Now;
                                //}
                                IoC.Resolve<IXMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                            }


                            #endregion

                            string scProductName = "";//商品名称（刷单）

                            scSalePrice = (decimal)xmorderInfo.PayPrice;
                            //判断是否刷单
                            if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00"))
                            {
                                xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), OrderCode, xmorderInfo.Remark, CustomerServiceRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售金额：订单支付金额
                            }
                            //xmorderInfo.PayPrice = orderprice ;

                            #region  保存数据

                            IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
                            UpdateCount++;

                            #endregion

                            #endregion

                        }
                    }
                }
                #endregion
            }
            catch (Osp.Sdk.Exception.OspException e)
            {
                Console.WriteLine(e.ToString());
            }
        } 

        /// <summary>
        /// 根据订单号，抓取数据 一号店
        /// </summary>
        /// <param name="ordercode"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        public void getOrderYHD(string ordercode, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            if (xMorderInfoApp != null && ordercode != "")
            {
                //根据订单号获取订单详情
                Yhd.Api.YhdClient client_order = new Yhd.Api.YhdClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret);
                Yhd.Api.Request.OrderDetailGetRequest reqSupplierOrders_order = new Yhd.Api.Request.OrderDetailGetRequest();
                reqSupplierOrders_order.OrderCode = ordercode;
                Yhd.Api.Response.OrderDetailGetResponse repSupplierOrders_order = client_order.Execute(reqSupplierOrders_order, xMorderInfoApp.AccessToken);

                if (repSupplierOrders_order != null)
                {
                    if (repSupplierOrders_order.OrderInfo != null)
                    {
                        if (repSupplierOrders_order.OrderInfo.OrderDetail != null)
                        {
                            //API获取的订单信息
                            var orderinfo = repSupplierOrders_order.OrderInfo.OrderDetail;
                            //订单编号查询订单
                            var xmorderInfo = IoC.Resolve<IXMOrderInfoAPIService>().GetXMOrderInfoByOrderCode(ordercode);

                            decimal scSalePrice = 0;//销售价(刷单)

                            #region 新增
                            if (xmorderInfo == null)
                            {
                                xmorderInfo = new XMOrderInfo();
                                xmorderInfo.NickID = xMorderInfoApp.NickId;//城市爱情
                                xmorderInfo.PlatformTypeId = xMorderInfoApp.PlatformTypeId;//一号店
                                xmorderInfo.OrderInfoCreateDate = DateTime.Parse(orderinfo.OrderCreateTime);//创单时间
                                if (orderinfo.OrderPaymentConfirmDate != "" && orderinfo.OrderPaymentConfirmDate != null)
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Parse(orderinfo.OrderPaymentConfirmDate);//付款时间
                                    }
                                }
                                if (orderinfo.DeliveryDate != "" && orderinfo.DeliveryDate != null)
                                {
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Parse(orderinfo.DeliveryDate);//发货时间
                                    }
                                    //--新增如果付款时间为空则 两个时间为发货时间
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Parse(orderinfo.DeliveryDate);//付款时间
                                    }
                                }

                                xmorderInfo.OrderInfoModified = DateTime.Parse(orderinfo.UpdateTime);//更新时间
                                xmorderInfo.OrderCode = orderinfo.OrderCode;//订单编号
                                // 订单状态:
                                //ORDER_WAIT_PAY：已下单（货款未全收）
                                //ORDER_PAYED：已下单（货款已收）
                                //ORDER_TRUNED_TO_DO：可以发货（已送仓库）
                                //ORDER_OUT_OF_WH：已出库（货在途）
                                //ORDER_RECEIVED：货物用户已收到
                                //ORDER_FINISH：订单完成
                                //ORDER_CANCEL：订单取消
                                xmorderInfo.OrderStatus = orderinfo.OrderStatus.ToString();//   

                                if (orderinfo.ReceiveDate != null && orderinfo.ReceiveDate != "" && orderinfo.ReceiveDate != "0001-01-01 00:00:00")
                                {
                                    if (xmorderInfo.CompletionTime == null)
                                    {
                                        xmorderInfo.CompletionTime = DateTime.Parse(orderinfo.ReceiveDate);
                                        AutoSingleRow(orderinfo.OrderCode);
                                    }
                                    //--新增如果发货时间付款时间为空则 两个时间为完成时间
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Parse(orderinfo.ReceiveDate);//发货时间
                                    }
                                    //--新增如果发货时间付款时间为空则 两个时间为完成时间
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Parse(orderinfo.ReceiveDate);//付款时间
                                    }
                                }

                                xmorderInfo.WantID = orderinfo.EndUserId.ToString();//用户id
                                xmorderInfo.FullName = orderinfo.GoodReceiverName;//收货人
                                xmorderInfo.Province = orderinfo.GoodReceiverProvince;//省
                                xmorderInfo.City = orderinfo.GoodReceiverCity;//市
                                xmorderInfo.County = orderinfo.GoodReceiverCounty;//区县
                                xmorderInfo.DeliveryAddress = orderinfo.GoodReceiverAddress;//收货地址
                                xmorderInfo.Mobile = orderinfo.GoodReceiverMoblie;//手机
                                xmorderInfo.Tel = orderinfo.GoodReceiverPhone;//电话
                                xmorderInfo.SourceType = "同步";//数据来源
                                xmorderInfo.FinancialAudit = true;//财务审核
                                xmorderInfo.Remark = orderinfo.DeliveryRemark;//发货备注
                                xmorderInfo.CustomerServiceRemark = orderinfo.MerchantRemark;//卖家备（新增）

                                //string MerchantRemark = orderinfo.MerchantRemark;

                                #region 赠品、返现  ---订单完成或确认收货才生成赠品返现记录
                                //orderinfo.OrderStatus.ToString() == "ORDER_PAYED" || orderinfo.OrderStatus.ToString() == "ORDER_TRUNED_TO_DO"
                                //    || orderinfo.OrderStatus.ToString() == "ORDER_OUT_OF_WH" || 
                                //if (orderinfo.OrderStatus.ToString() == "ORDER_RECEIVED"
                                //    || orderinfo.OrderStatus.ToString() == "ORDER_FINISH")//待审核订单（已支付/未处理）
                                //{
                                if (orderinfo.OrderCreateTime.ToString().Trim() != null && orderinfo.OrderCreateTime.ToString().Trim() != "")
                                {
                                    if (DateTime.Parse(orderinfo.OrderCreateTime.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                    {
                                        if (orderinfo.MerchantRemark != null && orderinfo.MerchantRemark != "")
                                        {
                                            string BuyerName = orderinfo.GoodReceiverName;//收货人名称 
                                            string WantNo = orderinfo.EndUserId.ToString();//旺旺号 
                                            string OrderCode = orderinfo.OrderCode;//订单号 
                                            string paramMessage = string.Empty;

                                            if (orderinfo.MerchantRemark.IndexOf("/赠品") > -1 || orderinfo.MerchantRemark.IndexOf("/退差价") > -1)
                                            {
                                                #region 赠品
                                                if (orderinfo.MerchantRemark.IndexOf("/赠品") > -1)
                                                {
                                                    //返回赠品条数
                                                    int PremiumsInst = XMPremiumsInst(orderinfo.MerchantRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, xMorderInfoApp.PlatformTypeId.Value, xMorderInfoApp.NickId.Value);

                                                }
                                                #endregion

                                                #region 返现
                                                if (orderinfo.MerchantRemark.IndexOf("/退差价") > -1)
                                                {

                                                    //返回返现条数
                                                    int CashBackApplicationInstCount = CashBackApplicationInst(orderinfo.MerchantRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                                }

                                                #endregion
                                            }
                                        }
                                    }
                                }

                                //}
                                #endregion

                                if (orderinfo.OrderNeedInvoice != 0)//发票需要情况（0:不需要，1:旧版普通，2:新版普通，3:增值税发票）
                                {
                                    xmorderInfo.IsInvoiced = true;
                                    xmorderInfo.InvoiceHead = orderinfo.InvoiceTitle;//发票抬头
                                    xmorderInfo.InvoiceNo = orderinfo.InvoiceContent;//发票内容
                                    xmorderInfo.InvoicePrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收款(产品金额-促销活动立减金额-商家抵用卷金额+运费)
                                }
                                xmorderInfo.DistributeMethod = orderinfo.DeliverySupplierId.ToString();//配送方式({10001:普通快递、20001:EMS、30001:供应商直送、40001:自提、30002:店中店商家直送} )
                                xmorderInfo.DistributePrice = decimal.Parse(orderinfo.OrderDeliveryFee.ToString());//运费（一号店）
                                xmorderInfo.ProductPrice = Decimal.Parse(orderinfo.ProductAmount.ToString());//产品总额
                                xmorderInfo.OrderPrice = Decimal.Parse(orderinfo.OrderAmount.ToString());//订单金额
                                Decimal? promotionprice = 0;//优惠金额
                                promotionprice = xmorderInfo.ProductPrice + xmorderInfo.DistributePrice - xmorderInfo.OrderPrice;
                                xmorderInfo.OrderPromotion = promotionprice;//订单优惠金额
                                Decimal? taxes = 0;//折扣
                                taxes = (xmorderInfo.OrderPrice - promotionprice) / xmorderInfo.OrderPrice;
                                xmorderInfo.Taxes = taxes;
                                xmorderInfo.ReceivablePrice = Decimal.Parse(orderinfo.OrderAmount.ToString());//应收金额
                                xmorderInfo.PayPrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收金额
                                scSalePrice = Decimal.Parse(orderinfo.RealAmount.ToString());
                                xmorderInfo.IsEnable = false;//是否删除
                                xmorderInfo.IsCashBack = false;//是否返现
                                xmorderInfo.IsSentGifts = false;//是否已发赠品 
                                xmorderInfo.IsEvaluate = false;//是否赔付
                                xmorderInfo.IsOurOrder = true;//是我们的订单

                                if (HozestERPContext.Current.User != null)
                                {
                                    xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                                    xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;

                                }
                                else
                                {
                                    string UserName = "admin";
                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                    if (customer.Count > 0)
                                    {
                                        xmorderInfo.CreateID = customer[0].CustomerID;
                                        xmorderInfo.UpdateID = customer[0].CustomerID;
                                    }
                                }

                                xmorderInfo.CreateDate = DateTime.Now;
                                xmorderInfo.UpdateDate = DateTime.Now;

                                xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();//初始化
                                string ModifiedDate = orderinfo.UpdateTime;//订单修改时间


                                string scProductName = "";//商品名称（刷单）
                                decimal priceTotal = 0;//总商品金额
                                for (int k = 0; k < repSupplierOrders_order.OrderInfo.OrderItemList.OrderItem.Count; k++)
                                {
                                    var productinfo = repSupplierOrders_order.OrderInfo.OrderItemList.OrderItem[k];
                                    decimal PriceNum = (decimal)productinfo.OrderItemPrice * decimal.Parse(productinfo.OrderItemNum.ToString());
                                    priceTotal += PriceNum;
                                }
                                decimal payPriceK = 0;//已赋值付款金额

                                for (int k = 0; k < repSupplierOrders_order.OrderInfo.OrderItemList.OrderItem.Count; k++)
                                {
                                    //产品详情
                                    var productinfo = repSupplierOrders_order.OrderInfo.OrderItemList.OrderItem[k];

                                    if (productinfo != null)
                                    {
                                        string OuterSkuId = productinfo.OuterId;//商品编码
                                        int? num = productinfo.OrderItemNum;//数量
                                        string orderItemPrice = productinfo.OrderItemPrice == null ? "0" : productinfo.OrderItemPrice.ToString();//价格
                                        //XMOrderInfoProductDetails XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                        if (OuterSkuId != "" && OuterSkuId != null)
                                        {
                                            //商家编码查询从表信息。
                                            var ProductList = IoC.Resolve<IXMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);

                                            //2015-7-28新增
                                            decimal a = 0;
                                            //decimal? tj = 0;
                                            bool IsZuHe = false;
                                            if (ProductList.Count == 0)
                                            {
                                                ProductList = GetXMProductListByzuheCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                                a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                                if (ProductList.Count > 0)
                                                {
                                                    IsZuHe = true;
                                                }
                                            }

                                            //var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                                            //XMOrderInfoProductDetails XMOrderInfoProduct = null;

                                            //if (OrderyReportProductList.Count == 0)
                                            //{
                                            //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                            //}
                                            //else
                                            //{

                                            //    XMOrderInfoProduct = OrderyReportProductList[0];
                                            //}
                                            if (ProductList.Count > 0)
                                            {
                                                decimal payPriceI = 0;//组合已赋值付款金额
                                                decimal ZuHeTotal = 0;
                                                for (int i = 0; i < ProductList.Count; i++)
                                                {
                                                    decimal ZuHeNum = (decimal)ProductList[i].Saleprice * decimal.Parse(ProductList[i].count.ToString());
                                                    ZuHeTotal += ZuHeNum;
                                                }
                                                for (int i = 0; i < ProductList.Count; i++)
                                                {
                                                    var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                    //商品关联主表信息
                                                    //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList.ProductId.ToString()));
                                                    if (ProductList[i].TDateTimeStart != null && ProductList[i].TDateTimeEnd != null && ModifiedDate != null && ModifiedDate != "" && ModifiedDate != "0001-01-01 00:00:00")
                                                    {
                                                        if (Convert.ToDateTime(ModifiedDate) >= ProductList[i].TDateTimeStart && Convert.ToDateTime(ModifiedDate) <= ProductList[i].TDateTimeEnd)
                                                        {
                                                            //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                                                            XMOrderInfoProduct.Specifications = ProductList[i].Specifications;//尺寸
                                                            XMOrderInfoProduct.FactoryPrice = ProductList[i].TCostprice * Convert.ToInt32(num) * ProductList[i].count;//出厂价
                                                            XMOrderInfoProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                                            XMOrderInfoProduct.TCostprice = ProductList[i].TCostprice;
                                                            if (!string.IsNullOrEmpty(ProductList[i].TManufacturersCode))
                                                            {
                                                                XMOrderInfoProduct.TManufacturersCode = ProductList[i].TManufacturersCode;
                                                            }
                                                            else
                                                            {
                                                                XMOrderInfoProduct.TManufacturersCode = ProductList[i].ManufacturersCode;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                                                            XMOrderInfoProduct.Specifications = ProductList[i].Specifications;//尺寸
                                                            XMOrderInfoProduct.FactoryPrice = ProductList[i].Costprice * num * ProductList[i].count;//出厂价*数量
                                                            XMOrderInfoProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                                            XMOrderInfoProduct.TCostprice = ProductList[i].Costprice;
                                                            XMOrderInfoProduct.TManufacturersCode = ProductList[i].ManufacturersCode;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                        XMOrderInfoProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                                                        XMOrderInfoProduct.Specifications = ProductList[i].Specifications;//尺寸
                                                        XMOrderInfoProduct.FactoryPrice = ProductList[i].Costprice * num * ProductList[i].count;//出厂价*数量
                                                        XMOrderInfoProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                                        XMOrderInfoProduct.TCostprice = ProductList[i].Costprice;
                                                        XMOrderInfoProduct.TManufacturersCode = ProductList[i].ManufacturersCode;
                                                    }
                                                    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num) * ProductList[i].count;//数量
                                                    if (ModifiedDate != null && ModifiedDate != "")
                                                    {
                                                        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

                                                    }
                                                    //XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.OrderItemPrice.ToString());//单价/销售价
                                                    //XMOrderInfoProduct.SalesPrice = decimal.Parse(orderItemPrice);//销售价
                                                    //if (i < ProductList.Count - 1)
                                                    //{
                                                    //    XMOrderInfoProduct.SalesPrice = Math.Round(decimal.Parse(((ProductList[i].Costprice * ProductList[i].count * num / a) * decimal.Parse(orderItemPrice)).ToString()), 2);//销售价
                                                    //    tj = tj + XMOrderInfoProduct.SalesPrice;
                                                    //}
                                                    //else
                                                    //{
                                                    //    XMOrderInfoProduct.SalesPrice = decimal.Parse(orderItemPrice) - tj;//销售价
                                                    //}
                                                    decimal PartPayPrice = 0;
                                                    if (k == repSupplierOrders_order.OrderInfo.OrderItemList.OrderItem.Count - 1)
                                                    {
                                                        PartPayPrice = (decimal)xmorderInfo.PayPrice - payPriceK;
                                                    }
                                                    else
                                                    {
                                                        PartPayPrice = Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(orderItemPrice) * decimal.Parse(num.ToString()) / priceTotal, 2);
                                                        //payPriceK += PartPayPrice;
                                                    }
                                                    if (IsZuHe)
                                                    {
                                                        if (i == ProductList.Count - 1)
                                                        {
                                                            XMOrderInfoProduct.SalesPrice = PartPayPrice - payPriceI;
                                                            payPriceK += PartPayPrice;
                                                        }
                                                        else
                                                        {
                                                            if (ZuHeTotal == 0) //产品销售价没有维护，是0时导致分母为0，计算出错
                                                            {
                                                                XMOrderInfoProduct.SalesPrice = 0;
                                                            }
                                                            else
                                                            {
                                                                XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice * (decimal)ProductList[i].Saleprice * decimal.Parse(ProductList[i].count.ToString()) / ZuHeTotal, 2);//销售价
                                                            }
                                                            payPriceI += (decimal)XMOrderInfoProduct.SalesPrice;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice, 2);//销售价
                                                        payPriceK += PartPayPrice;
                                                    }

                                                    XMOrderInfoProduct.IsEnable = false;//是否删除
                                                    XMOrderInfoProduct.IsAudit = false;//是否审核
                                                    XMOrderInfoProduct.IsExpedited = false;//是否加急

                                                    XMOrderInfoProduct.ISArrivedLibrary = false;

                                                    if (scProductName == "")
                                                    {
                                                        scProductName = XMOrderInfoProduct.ProductName;
                                                        //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                    }

                                                    if (HozestERPContext.Current.User != null)
                                                    {
                                                        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                    }
                                                    else
                                                    {
                                                        string UserName = "admin";
                                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                        if (customer.Count > 0)
                                                        {
                                                            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                        }
                                                    }

                                                    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                    XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                                    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                                }
                                            }
                                            else
                                            {
                                                var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                                XMOrderInfoProduct.Specifications = "";//尺寸
                                                XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                                XMOrderInfoProduct.ProductName = "无产品";

                                                xmorderInfo.IsAbnormal = true;//是否异常

                                                XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                                if (ModifiedDate != null && ModifiedDate != "")
                                                {
                                                    XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

                                                }
                                                //XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.OrderItemPrice.ToString());//单价/销售价
                                                XMOrderInfoProduct.SalesPrice = decimal.Parse(orderItemPrice) * Convert.ToInt32(num);//销售价
                                                XMOrderInfoProduct.IsEnable = false;//是否删除
                                                XMOrderInfoProduct.IsAudit = false;//是否审核
                                                XMOrderInfoProduct.IsExpedited = false;//是否加急

                                                XMOrderInfoProduct.ISArrivedLibrary = false;

                                                if (scProductName == "")
                                                {
                                                    scProductName = XMOrderInfoProduct.ProductName;
                                                    //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                }

                                                if (HozestERPContext.Current.User != null)
                                                {
                                                    XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                    XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                }
                                                else
                                                {
                                                    string UserName = "admin";
                                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                    if (customer.Count > 0)
                                                    {
                                                        XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                        XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                    }
                                                }

                                                XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                                xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                            }
                                        }
                                        //else
                                        //{
                                        //    //没有商品编码
                                        //    XMOrderInfoProduct.PlatformMerchantCode = ""; //料号（商品编码）
                                        //    XMOrderInfoProduct.Specifications = "";//尺寸
                                        //    XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                        //    XMOrderInfoProduct.ProductName = "无产品";
                                        //    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                        //    if (ModifiedDate != null && ModifiedDate != "")
                                        //    {
                                        //        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

                                        //    }
                                        //    //XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.OrderItemPrice.ToString());//单价/销售价
                                        //    XMOrderInfoProduct.SalesPrice = decimal.Parse(orderItemPrice);//销售价
                                        //    XMOrderInfoProduct.IsEnable = false;//是否删除
                                        //    XMOrderInfoProduct.IsAudit = false;//是否审核
                                        //    XMOrderInfoProduct.IsExpedited = false;//是否加急

                                        //    XMOrderInfoProduct.ISArrivedLibrary = false;

                                        //    if (scProductName == "")
                                        //    {
                                        //        scProductName = XMOrderInfoProduct.ProductName;
                                        //        //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                        //    }

                                        //    if (HozestERPContext.Current.User != null)
                                        //    {
                                        //        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                        //        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;
                                        //    }
                                        //    else
                                        //    {
                                        //        string UserName = "admin";
                                        //        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);
                                        //        if (customer.Count > 0)
                                        //        {
                                        //            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                        //            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                        //        }
                                        //    }
                                        //    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                        //    XMOrderInfoProduct.UpdateDate = DateTime.Now;
                                        //    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                        //    xmorderInfo.IsAbnormal = true;//是否异常
                                        //}
                                    }
                                }

                                //判断是否刷单
                                orderstatus = "ORDER_PAYED,ORDER_TRUNED_TO_DO,ORDER_OUT_OF_WH,ORDER_RECEIVED,ORDER_FINISH";
                                if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                                {
                                    xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), ordercode, xmorderInfo.Remark, orderinfo.MerchantRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售金额：订单支付金额
                                }

                                #region  保存数据

                                IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
                                InsertCount++;

                                //新建发票
                                if (xmorderInfo.IsInvoiced != null && xmorderInfo.IsInvoiced == true)
                                {
                                    ToAddXMInvoiceInfo(xmorderInfo,719,"","","","","");
                                }

                                #endregion
                            }
                            #endregion

                            #region 修改

                            else
                            {
                                string Remarks = orderinfo.DeliveryRemark;
                                string CustomerServiceRemark = orderinfo.MerchantRemark;
                                string Modified = orderinfo.UpdateTime.ToString();
                                string Memo = Remarks + CustomerServiceRemark;//SellerMemo.Substring(SellerMemo.LastIndexOf("'") + 1).ToLower();
                                string RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;//旧备注
                                string StatusValue = xmorderInfo.OrderStatus.Trim();//旧状态
                                decimal FactoryPrice = 0;

                                if (orderinfo.OrderNeedInvoice != 0)//发票需要情况（0:不需要，1:旧版普通，2:新版普通，3:增值税发票）
                                {
                                    xmorderInfo.IsInvoiced = true;
                                    xmorderInfo.InvoiceHead = orderinfo.InvoiceTitle;//发票抬头
                                    xmorderInfo.InvoiceNo = orderinfo.InvoiceContent;//发票内容
                                    xmorderInfo.InvoicePrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收款(产品金额-促销活动立减金额-商家抵用卷金额+运费)
                                }
                                xmorderInfo.DistributeMethod = orderinfo.DeliverySupplierId.ToString();//配送方式({10001:普通快递、20001:EMS、30001:供应商直送、40001:自提、30002:店中店商家直送} )
                                xmorderInfo.DistributePrice = decimal.Parse(orderinfo.OrderDeliveryFee.ToString());//运费（一号店）
                                xmorderInfo.ProductPrice = Decimal.Parse(orderinfo.ProductAmount.ToString());//产品总额
                                xmorderInfo.OrderPrice = Decimal.Parse(orderinfo.OrderAmount.ToString());//订单金额
                                Decimal? promotionprice = 0;//优惠金额
                                promotionprice = xmorderInfo.ProductPrice + xmorderInfo.DistributePrice - xmorderInfo.OrderPrice;
                                xmorderInfo.OrderPromotion = promotionprice;//订单优惠金额
                                Decimal? taxes = 0;//折扣
                                taxes = (xmorderInfo.OrderPrice - promotionprice) / xmorderInfo.OrderPrice;
                                xmorderInfo.Taxes = taxes;
                                xmorderInfo.ReceivablePrice = Decimal.Parse(orderinfo.OrderAmount.ToString());//应收金额
                                xmorderInfo.PayPrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收金额

                                //更新最新备注信息 与原数据库备注信息 进行比较 
                                if (Memo != RemarksValue || StatusValue != orderinfo.OrderStatus.ToString().Trim())
                                {
                                    #region 记录操作

                                    int UpsatorID = 0;
                                    if (HozestERPContext.Current.User != null)
                                    {
                                        UpsatorID = HozestERPContext.Current.User.CustomerID;
                                    }
                                    else
                                    {
                                        string UserName = "admin";
                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                        if (customer.Count > 0)
                                        {
                                            UpsatorID = customer[0].CustomerID;
                                        }
                                    }

                                    if (Modified != null && Modified != "")
                                    {

                                        if (xmorderInfo.OrderInfoModified != Convert.ToDateTime(Modified))
                                        {
                                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                            record.OrderInfoId = xmorderInfo.ID;
                                            record.PropertyName = "OrderInfoModified";
                                            record.OldValue = System.Convert.ToString(xmorderInfo.OrderInfoModified);
                                            record.NewValue = Modified.ToString().Trim();
                                            record.UpdatorID = UpsatorID;
                                            record.UpdateTime = DateTime.Now;
                                            IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record);//base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                                        }
                                    }

                                    if (Remarks != null && Remarks != "")
                                    {
                                        if (xmorderInfo.Remark != Remarks)
                                        {
                                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                            record.OrderInfoId = xmorderInfo.ID;
                                            record.PropertyName = "Remarks";
                                            record.OldValue = xmorderInfo.Remark;
                                            record.NewValue = Remarks;
                                            record.UpdatorID = UpsatorID;
                                            record.UpdateTime = DateTime.Now;
                                            IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                        }
                                    }
                                    if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                    {
                                        if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
                                        {
                                            var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, CustomerServiceRemark);
                                            if (RecordExist == null || RecordExist.Count == 0)
                                            {
                                                XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                                record.OrderInfoId = xmorderInfo.ID;
                                                record.PropertyName = "CustomerServiceRemark";
                                                record.OldValue = xmorderInfo.CustomerServiceRemark;
                                                record.NewValue = CustomerServiceRemark;
                                                record.UpdatorID = UpsatorID;
                                                record.UpdateTime = DateTime.Now;
                                                IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                            }
                                        }
                                    }
                                    if (xmorderInfo.OrderStatus != orderinfo.OrderStatus.ToString())
                                    {
                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                        record.OrderInfoId = xmorderInfo.ID;
                                        record.PropertyName = "OrderStatus";
                                        record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                                        record.NewValue = System.Convert.ToString(orderinfo.OrderStatus);
                                        record.UpdatorID = UpsatorID;

                                        if (Modified != null && Modified != "")
                                        {
                                            record.UpdateTime = DateTime.Parse(Modified);
                                        }
                                        else
                                        {
                                            record.UpdateTime = DateTime.Now;
                                        }
                                        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                    }

                                    #endregion
                                }
                                xmorderInfo.OrderInfoModified = DateTime.Parse(orderinfo.UpdateTime);//更新时间
                                xmorderInfo.OrderStatus = orderinfo.OrderStatus.ToString();//
                                if (orderinfo.OrderPaymentConfirmDate != "" && orderinfo.OrderPaymentConfirmDate != null)
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Parse(orderinfo.OrderPaymentConfirmDate);//付款时间
                                    }
                                }
                                if (orderinfo.UpdateTime != null && orderinfo.UpdateTime != "" && orderinfo.UpdateTime != "0001-01-01 00:00:00")
                                {
                                    if (orderinfo.OrderStatus.ToString() == "ORDER_OUT_OF_WH")
                                    {
                                        if (xmorderInfo.DeliveryTime == null)
                                        {
                                            xmorderInfo.DeliveryTime = Convert.ToDateTime(orderinfo.UpdateTime);// DateTime.Parse(PayTime.ToString().Trim()).AddDays(+15);//发货时间
                                        }
                                        //付款时间为空 则为发货时间
                                        if (xmorderInfo.PayDate == null)
                                        {
                                            xmorderInfo.PayDate = DateTime.Parse(orderinfo.UpdateTime);//付款时间
                                        }
                                    }
                                }
                                if (orderinfo.ReceiveDate != null && orderinfo.ReceiveDate != "" && orderinfo.ReceiveDate != "0001-01-01 00:00:00")
                                {
                                    if (xmorderInfo.CompletionTime == null)
                                    {
                                        xmorderInfo.CompletionTime = DateTime.Parse(orderinfo.ReceiveDate);
                                        AutoSingleRow(orderinfo.OrderCode);
                                    }
                                    //发货时间为空 则为完成时间
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = Convert.ToDateTime(orderinfo.ReceiveDate);// DateTime.Parse(PayTime.ToString().Trim()).AddDays(+15);//发货时间
                                    }
                                    //付款时间为空 则为完成时间
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Parse(orderinfo.ReceiveDate);//付款时间
                                    }
                                }

                                xmorderInfo.WantID = orderinfo.EndUserId.ToString();//用户id
                                //xmorderInfo.FullName = orderinfo.GoodReceiverName;//收货人
                                //xmorderInfo.Province = orderinfo.GoodReceiverProvince;//省
                                //xmorderInfo.City = orderinfo.GoodReceiverCity;//市
                                //xmorderInfo.County = orderinfo.GoodReceiverCounty;//区县
                                //xmorderInfo.DeliveryAddress = orderinfo.GoodReceiverAddress;//收货地址
                                //xmorderInfo.Mobile = orderinfo.GoodReceiverMoblie;//手机
                                //xmorderInfo.Tel = orderinfo.GoodReceiverPhone;//电话
                                xmorderInfo.SourceType = "同步";//数据来源
                                xmorderInfo.FinancialAudit = true;//财务审核
                                xmorderInfo.IsOurOrder = true;//是我们的订单

                                //更改收货地址
                                //if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
                                //{
                                //    string csr = CustomerServiceRemark + "$";
                                //    string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                                //    string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");

                                //    xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                                //}

                                xmorderInfo.Remark = orderinfo.DeliveryRemark;//发货备注
                                //xmorderInfo.CustomerServiceRemark = orderinfo.MerchantRemark;//卖家备（修改）

                                string MerchantRemark = orderinfo.MerchantRemark;

                                #region 赠品、返现
                                //if (orderinfo.OrderStatus.ToString() == "ORDER_PAYED" || orderinfo.OrderStatus.ToString() == "ORDER_TRUNED_TO_DO"
                                //    || orderinfo.OrderStatus.ToString() == "ORDER_OUT_OF_WH" || orderinfo.OrderStatus.ToString() == "ORDER_RECEIVED"
                                //    || orderinfo.OrderStatus.ToString() == "ORDER_FINISH")//待审核订单（已支付/未处理）
                                //{
                                //    if (orderinfo.OrderCreateTime.ToString().Trim() != null && orderinfo.OrderCreateTime.ToString().Trim() != "")
                                //    {
                                //        if (DateTime.Parse(orderinfo.OrderCreateTime.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                //        {
                                //            if (orderinfo.MerchantRemark != null && orderinfo.MerchantRemark != "")
                                //            {
                                //                string BuyerName = orderinfo.GoodReceiverName;//收货人名称 
                                //                string WantNo = orderinfo.EndUserId.ToString();//旺旺号 
                                //                string OrderCode = orderinfo.OrderCode;//订单号 
                                //                string paramMessage = string.Empty;

                                //                if (orderinfo.MerchantRemark.IndexOf("赠品") > -1 || orderinfo.MerchantRemark.IndexOf("返现") > -1)
                                //                {
                                //                    #region 赠品
                                //                    if (orderinfo.MerchantRemark.IndexOf("赠品") > -1)
                                //                    {
                                //                        //返回赠品条数
                                //                        int PremiumsInst = XMPremiumsInst(orderinfo.MerchantRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage);

                                //                    }
                                //                    #endregion

                                //                    #region 返现
                                //                    if (orderinfo.MerchantRemark.IndexOf("返现") > -1)
                                //                    {

                                //                      //返回返现条数
                                //                       int CashBackApplicationInstCount = CashBackApplicationInst(orderinfo.MerchantRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);


                                //                    }

                                //                    #endregion
                                //                }
                                //            }

                                //        }
                                //    }
                                //}
                                #endregion

                                xmorderInfo.PayPrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收金额

                                scSalePrice = Decimal.Parse(orderinfo.RealAmount.ToString());

                                if (HozestERPContext.Current.User != null)
                                {
                                    xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                                }
                                else
                                {
                                    string UserName = "admin";
                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                    if (customer.Count > 0)
                                    {
                                        xmorderInfo.UpdateID = customer[0].CustomerID;
                                    }
                                }

                                xmorderInfo.UpdateDate = DateTime.Now;

                                string ModifiedDate = orderinfo.UpdateTime;//订单修改时间
                                string scProductName = "";//商品名称（刷单）
                                //decimal scSalePrice = 0;//销售价(刷单)

                                #region 注释的订单详细信息-产品明细
                                //for (int k = 0; k < repSupplierOrders_order.OrderInfo.OrderItemList.OrderItem.Count; k++)
                                //{
                                //    //产品详情
                                //    var productinfo = repSupplierOrders_order.OrderInfo.OrderItemList.OrderItem[k];

                                //    if (productinfo != null)
                                //    {
                                //        string OuterSkuId = productinfo.OuterId;//商品编码
                                //        int? num = productinfo.OrderItemNum;//数量
                                //        string orderItemPrice = productinfo.OrderItemPrice == null ? "0" : productinfo.OrderItemPrice.ToString();//单价
                                //        if (OuterSkuId != "" && OuterSkuId != null)
                                //        {
                                //            //商家编码查询从表信息。
                                //            var ProductList2 = IoC.Resolve<IXMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);
                                //            //var XMOrderInfoProduct = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).SingleOrDefault();

                                //            ////2015-7-28新增
                                //            //if (ProductList2.Count == 0)
                                //            //{
                                //            //    ProductList2 = GetXMProductListByzuheCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                //            //}

                                //            var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                                //            XMOrderInfoProductDetails XMOrderInfoProduct = null;

                                //            if (OrderyReportProductList.Count == 0)
                                //            {
                                //                #region 订单明细新增
                                //                XMOrderInfoProduct = new XMOrderInfoProductDetails();

                                //                #region 商品信息
                                //                if (ProductList2.Count > 0)
                                //                {
                                //                    foreach (var ProductList in ProductList2)
                                //                    {
                                //                        //商品关联主表信息
                                //                        //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                //                        if (ProductList.TDateTimeStart != null && ProductList.TDateTimeEnd != null && ModifiedDate != null && ModifiedDate != "" && ModifiedDate != "0001-01-01 00:00:00")
                                //                        {
                                //                            if (Convert.ToDateTime(ModifiedDate) >= ProductList.TDateTimeStart && Convert.ToDateTime(ModifiedDate) <= ProductList.TDateTimeEnd)
                                //                            {
                                //                                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                //                                XMOrderInfoProduct.Specifications = ProductList.Specifications;//尺寸
                                //                                XMOrderInfoProduct.FactoryPrice = ProductList.TCostprice * Convert.ToInt32(num);//出厂价
                                //                                XMOrderInfoProduct.ProductName = ProductList.ProductName;//产品名称 
                                //                                XMOrderInfoProduct.TCostprice = ProductList.TCostprice;
                                //                            }
                                //                            else
                                //                            {
                                //                                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                //                                XMOrderInfoProduct.Specifications = ProductList.Specifications;//尺寸
                                //                                XMOrderInfoProduct.FactoryPrice = ProductList.Costprice * num;//出厂价*数量
                                //                                XMOrderInfoProduct.ProductName = ProductList.ProductName;//产品名称 
                                //                                XMOrderInfoProduct.TCostprice = ProductList.Costprice;
                                //                            }

                                //                        }
                                //                        else
                                //                        {
                                //                            XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                //                            XMOrderInfoProduct.Specifications = ProductList.Specifications;//尺寸
                                //                            XMOrderInfoProduct.FactoryPrice = ProductList.Costprice * num;//出厂价*数量
                                //                            XMOrderInfoProduct.ProductName = ProductList.ProductName;//产品名称 
                                //                            XMOrderInfoProduct.TCostprice = ProductList.Costprice;
                                //                        }
                                //                #endregion

                                //                        XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                //                        if (ModifiedDate != null && ModifiedDate != "")
                                //                        {
                                //                            XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

                                //                        }
                                //                        //XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.OrderItemPrice.ToString());//单价/销售价
                                //                        XMOrderInfoProduct.SalesPrice = decimal.Parse(orderItemPrice);//销售价
                                //                        XMOrderInfoProduct.IsEnable = false;//是否删除
                                //                        XMOrderInfoProduct.IsAudit = false;//是否审核
                                //                        XMOrderInfoProduct.IsExpedited = false;//是否加急

                                //                        XMOrderInfoProduct.ISArrivedLibrary = false;

                                //                        if (scProductName == "")
                                //                        {
                                //                            scProductName = XMOrderInfoProduct.ProductName;
                                //                            //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                //                        }

                                //                        if (HozestERPContext.Current.User != null)
                                //                        {
                                //                            XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                //                            XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                //                        }
                                //                        else
                                //                        {
                                //                            string UserName = "admin";
                                //                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                //                            if (customer.Count > 0)
                                //                            {
                                //                                XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                //                                XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                //                            }
                                //                        }

                                //                        XMOrderInfoProduct.CreateDate = DateTime.Now;
                                //                        XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                //                        //xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                //                    }
                                //                }
                                //                else
                                //                {
                                //                    XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                //                    XMOrderInfoProduct.Specifications = "";//尺寸
                                //                    XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                //                    XMOrderInfoProduct.ProductName = "无产品";

                                //                    xmorderInfo.IsAbnormal = true;//是否异常

                                //                    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                //                    if (ModifiedDate != null && ModifiedDate != "")
                                //                    {
                                //                        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

                                //                    }
                                //                    //XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.OrderItemPrice.ToString());//单价/销售价
                                //                    XMOrderInfoProduct.SalesPrice = decimal.Parse(orderItemPrice);//销售价
                                //                    XMOrderInfoProduct.IsEnable = false;//是否删除
                                //                    XMOrderInfoProduct.IsAudit = false;//是否审核
                                //                    XMOrderInfoProduct.IsExpedited = false;//是否加急

                                //                    XMOrderInfoProduct.ISArrivedLibrary = false;

                                //                    if (scProductName == "")
                                //                    {
                                //                        scProductName = XMOrderInfoProduct.ProductName;
                                //                        //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                //                    }

                                //                    if (HozestERPContext.Current.User != null)
                                //                    {
                                //                        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                //                        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                //                    }
                                //                    else
                                //                    {
                                //                        string UserName = "admin";
                                //                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                //                        if (customer.Count > 0)
                                //                        {
                                //                            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                //                            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                //                        }
                                //                    }

                                //                    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                //                    XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                //                    //xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                //                }
                                //                #endregion
                                //            }
                                //            else
                                //            {
                                //                XMOrderInfoProduct = OrderyReportProductList[0];

                                //                #region 订单明细修改
                                //                if (ProductList2.Count > 0)
                                //                {
                                //                    foreach (var ProductList in ProductList2)
                                //                    {
                                //                        //商品关联主表信息
                                //                        //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                //                        if (ProductList.TDateTimeStart != null && ProductList.TDateTimeEnd != null && ModifiedDate != null && ModifiedDate != "" && ModifiedDate != "0001-01-01 00:00:00")
                                //                        {
                                //                            if (Convert.ToDateTime(ModifiedDate) >= ProductList.TDateTimeStart && Convert.ToDateTime(ModifiedDate) <= ProductList.TDateTimeEnd)
                                //                            {

                                //                                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                //                                XMOrderInfoProduct.Specifications = ProductList.Specifications;//尺寸
                                //                                XMOrderInfoProduct.FactoryPrice = ProductList.TCostprice * Convert.ToInt32(num);//出厂价
                                //                                XMOrderInfoProduct.ProductName = ProductList.ProductName;//产品名称 
                                //                                XMOrderInfoProduct.TCostprice = ProductList.TCostprice;
                                //                            }
                                //                            else
                                //                            {
                                //                                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                //                                XMOrderInfoProduct.Specifications = ProductList.Specifications;//尺寸
                                //                                XMOrderInfoProduct.FactoryPrice = ProductList.Costprice * num;//出厂价*数量
                                //                                XMOrderInfoProduct.ProductName = ProductList.ProductName;//产品名称 
                                //                                XMOrderInfoProduct.TCostprice = ProductList.Costprice;
                                //                            }

                                //                        }
                                //                        else
                                //                        {
                                //                            XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                //                            XMOrderInfoProduct.Specifications = ProductList.Specifications;//尺寸
                                //                            XMOrderInfoProduct.FactoryPrice = ProductList.Costprice * num;//出厂价*数量
                                //                            XMOrderInfoProduct.ProductName = ProductList.ProductName;//产品名称 
                                //                            XMOrderInfoProduct.TCostprice = ProductList.Costprice;
                                //                        }
                                //                        XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                //                        if (ModifiedDate != null && ModifiedDate != "")
                                //                        {
                                //                            XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

                                //                        }
                                //                        //XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.OrderItemPrice.ToString());//单价/销售价
                                //                        XMOrderInfoProduct.SalesPrice = decimal.Parse(orderItemPrice);//销售价
                                //                        if (scProductName == "")
                                //                        {
                                //                            scProductName = XMOrderInfoProduct.ProductName;
                                //                            //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                //                        }

                                //                        if (HozestERPContext.Current.User != null)
                                //                        {
                                //                            XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                //                        }
                                //                        else
                                //                        {
                                //                            string UserName = "admin";
                                //                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                //                            if (customer.Count > 0)
                                //                            {
                                //                                XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                //                            }
                                //                        }

                                //                        XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                //                        //IoC.Resolve<IXMOrderInfoProductDetailsService>().UpdateXMOrderInfoProductDetails(XMOrderInfoProduct);
                                //                    }
                                //                }
                                //                else
                                //                {
                                //                    XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                //                    XMOrderInfoProduct.Specifications = "";//尺寸
                                //                    XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                //                    XMOrderInfoProduct.ProductName = "无产品";

                                //                    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                //                    if (ModifiedDate != null && ModifiedDate != "")
                                //                    {
                                //                        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

                                //                    }
                                //                    //XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.OrderItemPrice.ToString());//单价/销售价
                                //                    XMOrderInfoProduct.SalesPrice = decimal.Parse(orderItemPrice);//销售价
                                //                    if (scProductName == "")
                                //                    {
                                //                        scProductName = XMOrderInfoProduct.ProductName;
                                //                        //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                //                    }

                                //                    if (HozestERPContext.Current.User != null)
                                //                    {
                                //                        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;
                                //                    }
                                //                    else
                                //                    {
                                //                        string UserName = "admin";
                                //                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                //                        if (customer.Count > 0)
                                //                        {
                                //                            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                //                        }
                                //                    }
                                //                    XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                //                    //IoC.Resolve<IXMOrderInfoProductDetailsService>().UpdateXMOrderInfoProductDetails(XMOrderInfoProduct);
                                //                }
                                //                #endregion
                                //            }
                                //        }
                                //    }
                                //}
                                #endregion

                                //判断是否刷单
                                orderstatus = "ORDER_PAYED,ORDER_TRUNED_TO_DO,ORDER_OUT_OF_WH,ORDER_RECEIVED,ORDER_FINISH";
                                if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                                {
                                    xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), ordercode, xmorderInfo.Remark, orderinfo.MerchantRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                                }

                                #region  保存数据

                                IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
                                UpdateCount++;

                                #endregion
                            }

                            #endregion
                        }
                    }
                }
            }
        }

        /// <summary>
        /// yhd.order.merchant.remark.update 更新单个订单的卖家备注信息(一号店)
        /// </summary>
        /// <param name="ordercode">订单号</param>
        /// <param name="Remark">备注</param>
        /// <param name="xMOrderInfoApp"></param>
        public int OrderMerchantRemarkUpdate(string ordercode, string Remark, XMOrderInfoApp xMOrderInfoApp)
        {
            int updateCount = 0;//更新成功记录数 
            if (ordercode != "" && Remark != "")
            {
                //根据订单号获取订单详情
                Yhd.Api.YhdClient client_order = new Yhd.Api.YhdClient(xMOrderInfoApp.ServerUrl, xMOrderInfoApp.AppKey, xMOrderInfoApp.AppSecret);
                Yhd.Api.Request.OrderMerchantRemarkUpdateRequest reqSupplierOrders_order = new Yhd.Api.Request.OrderMerchantRemarkUpdateRequest();
                reqSupplierOrders_order.OrderCode = ordercode;
                reqSupplierOrders_order.Remark = Remark;
                Yhd.Api.Response.OrderMerchantRemarkUpdateResponse repSupplierOrders_order = client_order.Execute(reqSupplierOrders_order, xMOrderInfoApp.AccessToken);

                if (repSupplierOrders_order != null)
                {
                    updateCount = repSupplierOrders_order.UpdateCount.Value;
                }
            }
            return updateCount;
        }

        /// <summary>
        /// 根据订单号，抓取数据 苏宁易购 suning.custom.order.get
        /// </summary>
        /// <param name="ordercode"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        public void getOrderSuning(string ordercode, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            if (xMorderInfoApp != null && ordercode != "")
            {
                //根据订单号查询订单信息
                suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrderGetRequest request = new suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrderGetRequest();
                request.orderCode = ordercode;
                //开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
                //SuningLogger.IsLogDebug = true;
                suning::suning_api_sdk.ISuningClient client = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
                suning::suning_api_sdk.BizResponse.CustomTransactionResponse.OrderGetResponse response = client.Execute(request);
                if (response != null)
                {
                    if (response.orderDetail != null)
                    {
                        if (response != null && response.orderDetail.Count > 0)
                        {
                            decimal scSalePrice = 0;//销售价(刷单)

                            //订单编号查询订单
                            var xmorderInfo = IoC.Resolve<IXMOrderInfoAPIService>().GetXMOrderInfoByOrderCode(ordercode);
                            //获取的订单商品
                            var productInfo = response.orderDetail.FirstOrDefault();

                            #region 新增
                            if (xmorderInfo == null)
                            {
                                xmorderInfo = new XMOrderInfo();
                                xmorderInfo.NickID = xMorderInfoApp.NickId;//城市爱情
                                xmorderInfo.PlatformTypeId = xMorderInfoApp.PlatformTypeId;//苏宁易购
                                xmorderInfo.OrderInfoCreateDate = DateTime.Parse(response.orderSaleTime);//创单时间
                                xmorderInfo.OrderCode = response.orderCode;//订单编号
                                xmorderInfo.OrderStatus = response.orderTotalStatus;//订单状态 10待发货、20已发货、21部分发货、30交易成功、40交易关闭

                                if (response.orderTotalStatus == "10")
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                    }
                                }
                                if (response.orderTotalStatus == "20")
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                    }
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                    }
                                }

                                if (response.orderTotalStatus == "30")
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                    }
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                    }
                                    if (xmorderInfo.CompletionTime == null)
                                    {
                                        xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                        //查询发票管理 有未排单 未开票 的发票记录自动排单
                                        AutoSingleRow(response.orderCode);
                                    }
                                }

                                xmorderInfo.WantID = response.userName;//用户id
                                xmorderInfo.FullName = response.customerName;//收货人
                                xmorderInfo.Province = response.provinceName;//省
                                xmorderInfo.City = response.cityName;//市
                                xmorderInfo.County = response.districtName;//区县
                                xmorderInfo.DeliveryAddress = response.customerAddress;//收货地址
                                xmorderInfo.Mobile = response.mobNum;//手机
                                xmorderInfo.Tel = response.mobNum;//电话
                                xmorderInfo.SourceType = "同步";//数据来源
                                xmorderInfo.FinancialAudit = true;//财务审核
                                xmorderInfo.Remark = response.buyerOrdRemark;//买家备注
                                xmorderInfo.CustomerServiceRemark = response.sellerOrdRemark;//卖家备注（新增）

                                string CustomerServiceRemark = response.sellerOrdRemark;

                                #region 赠品、返现  新增订单完成则增加赠品返现信息
                                //response.orderTotalStatus.ToString() == "10" || response.orderTotalStatus.ToString() == "20"
                                //    || response.orderTotalStatus.ToString() == "21" || 
                                //if (response.orderTotalStatus.ToString() == "30")//10待发货
                                //{
                                if (response.orderSaleTime.ToString().Trim() != null && response.orderSaleTime.ToString().Trim() != "")
                                {
                                    if (DateTime.Parse(response.orderSaleTime.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                    {

                                        if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                        {
                                            string BuyerName = response.customerName;//收货人名称 
                                            string WantNo = response.userName;//旺旺号 
                                            string OrderCode = response.orderCode;//订单号 
                                            string paramMessage = string.Empty;

                                            if (CustomerServiceRemark.IndexOf("/赠品") > -1 || CustomerServiceRemark.IndexOf("/退差价") > -1)
                                            {
                                                #region 赠品
                                                if (CustomerServiceRemark.IndexOf("/赠品") > -1)
                                                {
                                                    //返回赠品条数
                                                    int PremiumsInst = XMPremiumsInst(CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, xMorderInfoApp.PlatformTypeId.Value, xMorderInfoApp.NickId.Value);

                                                }
                                                #endregion

                                                #region 返现
                                                if (CustomerServiceRemark.IndexOf("/退差价") > -1)
                                                {

                                                    //返回返现条数
                                                    int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                                }

                                                #endregion
                                            }
                                        }
                                    }
                                }

                                //}
                                #endregion

                                xmorderInfo.IsEnable = false;//是否删除
                                xmorderInfo.IsCashBack = false;//是否返现
                                xmorderInfo.IsSentGifts = false;//是否已发赠品 
                                xmorderInfo.IsEvaluate = false;//是否赔付
                                xmorderInfo.IsOurOrder = true;//是我们的订单

                                if (HozestERPContext.Current.User != null)
                                {
                                    xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                                    xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                                }
                                else
                                {
                                    string UserName = "admin";
                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                    if (customer.Count > 0)
                                    {
                                        xmorderInfo.CreateID = customer[0].CustomerID;
                                        xmorderInfo.UpdateID = customer[0].CustomerID;
                                    }
                                }

                                xmorderInfo.CreateDate = DateTime.Now;
                                xmorderInfo.UpdateDate = DateTime.Now;

                                decimal orderprice = 0;//订单金额
                                decimal transportprice = 0;//运费
                                decimal coupontotalMoney = 0;//优惠卷金额
                                decimal vouchertotalMoney = 0;//优惠单金额


                                string scProductName = "";//商品名称（刷单）
                                decimal priceTotal = 0;//总商品金额
                                decimal PlatformDiscountAmount = 0;//平台优惠金额
                                decimal PayAmountTotal = 0;//总支付金额
                                for (int k = 0; k < response.orderDetail.Count; k++)
                                {
                                    decimal PriceNum = decimal.Parse(response.orderDetail[k].unitPrice == null ? "0" : (response.orderDetail[k].unitPrice == "" ? "0" : response.orderDetail[k].unitPrice)) * decimal.Parse(response.orderDetail[k].saleNum);
                                    priceTotal += PriceNum;

                                    var productinfo = response.orderDetail[k];
                                    orderprice += (decimal.Parse(productinfo.unitPrice) * decimal.Parse(productinfo.saleNum));//商品单价*数量
                                    transportprice += decimal.Parse(productinfo.transportFee);//运费
                                    coupontotalMoney += decimal.Parse(productinfo.coupontotalMoney);//优惠卷金额
                                    decimal changeNum = 0;
                                    if (decimal.TryParse(productinfo.vouchertotalMoney, out changeNum))
                                    {
                                        vouchertotalMoney += decimal.Parse(productinfo.vouchertotalMoney);//优惠单金额
                                    }
                                    else
                                    {
                                        vouchertotalMoney = 0;
                                    }

                                    PayAmountTotal += response.orderDetail[k].payAmount == "" ? 0 : decimal.Parse(response.orderDetail[k].payAmount);
                                    //支付金额+平台优惠金额
                                    if (response.orderDetail[k].paymentList != null && response.orderDetail[k].paymentList.Count > 0)
                                    {
                                        foreach (var Item in response.orderDetail[k].paymentList)
                                        {
                                            //6998-联合0元购券、7998-0元购券，8012-积分抵现，10001-云券，10002-限品类云券、10004-易券、10005-限品类易券、10009-无敌券,平台优惠券
                                            string[] arr = { "6998", "7998", "8012", "10001", "10002", "10004", "10005", "10009" };
                                            if (arr.Contains(Item.banktypecode))
                                            {
                                                PlatformDiscountAmount += decimal.Parse(Item.payamount);
                                            }
                                        }
                                    }
                                }
                                decimal payPriceK = 0;//已赋值付款金额

                                xmorderInfo.PayPrice = PayAmountTotal + PlatformDiscountAmount;//orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额

                                string ModifiedDate = xmorderInfo.OrderInfoCreateDate.ToString();
                                xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();//初始化
                                #region 明细
                                for (int k = 0; k < response.orderDetail.Count; k++)
                                {
                                    var productinfo = response.orderDetail[k];

                                    //orderprice += (decimal.Parse(productinfo.unitPrice) * decimal.Parse(productinfo.saleNum));//商品单价*数量
                                    //transportprice += decimal.Parse(productinfo.transportFee);//运费
                                    //coupontotalMoney += decimal.Parse(productinfo.coupontotalMoney);//优惠卷金额
                                    //decimal changeNum = 0;
                                    //if (decimal.TryParse(productinfo.vouchertotalMoney, out changeNum))
                                    //{
                                    //    vouchertotalMoney += decimal.Parse(productinfo.vouchertotalMoney);//优惠单金额
                                    //}
                                    //else
                                    //{
                                    //    vouchertotalMoney = 0;
                                    //}

                                    ////获取产品详情
                                    //suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest requestProduct = new suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest();
                                    //requestProduct.productCode = productinfo.itemCode;//产品编号
                                    ////开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
                                    ////SuningLogger.IsLogDebug = true;
                                    //suning::suning_api_sdk.ISuningClient clientProduct = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
                                    //suning::suning_api_sdk.BizResponse.CustomItemResponse.ItemGetResponse responseProduct = clientProduct.Execute(requestProduct);
                                    //产品详情
                                    if (productinfo != null)
                                    {
                                        string OuterSkuId = productinfo.productCode;//商品编码
                                        int? num = int.Parse(productinfo.saleNum.Substring(0, productinfo.saleNum.IndexOf(".")));//数量
                                        string unitPrice = productinfo.unitPrice;//单价
                                        //XMOrderInfoProductDetails XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                        if (OuterSkuId != "" && OuterSkuId != null)
                                        {
                                            //商家编码查询从表信息。
                                            var ProductList = IoC.Resolve<IXMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);
                                            decimal a = 0;
                                            //decimal? tj = 0;
                                            bool IsZuHe = false;
                                            if (ProductList.Count == 0)
                                            {
                                                ProductList = GetXMProductListByzuheCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                                a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                                if (ProductList.Count > 0)
                                                {
                                                    IsZuHe = true;
                                                }
                                            }
                                            //var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                                            //XMOrderInfoProductDetails XMOrderInfoProduct = null;

                                            //if (OrderyReportProductList.Count == 0)
                                            //{
                                            //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                            //}
                                            //else
                                            //{

                                            //    XMOrderInfoProduct = OrderyReportProductList[0];
                                            //}

                                            if (ProductList.Count > 0)
                                            {
                                                decimal payPriceI = 0;//组合已赋值付款金额
                                                decimal ZuHeTotal = 0;
                                                for (int i = 0; i < ProductList.Count; i++)
                                                {
                                                    decimal ZuHeNum = (decimal)ProductList[i].Saleprice * decimal.Parse(ProductList[i].count.ToString());
                                                    ZuHeTotal += ZuHeNum;
                                                }
                                                for (int i = 0; i < ProductList.Count; i++)
                                                {
                                                    var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                    //商品关联主表信息
                                                    //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                                    if (ProductList[i].TDateTimeStart != null && ProductList[i].TDateTimeEnd != null && ModifiedDate != null && ModifiedDate != "" && ModifiedDate != "0001-01-01 00:00:00")
                                                    {
                                                        if (Convert.ToDateTime(ModifiedDate) >= ProductList[i].TDateTimeStart && Convert.ToDateTime(ModifiedDate) <= ProductList[i].TDateTimeEnd)
                                                        {
                                                            //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                                                            XMOrderInfoProduct.Specifications = ProductList[i].Specifications;//尺寸
                                                            XMOrderInfoProduct.FactoryPrice = ProductList[i].Costprice * num * ProductList[i].count;//出厂价*数量
                                                            XMOrderInfoProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                                            XMOrderInfoProduct.TCostprice = ProductList[i].TCostprice;
                                                            if (!string.IsNullOrEmpty(ProductList[i].TManufacturersCode))
                                                            {
                                                                XMOrderInfoProduct.TManufacturersCode = ProductList[i].TManufacturersCode;
                                                            }
                                                            else
                                                            {
                                                                XMOrderInfoProduct.TManufacturersCode = ProductList[i].ManufacturersCode;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                                                            XMOrderInfoProduct.Specifications = ProductList[i].Specifications;//尺寸
                                                            XMOrderInfoProduct.FactoryPrice = ProductList[i].Costprice * num * ProductList[i].count;//出厂价*数量
                                                            XMOrderInfoProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                                            XMOrderInfoProduct.TCostprice = ProductList[i].Costprice;
                                                            XMOrderInfoProduct.TManufacturersCode = ProductList[i].ManufacturersCode;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                        XMOrderInfoProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                                                        XMOrderInfoProduct.Specifications = ProductList[i].Specifications;//尺寸
                                                        XMOrderInfoProduct.FactoryPrice = ProductList[i].Costprice * num * ProductList[i].count;//出厂价*数量
                                                        XMOrderInfoProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                                        XMOrderInfoProduct.TCostprice = ProductList[i].Costprice;
                                                        XMOrderInfoProduct.TManufacturersCode = ProductList[i].ManufacturersCode;
                                                    }
                                                    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num) * ProductList[i].count;//数量
                                                    if (ModifiedDate != null && ModifiedDate != "")
                                                    {
                                                        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间
                                                    }
                                                    //XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.unitPrice.ToString());//单价/销售价
                                                    //if (i < ProductList.Count - 1)
                                                    //{
                                                    //    XMOrderInfoProduct.SalesPrice = Math.Round(decimal.Parse(((ProductList[i].Costprice * ProductList[i].count * num / a) * decimal.Parse(productinfo.unitPrice.ToString())).ToString()), 2);//销售价
                                                    //    tj = tj + XMOrderInfoProduct.SalesPrice;
                                                    //}
                                                    //else
                                                    //{
                                                    //    XMOrderInfoProduct.SalesPrice = decimal.Parse(productinfo.unitPrice.ToString()) - tj;//销售价
                                                    //}
                                                    decimal PartPayPrice = 0;
                                                    if (k == response.orderDetail.Count - 1)
                                                    {
                                                        PartPayPrice = (decimal)xmorderInfo.PayPrice - payPriceK;
                                                    }
                                                    else
                                                    {
                                                        PartPayPrice = Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(productinfo.unitPrice) * decimal.Parse(productinfo.saleNum) / priceTotal, 2);
                                                        //payPriceK += PartPayPrice;
                                                    }
                                                    if (IsZuHe)
                                                    {
                                                        if (i == ProductList.Count - 1)
                                                        {
                                                            XMOrderInfoProduct.SalesPrice = PartPayPrice - payPriceI;
                                                            payPriceK += PartPayPrice;
                                                        }
                                                        else
                                                        {
                                                            if (ZuHeTotal == 0) //产品销售价没有维护，是0时导致分母为0，计算出错
                                                            {
                                                                XMOrderInfoProduct.SalesPrice = 0;
                                                            }
                                                            else
                                                            {
                                                                XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice * (decimal)ProductList[i].Saleprice * decimal.Parse(ProductList[i].count.ToString()) / ZuHeTotal, 2);//销售价
                                                            }
                                                            payPriceI += (decimal)XMOrderInfoProduct.SalesPrice;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice, 2);//销售价
                                                        payPriceK += PartPayPrice;
                                                    }

                                                    XMOrderInfoProduct.IsEnable = false;//是否删除
                                                    XMOrderInfoProduct.IsAudit = false;//是否审核
                                                    XMOrderInfoProduct.IsExpedited = false;//是否加急

                                                    XMOrderInfoProduct.ISArrivedLibrary = false;
                                                    //XMOrderInfoProduct.ShippingType = ShippingType;

                                                    //XMOrderInfoProduct.IsHadPlanBill = false;
                                                    //XMOrderInfoProduct.IsReDelivery = false;
                                                    //XMOrderInfoProduct.IsChangeGoods = false;
                                                    //XMOrderInfoProduct.IsReturnGoods = false;
                                                    //XMOrderInfoProduct.IsContinue = false;

                                                    if (scProductName == "")
                                                    {
                                                        scProductName = XMOrderInfoProduct.ProductName;
                                                        //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                    }

                                                    if (HozestERPContext.Current.User != null)
                                                    {
                                                        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                    }
                                                    else
                                                    {
                                                        string UserName = "admin";
                                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                        if (customer.Count > 0)
                                                        {
                                                            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                        }
                                                    }

                                                    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                    XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                                    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                                }
                                            }
                                            else
                                            {
                                                var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                                XMOrderInfoProduct.Specifications = "";//尺寸
                                                XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                                XMOrderInfoProduct.ProductName = "无产品";

                                                xmorderInfo.IsAbnormal = true;//是否异常

                                                XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                                if (ModifiedDate != null && ModifiedDate != "")
                                                {
                                                    XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间
                                                }
                                                XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.unitPrice.ToString()) * Convert.ToInt32(num);//单价/销售价

                                                XMOrderInfoProduct.IsEnable = false;//是否删除
                                                XMOrderInfoProduct.IsAudit = false;//是否审核
                                                XMOrderInfoProduct.IsExpedited = false;//是否加急

                                                XMOrderInfoProduct.ISArrivedLibrary = false;
                                                //XMOrderInfoProduct.ShippingType = ShippingType;

                                                //XMOrderInfoProduct.IsHadPlanBill = false;
                                                //XMOrderInfoProduct.IsReDelivery = false;
                                                //XMOrderInfoProduct.IsChangeGoods = false;
                                                //XMOrderInfoProduct.IsReturnGoods = false;
                                                //XMOrderInfoProduct.IsContinue = false;

                                                if (scProductName == "")
                                                {
                                                    scProductName = XMOrderInfoProduct.ProductName;
                                                    //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                }

                                                if (HozestERPContext.Current.User != null)
                                                {
                                                    XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                    XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                }
                                                else
                                                {
                                                    string UserName = "admin";
                                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                    if (customer.Count > 0)
                                                    {
                                                        XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                        XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                    }
                                                }

                                                XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                                xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                            }
                                        }
                                        //else
                                        //{
                                        //    //没有商品编码
                                        //    XMOrderInfoProduct.PlatformMerchantCode = ""; //料号（商品编码）
                                        //    XMOrderInfoProduct.Specifications = "";//尺寸
                                        //    XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                        //    XMOrderInfoProduct.ProductName = "无产品";
                                        //    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                        //    if (ModifiedDate != null && ModifiedDate != "")
                                        //    {
                                        //        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间
                                        //    }
                                        //    XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.unitPrice.ToString());//单价/销售价

                                        //    XMOrderInfoProduct.IsEnable = false;//是否删除
                                        //    XMOrderInfoProduct.IsAudit = false;//是否审核
                                        //    XMOrderInfoProduct.IsExpedited = false;//是否加急

                                        //    XMOrderInfoProduct.ISArrivedLibrary = false;

                                        //    if (HozestERPContext.Current.User != null)
                                        //    {
                                        //        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                        //        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                        //    }
                                        //    else
                                        //    {
                                        //        string UserName = "admin";
                                        //        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                        //        if (customer.Count > 0)
                                        //        {
                                        //            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                        //            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                        //        }
                                        //    }

                                        //    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                        //    XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                        //    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);

                                        //    xmorderInfo.IsAbnormal = true;//是否异常
                                        //}
                                    }
                                }

                                #endregion

                                scSalePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额
                                //判断是否刷单
                                orderstatus = "10,20,21,30";
                                if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                                {
                                    xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), xmorderInfo.OrderCode, xmorderInfo.Remark, response.sellerOrdRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售金额：订单支付金额
                                }

                                if (response.invoiceType != null && response.invoiceType != "")//发票类型 -- 增值还是普通（01增值 02普通）
                                {
                                    xmorderInfo.IsInvoiced = true;
                                    xmorderInfo.InvoiceNo = response.vatTaxpayerNumber;//发票号码
                                    xmorderInfo.InvoiceHead = response.invoiceHead;//发票抬头
                                    //xmorderInfo.InvoiceNo = response.invoice;//发票内容
                                    xmorderInfo.InvoicePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收款(价格*数量+运费-优惠券金额-优惠单金额)
                                }
                                //xmorderInfo.DistributeMethod = productInfo.disType;//配送方式({10001:普通快递、20001:EMS、30001:供应商直送、40001:自提、30002:店中店商家直送} )
                                xmorderInfo.DistributePrice = transportprice;//运费（苏宁易购）
                                xmorderInfo.ProductPrice = orderprice;//产品总额
                                xmorderInfo.OrderPrice = orderprice + transportprice;//订单金额
                                //Decimal? promotionprice = 0;//优惠金额
                                //promotionprice = xmorderInfo.ProductPrice + xmorderInfo.DistributePrice - xmorderInfo.OrderPrice;
                                xmorderInfo.OrderPromotion = vouchertotalMoney;//订单优惠金额
                                //Decimal? taxes = 0;//折扣
                                //taxes = (xmorderInfo.OrderPrice - promotionprice) / xmorderInfo.OrderPrice;
                                //xmorderInfo.Taxes = taxes;
                                xmorderInfo.ReceivablePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//应收金额
                                //xmorderInfo.PayPrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额

                                #region  保存数据

                                IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
                                InsertCount++;

                                //新建发票
                                if (xmorderInfo.IsInvoiced != null && xmorderInfo.IsInvoiced == true)
                                {
                                    ToAddXMInvoiceInfo(xmorderInfo,719,"","","","","");
                                }

                                #endregion
                            }
                            #endregion

                            #region 修改

                            else
                            {
                                string Remarks = response.buyerOrdRemark;//买家备注
                                string SellerOrdRemark = response.sellerOrdRemark;//卖家备注
                                //string Modified = orderinfo.OrderUpdateTime.ToString();
                                //string Memo = CustomerServiceRemark;//SellerMemo.Substring(SellerMemo.LastIndexOf("'") + 1).ToLower();
                                string RemarksValue = xmorderInfo.CustomerServiceRemark;
                                string StatusValue = xmorderInfo.OrderStatus.Trim();
                                decimal FactoryPrice = 0;

                                if (SellerOrdRemark != RemarksValue || StatusValue != response.orderTotalStatus.ToString().Trim())
                                {
                                    #region 记录操作

                                    int UpsatorID = 0;
                                    if (HozestERPContext.Current.User != null)
                                    {
                                        UpsatorID = HozestERPContext.Current.User.CustomerID;
                                    }
                                    else
                                    {
                                        string UserName = "admin";
                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                        if (customer.Count > 0)
                                        {
                                            UpsatorID = customer[0].CustomerID;
                                        }
                                    }

                                    if (Remarks != null && Remarks != "")
                                    {
                                        if (xmorderInfo.Remark != Remarks)
                                        {
                                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                            record.OrderInfoId = xmorderInfo.ID;
                                            record.PropertyName = "Remarks";
                                            record.OldValue = xmorderInfo.Remark;
                                            record.NewValue = Remarks;
                                            record.UpdatorID = UpsatorID;
                                            record.UpdateTime = DateTime.Now;
                                            IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                        }
                                    }
                                    if (SellerOrdRemark != null && SellerOrdRemark != "")
                                    {
                                        if (RemarksValue != SellerOrdRemark)
                                        {
                                            var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, SellerOrdRemark);
                                            if (RecordExist == null || RecordExist.Count == 0)
                                            {
                                                XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                                record.OrderInfoId = xmorderInfo.ID;
                                                record.PropertyName = "CustomerServiceRemark";
                                                record.OldValue = xmorderInfo.CustomerServiceRemark;
                                                record.NewValue = SellerOrdRemark;
                                                record.UpdatorID = UpsatorID;
                                                record.UpdateTime = DateTime.Now;
                                                IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                            }
                                        }
                                    }
                                    if (xmorderInfo.OrderStatus != response.orderTotalStatus.ToString())
                                    {
                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                        record.OrderInfoId = xmorderInfo.ID;
                                        record.PropertyName = "OrderStatus";
                                        record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                                        record.NewValue = System.Convert.ToString(response.orderTotalStatus);
                                        record.UpdatorID = UpsatorID;
                                        record.UpdateTime = DateTime.Now;
                                        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                    }

                                    #endregion
                                }

                                #region 赠品、返现 (修改) 修改订单完成则增加赠品返现信息
                                //if (response.orderTotalStatus.ToString() == "30")//10待发货
                                //{
                                if (RemarksValue.Trim() != SellerOrdRemark.Trim())
                                {
                                    string CustomerServiceRemarkOld = RemarksValue.Trim();
                                    string CustomerServiceRemarkNew = SellerOrdRemark.Trim();

                                    if (CustomerServiceRemarkNew.IndexOf("/赠品") > -1 || CustomerServiceRemarkNew.IndexOf("/退差价") > -1)
                                    {
                                        IoC.Resolve<IXMOrderInfoAPIService>().XMPremiumsAndCashBackApplication(CustomerServiceRemarkOld, CustomerServiceRemarkNew, xmorderInfo.OrderCode, xmorderInfo.WantID, xmorderInfo.FullName, (int)xmorderInfo.PlatformTypeId, (int)xmorderInfo.NickID);
                                    }
                                }
                                //}
                                #endregion

                                //xmorderInfo.OrderInfoModified = DateTime.Parse(orderinfo.OrderUpdateTime);//更新时间
                                xmorderInfo.OrderStatus = response.orderTotalStatus;//订单状态 10待发货、20已发货、21部分发货、30交易成功、40交易关闭
                                if (response.orderTotalStatus == "10")
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                    }
                                }
                                if (response.orderTotalStatus == "20")
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                    }
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                    }
                                }

                                if (response.orderTotalStatus == "30")
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                    }
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                    }
                                    if (xmorderInfo.CompletionTime == null)
                                    {
                                        xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                        //查询发票管理 有未排单 未开票 的发票记录自动排单
                                        AutoSingleRow(response.orderCode);
                                    }
                                }
                                xmorderInfo.WantID = response.userName;//用户id
                                //xmorderInfo.FullName = response.customerName;//收货人
                                //xmorderInfo.Province = response.provinceName;//省
                                //xmorderInfo.City = response.cityName;//市
                                //xmorderInfo.County = response.districtName;//区县
                                //xmorderInfo.DeliveryAddress = response.customerAddress;//收货地址
                                //xmorderInfo.Mobile = response.mobNum;//手机
                                //xmorderInfo.Tel = response.mobNum;//电话
                                xmorderInfo.SourceType = "同步";//数据来源
                                xmorderInfo.FinancialAudit = true;//财务审核
                                xmorderInfo.IsOurOrder = true;//是我们的订单

                                //更改收货地址
                                //if (SellerOrdRemark != null && SellerOrdRemark!="")
                                //{
                                //    if (SellerOrdRemark.IndexOf("//更改床垫地址") > -1)
                                //    {
                                //        string csr = SellerOrdRemark + "$";
                                //        string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                                //        string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");

                                //        xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                                //    }
                                //}

                                xmorderInfo.Remark = response.buyerOrdRemark;//买家备注
                                //xmorderInfo.CustomerServiceRemark = response.sellerOrdRemark;//卖家备注（修改）
                                //xmorderInfo.PayPrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收金额

                                string CustomerServiceRemark = response.sellerOrdRemark;

                                #region 赠品、返现
                                //if (response.orderTotalStatus.ToString() == "10" || response.orderTotalStatus.ToString() == "20"
                                //     || response.orderTotalStatus.ToString() == "21" || response.orderTotalStatus.ToString() == "30")//10待发货
                                //{
                                //    if (response.orderSaleTime.ToString().Trim() != null && response.orderSaleTime.ToString().Trim() != "")
                                //    {
                                //        if (DateTime.Parse(response.orderSaleTime.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                //        {
                                //            if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                //            {
                                //                string BuyerName = response.customerName;//收货人名称 
                                //                string WantNo = response.userName;//旺旺号 
                                //                string OrderCode = response.orderCode;//订单号 
                                //                string paramMessage = string.Empty;

                                //                if (CustomerServiceRemark.IndexOf("赠品") > -1 || CustomerServiceRemark.IndexOf("返现") > -1)
                                //                {
                                //                    #region 赠品
                                //                    if (CustomerServiceRemark.IndexOf("赠品") > -1)
                                //                    {
                                //                        //返回赠品条数
                                //                        int PremiumsInst = XMPremiumsInst(CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage);

                                //                    }
                                //                    #endregion

                                //                    #region 返现
                                //                    if (CustomerServiceRemark.IndexOf("返现") > -1)
                                //                    {
                                //                         //返回返现条数
                                //                                int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack),  ref paramMessage);

                                //                    }

                                //                    #endregion
                                //                }
                                //            }
                                //        }
                                //    }
                                //}
                                #endregion

                                if (HozestERPContext.Current.User != null)
                                {
                                    xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                                }
                                else
                                {
                                    string UserName = "admin";
                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                    if (customer.Count > 0)
                                    {
                                        xmorderInfo.UpdateID = customer[0].CustomerID;
                                    }
                                }

                                xmorderInfo.UpdateDate = DateTime.Now;

                                decimal orderprice = 0;//订单金额
                                decimal transportprice = 0;//运费
                                decimal coupontotalMoney = 0;//优惠卷金额
                                decimal vouchertotalMoney = 0;//优惠单金额

                                string scProductName = "";//商品名称（刷单）
                                //decimal scSalePrice = 0;//销售价(刷单)
                                string ModifiedDate = xmorderInfo.OrderInfoCreateDate.ToString();

                                #region 注释的原获取订单详情
                                //for (int k = 0; k < response.orderDetail.Count; k++)
                                //{
                                //    var productinfo = response.orderDetail[k];

                                //    orderprice += (decimal.Parse(productinfo.unitPrice) * decimal.Parse(productinfo.saleNum));//商品单价*数量
                                //    transportprice += decimal.Parse(productinfo.transportFee);//运费
                                //    coupontotalMoney += decimal.Parse(productinfo.coupontotalMoney);//优惠卷金额
                                //    decimal changeNum = 0;
                                //    if (decimal.TryParse(productinfo.vouchertotalMoney, out changeNum))
                                //    {
                                //        vouchertotalMoney += decimal.Parse(productinfo.vouchertotalMoney);//优惠单金额
                                //    }
                                //    else
                                //    {
                                //        vouchertotalMoney = 0;
                                //    }

                                //    //获取产品详情
                                //    //suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest requestProduct = new suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest();
                                //    //requestProduct.productCode = productinfo.productCode;//产品编号
                                //    ////开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
                                //    ////SuningLogger.IsLogDebug = true;
                                //    //suning::suning_api_sdk.ISuningClient clientProduct = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
                                //    //suning::suning_api_sdk.BizResponse.CustomItemResponse.ItemGetResponse responseProduct = clientProduct.Execute(requestProduct);

                                //    if (productinfo != null)
                                //    {
                                //        string OuterSkuId = productinfo.productCode;//商品编码
                                //        int? num = int.Parse(productinfo.saleNum.Substring(0, productinfo.saleNum.IndexOf(".")));//数量
                                //        if (OuterSkuId != "" && OuterSkuId != null)
                                //        {
                                //            //商家编码查询从表信息。
                                //            var ProductList = IoC.Resolve<IXMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);
                                //            //var XMOrderInfoProduct = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).SingleOrDefault();

                                //            //if (XMOrderInfoProduct == null)
                                //            //{
                                //            //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                //            //}
                                //            var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                                //            XMOrderInfoProductDetails XMOrderInfoProduct = null;

                                //            if (OrderyReportProductList.Count == 0)
                                //            {
                                //                XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                //            }
                                //            else
                                //            {

                                //                XMOrderInfoProduct = OrderyReportProductList[0];
                                //            }
                                //            if (ProductList.Count > 0)
                                //            {
                                //                //商品关联主表信息
                                //                //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                //                if (ProductList[0].TDateTimeStart != null && ProductList[0].TDateTimeEnd != null && ModifiedDate != null && ModifiedDate != "" && ModifiedDate != "0001-01-01 00:00:00")
                                //                {
                                //                    if (Convert.ToDateTime(ModifiedDate) >= ProductList[0].TDateTimeStart && Convert.ToDateTime(ModifiedDate) <= ProductList[0].TDateTimeEnd)
                                //                    {
                                //                        XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                //                        XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
                                //                        XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                                //                        XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                //                        XMOrderInfoProduct.TCostprice = ProductList[0].TCostprice;
                                //                    }
                                //                    else
                                //                    {
                                //                        XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                //                        XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
                                //                        XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                                //                        XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                //                        XMOrderInfoProduct.TCostprice = ProductList[0].Costprice;
                                //                    }
                                //                }
                                //                else
                                //                {
                                //                    XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                //                    XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
                                //                    XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                                //                    XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                //                    XMOrderInfoProduct.TCostprice = ProductList[0].Costprice;
                                //                }
                                //            }
                                //            else
                                //            {
                                //                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                //                XMOrderInfoProduct.Specifications = "";//尺寸
                                //                XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                //                XMOrderInfoProduct.ProductName = "无产品";
                                //            }

                                //            XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                //            if (ModifiedDate != null && ModifiedDate != "")
                                //            {
                                //                XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间
                                //            }
                                //            XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.unitPrice.ToString());//单价/销售价

                                //            if (scProductName == "")
                                //            {
                                //                scProductName = XMOrderInfoProduct.ProductName;
                                //                //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                //            }

                                //            if (HozestERPContext.Current.User != null)
                                //            {
                                //                XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                //            }
                                //            else
                                //            {
                                //                string UserName = "admin";
                                //                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                //                if (customer.Count > 0)
                                //                {
                                //                    XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                //                }
                                //            }

                                //            XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                //            //IoC.Resolve<IXMOrderInfoProductDetailsService>().UpdateXMOrderInfoProductDetails(XMOrderInfoProduct);
                                //        }
                                //    }
                                //}
                                #endregion

                                scSalePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额
                                //判断是否刷单
                                orderstatus = "10,20,21,30";
                                if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                                {
                                    xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), xmorderInfo.OrderCode, xmorderInfo.Remark, response.sellerOrdRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                                }

                                #region  保存数据

                                IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
                                UpdateCount++;

                                #endregion
                            }

                            #endregion
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 订单备注修改  suning.custom.ordernote.modify 苏宁易购
        /// </summary>
        /// <param name="ordercode"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        public string OrdernoteModifyUpdate(string ordercode, string noteContent, string colorMarkFlag, XMOrderInfoApp xMorderInfoApp)
        {
            string result = "";

            if (xMorderInfoApp != null && ordercode != "")
            {
                //根据订单号查询订单信息
                suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrdernoteModifyRequest request = new suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrdernoteModifyRequest();
                request.orderCode = ordercode;
                request.noteContent = noteContent;
                request.noteFlag = "1";//订单备注标示 1 覆盖 2 衔尾 3 删除
                request.colorMarkFlag = colorMarkFlag;//交易备注旗帜, 空表示灰色， 1表示红色， 2表示黄色， 3表示绿色， 4表示蓝色， 5表示紫色
                suning::suning_api_sdk.ISuningClient client = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
                suning::suning_api_sdk.BizResponse.CustomTransactionResponse.OrdernoteModifyResponse response = client.Execute(request);

                if (response != null)
                {
                    //成功标示,Y=成功，N=不成功
                    result = response.result;
                }
            }
            return result;
        }

        #region 各平台数据抓取

        /// <summary>
        /// 同步京东数据
        /// </summary>
        /// <param name="createDateStart"></param>
        /// <param name="createDateEnd"></param>
        /// <param name="newApiOrderStates"></param>
        /// <param name="JDparamMessage"></param>
        public void SynchronousJDOrderData(string createDateStart, string createDateEnd, string newApiOrderStates, XMOrderInfoApp xMorderInfoApp)
        {
            int pageSize = 100;//每页的条数
            for (int i = 1; i < 100; i++)
            {
                int ICount = 0;
                int UCount = 0;
                HozestERP.BusinessLogic.JDsingleServiceReference.JDsingleOrderGetSoapClient webserver = new HozestERP.BusinessLogic.JDsingleServiceReference.JDsingleOrderGetSoapClient();
                HozestERP.BusinessLogic.JDsingleServiceReference.OrderInfo[] orderlst = webserver.WebGetJDOrderInfoAll(Convert.ToDateTime(createDateStart), Convert.ToDateTime(createDateEnd), newApiOrderStates, i, pageSize, true, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, xMorderInfoApp.ServerUrl, xMorderInfoApp.AccessToken);
                //无数据
                if (orderlst == null)
                {
                    return;
                }

                if (orderlst.Length > 0)
                {
                    PageJDOrderData(orderlst, xMorderInfoApp);
                }

                if (orderlst.Length < 100)
                {
                    return;
                }
            }
        }

        public void PageJDOrderData(HozestERP.BusinessLogic.JDsingleServiceReference.OrderInfo[] orderlst, XMOrderInfoApp xMorderInfoApp)
        {
            try
            {
                for (int i = 0; i < orderlst.Length; i++)
                {
                    #region 判断商品主信息是不是只有双十一大礼包信息
                    var orderitemarray = orderlst[i].item_info_list.ToArray();//订单中的商品明细
                    if (orderitemarray.Length == 1)//如果商品只有一个而且是大礼包则不同步数据
                    {
                        var bigpackagearray = orderitemarray.Where(p => p.sku_name.Contains("大礼包")).ToArray();
                        if (bigpackagearray.Length == 1)
                            continue;
                    }
                    #endregion
                    #region 订单信息

                    //     送货（日期）类型（1-只工作日送货(双休日、假日不用送);2-只双休日、假日送货(工作日不用送);3-工作日、双休日与假日均可送货;其他值-返回“任意时间”）
                    string DeliveryType = orderlst[i].delivery_type;
                    //     商品的运费
                    string FreightPrice = orderlst[i].freight_price;
                    //     发票信息 “invoice_info: 不需要开具发票”下无需开具发票；其它返回值请正常开具发票
                    string InvoiceInfo = orderlst[i].invoice_info;
                    //     变更时间, 默认必须返回
                    string Modified = orderlst[i].modified;

                    string PaymentConfirmTime = orderlst[i].payment_confirm_time;
                    //     订单id, 默认必须返回
                    string OrderId = orderlst[i].order_id;
                    //     用户应付金额
                    string OrderPayment = orderlst[i].order_payment;
                    //     买家下单时订单备注
                    // string OrderRemark = orderlst[i].OrderRemark;
                    //     订单货款金额（订单总金额-商家优惠金额）
                    string OrderSellerPrice = orderlst[i].order_seller_price;
                    //     下单时间
                    string OrderStartTime = orderlst[i].order_start_time;
                    //     订单状态（英文）具体返回值列表请发邮件至jos#jd.com获取
                    string OrderState = orderlst[i].order_state;
                    //     订单总金额
                    string OrderTotalPrice = orderlst[i].order_total_price;
                    //     支付方式（1货到付款, 2邮局汇款, 3自提, 4在线支付, 5公司转账, 6银行转账）
                    string PayType = orderlst[i].pay_type;
                    ////   商家优惠金额
                    string SellerDiscount = orderlst[i].seller_discount;
                    //     商家id
                    string VenderId = orderlst[i].vender_id;
                    //     ID（买家帐号）
                    string Pin = orderlst[i].pin;
                    //     物流公司ID
                    string LogisticsId = orderlst[i].logistics_id;
                    // 	   运单号
                    string Waybill = orderlst[i].waybill;
                    //     商品总额
                    decimal productprice = 0;
                    //     用户支付金额
                    decimal payprice = 0;
                    if (orderlst[i].payment_confirm_time != null && orderlst[i].payment_confirm_time != "" && orderlst[i].payment_confirm_time != "0001-01-01 00:00:00")
                    {
                        payprice = Decimal.Parse(orderlst[i].order_payment);
                    }
                    #endregion

                    #region 买家 信息

                    //省
                    string Province;
                    //市 
                    string City;
                    //县
                    string County;
                    //地址
                    string FullAddress;
                    //姓名
                    string Fullname;
                    //手机
                    string Mobile;
                    //省
                    //string Province;
                    //固定电话
                    string Telephone;

                    if (orderlst[i].consignee_info != null)
                    {
                        City = orderlst[i].consignee_info.city;
                        Province = orderlst[i].consignee_info.province;
                        County = orderlst[i].consignee_info.county;

                        FullAddress = orderlst[i].consignee_info.full_address;
                        Fullname = orderlst[i].consignee_info.fullname;
                        Mobile = orderlst[i].consignee_info.mobile;
                        // Province = orderlst[i].ConsigneeInfo.Province; 

                        if (orderlst[i].consignee_info.telephone != orderlst[i].consignee_info.mobile)
                        {
                            Telephone = orderlst[i].consignee_info.telephone;
                        }
                        else
                        {
                            Telephone = "";
                        }
                    }
                    else
                    {
                        //省
                        Province = "";
                        //市 
                        City = "";
                        //县
                        County = "";
                        FullAddress = "";
                        Fullname = "";
                        Mobile = "";
                        Telephone = "";
                    }
                    #endregion

                    #region 其他

                    //优惠金额 
                    string CouponPrice;
                    //优惠类型: 20-套装优惠, 28-闪团优惠, 29-团购优惠, 30-单品促销优惠, 35-满返满送(返现);41-京东券优惠;52-礼品卡优惠,100-店铺优惠
                    string CouponType;
                    //平台优惠金额
                    decimal PlatformDiscountAmount = 0;
                    //商家优惠
                    decimal MerchantDiscountAmount = 0;
                    //赠送积分 
                    string GiftPoint = "";

                    if (orderlst[i].coupon_detail_list != null && orderlst[i].coupon_detail_list.Count() > 0)
                    {
                        //CouponPrice = orderInfo.CouponDetailList[0].CouponPrice;
                        //CouponType = orderInfo.CouponDetailList[0].CouponType;
                        foreach (var item in orderlst[i].coupon_detail_list)
                        {
                            if (item.coupon_type == "39-京豆优惠" || item.coupon_type == "41-京东券优惠" || item.coupon_type == "52-礼品卡优惠")
                            {
                                PlatformDiscountAmount += decimal.Parse(item.coupon_price);
                                if (item.coupon_type == "39-京豆优惠")
                                {
                                    //京豆
                                    GiftPoint = item.coupon_price;
                                }
                            }else if(item.coupon_type == "35-满返满送(返现)")
                            {
                                MerchantDiscountAmount += decimal.Parse(item.coupon_price);
                            }
                        }
                    }

                    #endregion

                    #region 取备注信息
                    //VenderRemark VResult = new VenderRemark();
                    //string OrderRemark1 = "";//商家备注
                    //if (OrderId != null)
                    //{
                    //    VResult = GetOrderVenderRemark(OrderId, xMorderInfoApp);// base.ProjectService.GetOrderVenderRemark(OrderId);//,orderInfoApp
                    //    if (VResult != null)
                    //    {
                    //        OrderRemark1 = VResult.Remark;
                    //    }
                    //}
                    #endregion

                    #region 买家信息
                    //数量 
                    string ItemTotal;
                    //SKU的京东价 
                    string JdPrice;
                    //SKU外部ID 
                    string OuterSkuId;
                    //京东内部SKU的ID   京东sku编号 (优惠类型是:35-满返满送(返现) 100-店铺优惠,sku_id值为””)
                    string SkuId = "";
                    // 商品的名称+SKU规格（比如 
                    string SkuName;
                    //京东内部商品ID 
                    string WareId;

                    string Remarks = orderlst[i].order_remark;//备注
                    string CustomerServiceRemark = orderlst[i].vender_remark;//客服备注
                    //是否发票  
                    bool? IsInvoices = false;
                    if (orderlst[i].invoice_info != null && orderlst[i].invoice_info != "" && orderlst[i].invoice_info != "不需要开具发票")
                    {
                        IsInvoices = true;
                    }
                    //发票编号
                    string InvoiceNo = "";
                    if (IsInvoices == true && orderlst[i].vat_invoice_info != null)
                    {
                        InvoiceNo = orderlst[i].vat_invoice_info.taxpayer_ident;
                    }
                    //支付方式
                    string paymethod = orderlst[i].pay_type;
                    decimal scSalePrice = 0;//销售价(刷单)

                    #endregion


                    var orderInfoitems = orderlst[i].item_info_list;//.Where(p => !p.sku_name.Contains("大礼包")).ToList();//排除大礼包
                    if (orderInfoitems.Count() > 0)
                    {

                        scSalePrice = payprice;

                        //List<XMOrderInfoNew> orderReports = GetXMOrderAndOrderProductInfoList();//获取订单产品表详细所有数据  tolist()
                        //var xmorderInfo = orderReports.Where(p => p.OrderCode == OrderId && p.JDId == SkuId.ToString()).SingleOrDefault();//订单id 京东id 查询数据 
                        var xmorderInfo = IoC.Resolve<IXMOrderInfoService>().GetXMOrderByOrderCode(OrderId);//订单编号 京东id 查询
                        #region 新增
                        if (xmorderInfo == null)
                        {
                            #region 订单主表信息
                            xmorderInfo = new XMOrderInfo();
                            xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();
                            xmorderInfo.NickID = xMorderInfoApp.NickId.Value;// 1;//1:城市爱情旗舰店
                            xmorderInfo.PlatformTypeId = xMorderInfoApp.PlatformTypeId;//251;//京东平台

                            if (Modified != null && Modified != "")
                            {
                                xmorderInfo.OrderInfoModified = DateTime.Parse(Modified);//变更时间
                            }

                            if (PaymentConfirmTime != null && PaymentConfirmTime != "" && PaymentConfirmTime != "0001-01-01 00:00:00")
                            {
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Parse(PaymentConfirmTime.ToString().Trim());//付款时间
                                }

                                if (OrderState.ToString().Trim() == "WAIT_GOODS_RECEIVE_CONFIRM")//等等确认收货
                                {

                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Parse(Modified.ToString().Trim());//发货时间
                                    }
                                }
                                if (OrderState.ToString().Trim() == "FINISHED_L")//完成时间
                                {
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Parse(Modified.ToString().Trim());//发货时间
                                    }
                                    if (xmorderInfo.CompletionTime == null)
                                    {
                                        xmorderInfo.CompletionTime = DateTime.Parse(Modified.ToString().Trim());//完成时间
                                        AutoSingleRow(OrderId);
                                    }
                                }
                                //DateTime.Parse(PaymentConfirmTime.ToString().Trim()).AddDays(+15);//发货时间

                                #region 赠品、返现  京东只有订单完成返现才生成赠品发现信息
                                //OrderState.ToString().Trim() == "WAIT_SELLER_STOCK_OUT" || OrderState.ToString().Trim() == "SEND_TO_DISTRIBUTION_CENER"
                                //|| OrderState.ToString().Trim() == "DISTRIBUTION_CENTER_RECEIVED" || OrderState.ToString().Trim() == "WAIT_GOODS_RECEIVE_CONFIRM"
                                //|| OrderState.ToString().Trim() == "WAIT_SELLER_DELIVERY"
                                //||
                                //if (OrderState.ToString().Trim() == "RECEIPTS_CONFIRM" ||  OrderState.ToString().Trim() == "FINISHED_L")
                                //{
                                if (OrderStartTime.ToString().Trim() != null && OrderStartTime.ToString().Trim() != "")
                                {
                                    if (DateTime.Parse(OrderStartTime.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                    {

                                        if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                        {
                                            //string CashBackMoney = "";//返现金额
                                            //string BuyerAlipayNo = "";//收款账号
                                            string BuyerName = Fullname.ToString().Trim();//收货人名称
                                            string WantNo = Pin;//旺旺号
                                            string OrderCode = OrderId;//订单号 
                                            string paramMessage = string.Empty;

                                            if (CustomerServiceRemark.IndexOf("/赠品") > -1 || CustomerServiceRemark.IndexOf("/退差价") > -1)
                                            {
                                                #region 赠品
                                                if (CustomerServiceRemark.IndexOf("/赠品") > -1)
                                                {
                                                    //返回赠品条数
                                                    int PremiumsInst = XMPremiumsInst(CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, xMorderInfoApp.PlatformTypeId.Value, xMorderInfoApp.NickId.Value);

                                                }
                                                #endregion

                                                #region 返现
                                                if (CustomerServiceRemark.IndexOf("/退差价") > -1)
                                                {

                                                    //返回返现条数
                                                    int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                                }

                                                #endregion
                                            }
                                        }
                                    }
                                }

                                //}
                                #endregion
                            }

                            if (OrderStartTime.ToString().Trim() != null && OrderStartTime.ToString().Trim() != "")
                            {
                                xmorderInfo.OrderInfoCreateDate = DateTime.Parse(OrderStartTime.ToString().Trim());//创单时间
                            }
                            xmorderInfo.OrderCode = OrderId;//订单Id  
                            xmorderInfo.OrderStatus = OrderState.ToString().Trim();//订单状态
                            xmorderInfo.WantID = Pin;//买家旺旺id
                            xmorderInfo.FullName = Fullname.ToString().Trim();//收货人名称
                            xmorderInfo.DeliveryAddress = FullAddress.ToString().Trim();//收货人地址
                            xmorderInfo.Province = Province.ToString().Trim();//收货人省
                            xmorderInfo.City = City.ToString().Trim();//收货人市
                            xmorderInfo.County = County.ToString().Trim();//收货人区
                            string sMobile = Mobile.ToString().Trim();//收货人手机
                            if (sMobile.IndexOf("'") == -1)
                            {
                                xmorderInfo.Mobile = Mobile.ToString().Trim();
                            }
                            else
                            {
                                string suMobile = sMobile.Substring(Mobile.LastIndexOf("'") + 1).ToLower();
                                xmorderInfo.Mobile = suMobile;
                            }

                            xmorderInfo.Tel = Telephone.ToString();//收货人电话
                            xmorderInfo.SourceType = CustomerServiceRemark.Contains("京仓订单") ? "京仓订单" : "同步";//数据来源类型
                            xmorderInfo.FinancialAudit = true;//财务审核
                            xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//客服备注（新增）
                            xmorderInfo.Remark = CustomerServiceRemark.Contains("京仓订单") ? CustomerServiceRemark + Remarks :  Remarks;//订单备注
                            //OrderyReport.LogisticsNumber = Waybill;//物流单号(运单号)
                            // OrderyReport.LogisticsId = LogisticsId;//物流公司ID

                            xmorderInfo.IsInvoiced = IsInvoices.Value;//是否发票
                            xmorderInfo.InvoiceNo = InvoiceNo;//发票编号

                            if (xmorderInfo.IsInvoiced == true && InvoiceInfo.IndexOf("发票抬头:") != -1 && (InvoiceInfo.LastIndexOf(";") - InvoiceInfo.IndexOf("发票抬头:")) > 5)
                            {
                                string invoiceHead = InvoiceInfo.Substring(InvoiceInfo.IndexOf("发票抬头:") + 5, InvoiceInfo.LastIndexOf(";") - InvoiceInfo.IndexOf("发票抬头:") - 5);
                                xmorderInfo.InvoiceHead = invoiceHead;
                            }

                            xmorderInfo.PayMethod = paymethod;//支付方式
                            xmorderInfo.OrderPromotion = PlatformDiscountAmount;//平台优惠
                            xmorderInfo.ProductPromotion = MerchantDiscountAmount;//商家优惠
                            xmorderInfo.DistributePrice = Decimal.Parse(orderlst[i].freight_price);//配送费用（京东）
                            xmorderInfo.OrderPrice = Decimal.Parse(orderlst[i].order_total_price);//订单总金额
                            xmorderInfo.ReceivablePrice = decimal.Parse(orderlst[i].order_seller_price);//应收金额
                            xmorderInfo.PayPrice = payprice + PlatformDiscountAmount;//已支付金额
                            xmorderInfo.RealPointFee = decimal.Parse(GiftPoint == "" ? "0" : GiftPoint);//京豆

                            xmorderInfo.IsCashBack = false;//是否返现
                            xmorderInfo.IsSentGifts = false;//是否已发赠品 
                            xmorderInfo.IsEvaluate = false;//是否赔付

                            //OrderyReport.IsHadPlanBill = false;//是否已排单
                            //OrderyReport.IsReDelivery = false;//是否重发
                            //OrderyReport.IsChangeGoods = false;//是否换货
                            //OrderyReport.IsReturnGoods = false;//是否退货
                            xmorderInfo.IsEnable = false;
                            xmorderInfo.IsOurOrder = true;//是我们的订单

                            if (HozestERPContext.Current.User != null)
                            {
                                xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                                xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                            }
                            else
                            {
                                string UserName = "admin";
                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                if (customer.Count > 0)
                                {
                                    xmorderInfo.CreateID = customer[0].CustomerID;
                                    xmorderInfo.UpdateID = customer[0].CustomerID;
                                }
                            }
                            xmorderInfo.CreateDate = DateTime.Now;
                            xmorderInfo.UpdateDate = DateTime.Now;
                            #endregion

                            string scProductName = "";//商品名称（刷单）
                            decimal priceTotal = 0;//总商品金额
                            for (int k = 0; k < orderInfoitems.Count(); k++)
                            {
                                if (orderInfoitems[k].sku_name.Contains("大礼包"))
                                    continue;
                                var order = orderInfoitems;
                                decimal PriceNum = decimal.Parse(order[k].jd_price == null ? "0" : (order[k].jd_price == "" ? "0" : order[k].jd_price)) * decimal.Parse(order[k].item_total);
                                priceTotal += PriceNum;
                            }
                            decimal payPriceK = 0;//已赋值付款金额

                            //订单从表商品详情
                            for (int j = 0; j < orderInfoitems.Count(); j++)
                            {
                                #region 判断商品明细中是否有大礼包
                                if (orderInfoitems[j].sku_name.Contains("大礼包"))
                                    continue;
                                #endregion
                                if (orderInfoitems[j].sku_name.IndexOf("衣撑") == -1)//排除智曼衣撑
                                {
                                    productprice += Decimal.Parse(orderInfoitems[j].jd_price);//叠加商品金额
                                    // XMOrderInfoProductDetails OrderyReportProduct = new XMOrderInfoProductDetails();
                                    SkuName = orderInfoitems[j].sku_name;
                                    ItemTotal = orderInfoitems[j].item_total;
                                    JdPrice = orderInfoitems[j].jd_price;
                                    OuterSkuId = orderInfoitems[j].outer_sku_id;
                                    SkuId = orderInfoitems[j].sku_id;
                                    WareId = orderInfoitems[j].ware_id;
                                    if ((SkuId != "" && SkuId != null))
                                    {
                                        #region 备注
                                        // string Remarks = row1["商家备注"].ToString().Trim();

                                        if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                        {

                                            //if (OrderRemark.IndexOf("//赠品") > -1)
                                            //{
                                            //    string strRemarks = OrderRemark.Substring(0, OrderRemark.LastIndexOf("//赠品")); //备注
                                            //    if (OrderRemark.Length != strRemarks.Length)
                                            //    {
                                            //        string CustomerServiceRemarks = OrderRemark.Substring(OrderRemark.LastIndexOf("//赠品") + 2).ToLower();//  客服备注  
                                            //        CustomerServiceRemark = CustomerServiceRemarks;
                                            //    }
                                            //    else
                                            //    {
                                            //        CustomerServiceRemark = "";
                                            //    }
                                            //    Remarks = strRemarks;
                                            //}
                                            //else
                                            //{
                                            //    Remarks = OrderRemark;
                                            //}

                                            if (CustomerServiceRemark.IndexOf("发票") > -1)
                                            {
                                                IsInvoices = true;//要发票
                                            }

                                            // CustomerServiceRemark = OrderRemark;
                                        }
                                        //else
                                        //{
                                        //   // CustomerServiceRemark = "";
                                        //    //Remarks = "";
                                        //}

                                        #endregion

                                        #region 数据赋值
                                        //京东Id查询产品所有关联信息(SkuId)
                                        var ProductList = IoC.Resolve<XMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(SkuId.ToString(), int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                        //京东Id查询产品所有关联信息(OuterSkuId)
                                        if (ProductList.Count == 0)
                                            ProductList = IoC.Resolve<XMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(OuterSkuId.ToString(), int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                        //2015-7-28新增
                                        decimal a = 0;
                                        decimal? tj = 0;
                                        bool IsZuHe = false;
                                        if (ProductList.Count == 0)
                                        {
                                            ProductList = GetXMProductListByzuheCode(SkuId.ToString(), int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                            a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                            if (ProductList.Count > 0)
                                            {
                                                IsZuHe = true;
                                            }
                                        }
                                        //2015-7-28新增
                                        if (ProductList.Count == 0)
                                        {
                                            ProductList = GetXMProductListByzuheCode(OuterSkuId.ToString(), int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                            a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                            if (ProductList.Count > 0)
                                            {
                                                IsZuHe = true;
                                            }
                                        }
                                        //var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == SkuId).ToList();//.SingleOrDefault();

                                        //XMOrderInfoProductDetails OrderyReportProduct = null;

                                        //if (OrderyReportProductList.Count == 0)
                                        //{
                                        //    OrderyReportProduct = new XMOrderInfoProductDetails();
                                        //}
                                        //else
                                        //{

                                        //    OrderyReportProduct = OrderyReportProductList[0];
                                        //}
                                        if (ProductList.Count > 0)
                                        {
                                            decimal payPriceI = 0;//组合已赋值付款金额
                                            decimal ZuHeTotal = 0;
                                            for (int w = 0; w < ProductList.Count; w++)
                                            {
                                                decimal ZuHeNum = (decimal)ProductList[w].Saleprice * decimal.Parse(ProductList[w].count.ToString());
                                                ZuHeTotal += ZuHeNum;
                                            }
                                            for (int s = 0; s < ProductList.Count; s++)
                                            {
                                                var OrderyReportProduct = new XMOrderInfoProductDetails();
                                                if (ProductList[s].TDateTimeStart != null && ProductList[s].TDateTimeEnd != null && PaymentConfirmTime != null && PaymentConfirmTime != "" && PaymentConfirmTime != "0001-01-01 00:00:00")
                                                {
                                                    if (DateTime.Parse(PaymentConfirmTime.ToString().Trim()) >= ProductList[s].TDateTimeStart && DateTime.Parse(PaymentConfirmTime.ToString().Trim()) <= ProductList[s].TDateTimeEnd)
                                                    {
                                                        //OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                                                        OrderyReportProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                        OrderyReportProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                        OrderyReportProduct.FactoryPrice = ProductList[s].TCostprice * Convert.ToInt32(ItemTotal) * ProductList[s].count;//出厂价
                                                        OrderyReportProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                        OrderyReportProduct.TCostprice = ProductList[s].TCostprice;
                                                        if (!string.IsNullOrEmpty(ProductList[s].TManufacturersCode))
                                                        {
                                                            OrderyReportProduct.TManufacturersCode = ProductList[s].TManufacturersCode;
                                                        }
                                                        else
                                                        {
                                                            OrderyReportProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                                                        OrderyReportProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                        OrderyReportProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                        OrderyReportProduct.FactoryPrice = ProductList[s].Costprice * Convert.ToInt32(ItemTotal) * ProductList[s].count;//出厂价
                                                        OrderyReportProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                        OrderyReportProduct.TCostprice = ProductList[s].Costprice;
                                                        OrderyReportProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                    }
                                                }
                                                else
                                                {
                                                    //OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                                                    OrderyReportProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                    OrderyReportProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                    OrderyReportProduct.FactoryPrice = ProductList[s].Costprice * Convert.ToInt32(ItemTotal) * ProductList[s].count;//出厂价
                                                    OrderyReportProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                    OrderyReportProduct.TCostprice = ProductList[s].Costprice;
                                                    OrderyReportProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                }

                                                OrderyReportProduct.Remarks = Remarks;
                                                //OrderyReportProduct.PlatformMerchantCode = SkuId.ToString();//京东Id
                                                OrderyReportProduct.ProductNum = Convert.ToInt32(ItemTotal) * ProductList[s].count;

                                                if (PaymentConfirmTime != null && PaymentConfirmTime != "" && PaymentConfirmTime != "0001-01-01 00:00:00")
                                                {
                                                    OrderyReportProduct.CutoffShipDay = DateTime.Parse(PaymentConfirmTime.ToString().Trim()).AddDays(+20);//截止发货日 
                                                }

                                                //decimal SalesPriceV = Convert.ToDecimal(OrderSellerPrice.ToString().Trim());//销售价
                                                //OrderyReportProduct.SalesPrice = Math.Round(SalesPriceV / Convert.ToInt32(ItemTotal), 2);// SalesPriceV / Convert.ToInt32(ItemTotal);//销售价
                                                //OrderyReportProduct.SalesPrice = decimal.Parse(JdPrice);//销售价
                                                //if (s < ProductList.Count - 1)
                                                //{
                                                //    OrderyReportProduct.SalesPrice = Math.Round(decimal.Parse(((ProductList[s].Costprice * ProductList[s].count * Convert.ToInt32(ItemTotal) / a) * decimal.Parse(JdPrice)).ToString()), 2);//销售价
                                                //    tj = tj + OrderyReportProduct.SalesPrice;
                                                //}
                                                //else
                                                //{
                                                //    OrderyReportProduct.SalesPrice = decimal.Parse(JdPrice) - tj;//销售价
                                                //}
                                                decimal PartPayPrice = 0;
                                                if (j == orderInfoitems.Count() - 1)
                                                {
                                                    PartPayPrice = (decimal)xmorderInfo.PayPrice - payPriceK;
                                                }
                                                else
                                                {
                                                    PartPayPrice = Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(JdPrice) * decimal.Parse(ItemTotal) / priceTotal, 2);
                                                    //payPriceK += PartPayPrice;
                                                }
                                                if (IsZuHe)
                                                {
                                                    if (s == ProductList.Count - 1)
                                                    {
                                                        OrderyReportProduct.SalesPrice = PartPayPrice - payPriceI;
                                                        payPriceK += PartPayPrice;
                                                    }
                                                    else
                                                    {
                                                        if (ZuHeTotal == 0) //产品销售价没有维护，是0时导致分母为0，计算出错
                                                        {
                                                            OrderyReportProduct.SalesPrice = 0;
                                                        }
                                                        else
                                                        {
                                                            OrderyReportProduct.SalesPrice = Math.Round(PartPayPrice * (decimal)ProductList[s].Saleprice * decimal.Parse(ProductList[s].count.ToString()) / ZuHeTotal, 2);//销售价
                                                        }
                                                        payPriceI += (decimal)OrderyReportProduct.SalesPrice;
                                                    }
                                                }
                                                else
                                                {
                                                    OrderyReportProduct.SalesPrice = Math.Round(PartPayPrice, 2);//销售价
                                                    payPriceK += PartPayPrice;
                                                }

                                                OrderyReportProduct.IsEnable = false;//是否删除
                                                OrderyReportProduct.IsAudit = false;//是否审核
                                                OrderyReportProduct.ISArrivedLibrary = false;//是否抵库
                                                OrderyReportProduct.IsExpedited = false;//是否加急

                                                if (scProductName == "")
                                                {
                                                    scProductName = OrderyReportProduct.ProductName;
                                                    //scSalePrice = decimal.Parse(OrderyReportProduct.SalesPrice == null ? "0" : OrderyReportProduct.SalesPrice.ToString());
                                                }

                                                if (HozestERPContext.Current.User != null)
                                                {
                                                    OrderyReportProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                    OrderyReportProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                }
                                                else
                                                {
                                                    string UserName = "admin";
                                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                    if (customer.Count > 0)
                                                    {
                                                        OrderyReportProduct.CreateID = customer[0].CustomerID;
                                                        OrderyReportProduct.UpdateID = customer[0].CustomerID;
                                                    }
                                                }

                                                OrderyReportProduct.CreateDate = DateTime.Now;
                                                OrderyReportProduct.UpdateDate = DateTime.Now;
                                                xmorderInfo.XM_OrderInfoProductDetails.Add(OrderyReportProduct);
                                            }
                                        }
                                        else
                                        {
                                            var OrderyReportProduct = new XMOrderInfoProductDetails();
                                            OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                                            OrderyReportProduct.Specifications = "";//尺寸
                                            OrderyReportProduct.FactoryPrice = 0;//出厂价
                                            OrderyReportProduct.ProductName = "无产品";

                                            xmorderInfo.IsAbnormal = true;//是否异常


                                            OrderyReportProduct.Remarks = Remarks;
                                            //OrderyReportProduct.PlatformMerchantCode = SkuId.ToString();//京东Id
                                            OrderyReportProduct.ProductNum = Convert.ToInt32(ItemTotal);

                                            if (PaymentConfirmTime != null && PaymentConfirmTime != "" && PaymentConfirmTime != "0001-01-01 00:00:00")
                                            {
                                                OrderyReportProduct.CutoffShipDay = DateTime.Parse(PaymentConfirmTime.ToString().Trim()).AddDays(+20);//截止发货日 
                                            }

                                            //decimal SalesPriceV = Convert.ToDecimal(OrderSellerPrice.ToString().Trim());//销售价
                                            //OrderyReportProduct.SalesPrice = Math.Round(SalesPriceV / Convert.ToInt32(ItemTotal), 2);// SalesPriceV / Convert.ToInt32(ItemTotal);//销售价
                                            OrderyReportProduct.SalesPrice = decimal.Parse(JdPrice) * Convert.ToInt32(ItemTotal);//销售价
                                            OrderyReportProduct.IsEnable = false;//是否删除
                                            OrderyReportProduct.IsAudit = false;//是否审核
                                            OrderyReportProduct.ISArrivedLibrary = false;//是否抵库
                                            OrderyReportProduct.IsExpedited = false;//是否加急

                                            if (scProductName == "")
                                            {
                                                scProductName = OrderyReportProduct.ProductName;
                                                //scSalePrice = decimal.Parse(OrderyReportProduct.SalesPrice == null ? "0" : OrderyReportProduct.SalesPrice.ToString());
                                            }

                                            if (HozestERPContext.Current.User != null)
                                            {
                                                OrderyReportProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                OrderyReportProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                            }
                                            else
                                            {
                                                string UserName = "admin";
                                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                if (customer.Count > 0)
                                                {
                                                    OrderyReportProduct.CreateID = customer[0].CustomerID;
                                                    OrderyReportProduct.UpdateID = customer[0].CustomerID;
                                                }
                                            }

                                            OrderyReportProduct.CreateDate = DateTime.Now;
                                            OrderyReportProduct.UpdateDate = DateTime.Now;
                                            xmorderInfo.XM_OrderInfoProductDetails.Add(OrderyReportProduct);
                                        }
                                        //InsertXMOrderInfo(OrderyReport);//base.ProjectService.InsertXMOrderInfo(OrderyReport);
                                        #endregion
                                    }
                                }
                            }
                            //是否刷单
                            orderstatus = "WAIT_SELLER_STOCK_OUT,WAIT_SELLER_DELIVERY,WAIT_GOODS_RECEIVE_CONFIRM,SEND_TO_DISTRIBUTION_CENER,RECEIPTS_CONFIRM,FINISHED_L,DISTRIBUTION_CENTER_RECEIVED,TRADE_CANCELED";
                            if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                            {
                                xmorderInfo.IsScalping = IoC.Resolve<IXMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), OrderId, Remarks, CustomerServiceRemark, Pin, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额 ：订单支付金额
                            }
                            xmorderInfo.ProductPrice = productprice;//商品总额

                            #region  保存数据

                            IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);

                            //新建发票
                            if (xmorderInfo.IsInvoiced != null && xmorderInfo.IsInvoiced == true)
                            {
                                if (InvoiceInfo.IndexOf("普通发票") > -1)
                                {
                                    ToAddXMInvoiceInfo(xmorderInfo, 719, "", "", "", "", "");
                                }
                                else if (InvoiceInfo.IndexOf("专用发票") > -1)
                                {
                                    if (orderlst[i].vat_invoice_info != null)
                                    {
                                        ToAddXMInvoiceInfo(xmorderInfo, 720, orderlst[i].vat_invoice_info.taxpayer_ident, orderlst[i].vat_invoice_info.registered_address, orderlst[i].vat_invoice_info.registered_phone, orderlst[i].vat_invoice_info.deposit_bank, orderlst[i].vat_invoice_info.bank_account);
                                    }
                                    else
                                    {
                                        ToAddXMInvoiceInfo(xmorderInfo, 720, "", "", "", "", "");
                                    }
                                }
                            }

                            #endregion
                        }
                        #endregion

                        #region 修改
                        else
                        {
                            #region 订单主表信息
                            if (Modified != null && Modified != "")
                            {
                                xmorderInfo.OrderInfoModified = DateTime.Parse(Modified);
                            }
                            if (PaymentConfirmTime != null && PaymentConfirmTime != "")
                            {
                                xmorderInfo.PayDate = DateTime.Parse(PaymentConfirmTime.ToString().Trim());

                                if (OrderState.ToString().Trim() == "WAIT_GOODS_RECEIVE_CONFIRM")//等等确认收货
                                {
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Parse(Modified.ToString().Trim());//发货时间
                                    }
                                }
                                if (OrderState.ToString().Trim() == "FINISHED_L")//完成时间
                                {
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Parse(Modified.ToString().Trim());//发货时间
                                    }
                                    if (xmorderInfo.CompletionTime == null)
                                    {
                                        xmorderInfo.CompletionTime = DateTime.Parse(Modified.ToString().Trim());//完成时间
                                        AutoSingleRow(OrderId);
                                    }
                                }
                                //DateTime.Parse(PaymentConfirmTime.ToString().Trim()).AddDays(+15);//发货时间


                                //OrderyReportProduct.CutoffShipDay = DateTime.Parse(PaymentConfirmTime.ToString().Trim()).AddDays(+20);//截止发货日 
                            }

                            if (OrderStartTime.ToString().Trim() != null && OrderStartTime.ToString().Trim() != "")
                            {
                                xmorderInfo.OrderInfoCreateDate = DateTime.Parse(OrderStartTime.ToString().Trim());//创单时间

                            }
                            decimal SalesPriceV1 = Convert.ToDecimal(OrderSellerPrice.ToString().Trim());//销售价 
                            xmorderInfo.RealPointFee = decimal.Parse(GiftPoint == "" ? "0" : GiftPoint);//京豆

                            xmorderInfo.WantID = Pin;//买家旺旺id
                            //xmorderInfo.FullName = Fullname.ToString().Trim();//收货人名称
                            //xmorderInfo.DeliveryAddress = FullAddress.ToString().Trim();//收货人地址
                            //xmorderInfo.Province = Province.ToString().Trim();//收货人省
                            //xmorderInfo.City = City.ToString().Trim();//收货人市
                            //xmorderInfo.County = County.ToString().Trim();//收货人区
                            //string sMobile = Mobile.ToString().Trim();//收货人手机
                            //if (sMobile.IndexOf("'") == -1)
                            //{
                            //    xmorderInfo.Mobile = Mobile.ToString().Trim();
                            //}
                            //else
                            //{
                            //    string suMobile = sMobile.Substring(Mobile.LastIndexOf("'") + 1).ToLower();
                            //    xmorderInfo.Mobile = suMobile;
                            //}

                            //xmorderInfo.Tel = Telephone.ToString();//收货人电话
                            xmorderInfo.IsInvoiced = IsInvoices.Value;//是否发票
                            xmorderInfo.InvoiceNo = InvoiceNo;//发票编号

                            if (xmorderInfo.IsInvoiced == true && InvoiceInfo.IndexOf("发票抬头:") != -1 && (InvoiceInfo.LastIndexOf(";") - InvoiceInfo.IndexOf("发票抬头:")) > 5)
                            {
                                string invoiceHead = InvoiceInfo.Substring(InvoiceInfo.IndexOf("发票抬头:") + 5, InvoiceInfo.LastIndexOf(";") - InvoiceInfo.IndexOf("发票抬头:") - 5);
                                xmorderInfo.InvoiceHead = invoiceHead;
                            }

                            xmorderInfo.PayMethod = paymethod;//支付方式
                            xmorderInfo.DistributePrice = Decimal.Parse(orderlst[i].freight_price);//配送费用（京东）
                            xmorderInfo.OrderPrice = Decimal.Parse(orderlst[i].order_total_price);//订单总金额
                            xmorderInfo.ReceivablePrice = decimal.Parse(orderlst[i].order_seller_price);//应收金额
                            xmorderInfo.OrderPromotion = PlatformDiscountAmount;//平台优惠
                            xmorderInfo.ProductPromotion = MerchantDiscountAmount;//商家优惠
                            xmorderInfo.PayPrice = payprice;//已支付金额
                            xmorderInfo.IsOurOrder = true;//是我们的订单

                            //OrderyReportProduct.SalesPrice = Math.Round(SalesPriceV1 / Convert.ToInt32(ItemTotal), 2);// SalesPriceV1 / Convert.ToInt32(ItemTotal);//销售价

                            xmorderInfo.OrderStatus = OrderState.ToString().Trim();

                            #region 赠品、返现 (修改)   京东只有订单完成返现才生成赠品发现信息
                            //if (OrderState.ToString().Trim() == "RECEIPTS_CONFIRM" || OrderState.ToString().Trim() == "FINISHED_L")
                            //{
                            if (xmorderInfo.CustomerServiceRemark.Trim() != CustomerServiceRemark.Trim())
                            {
                                string CustomerServiceRemarkOld = xmorderInfo.CustomerServiceRemark.Trim();
                                string CustomerServiceRemarkNew = CustomerServiceRemark.Trim();

                                if (CustomerServiceRemarkNew.IndexOf("/赠品") > -1 || CustomerServiceRemarkNew.IndexOf("/退差价") > -1)
                                {
                                    IoC.Resolve<IXMOrderInfoAPIService>().XMPremiumsAndCashBackApplication(CustomerServiceRemarkOld, CustomerServiceRemarkNew, xmorderInfo.OrderCode, xmorderInfo.WantID, xmorderInfo.FullName, (int)xmorderInfo.PlatformTypeId, (int)xmorderInfo.NickID);
                                }
                            }
                            //}
                            #endregion

                            #region 发票

                            if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                            {

                                if (CustomerServiceRemark.IndexOf("发票") > -1)
                                {
                                    IsInvoices = true;//要发票
                                }

                            }
                            #endregion

                            //更改收货地址
                            //if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
                            //{
                            //    string csr = CustomerServiceRemark + "$";
                            //    string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                            //    string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");

                            //    xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                            //}

                            string Memo = Remarks + CustomerServiceRemark;//OrderRemark.Substring(OrderRemark.LastIndexOf("'") + 1).ToLower();
                            string RemarksValue = "";
                            string StatusValue = "";
                            if (xmorderInfo.Remark != null && xmorderInfo.CustomerServiceRemark != null)
                            {
                                RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;
                            }
                            if (xmorderInfo.OrderStatus != null)
                            {
                                StatusValue = xmorderInfo.OrderStatus.Trim();
                            }

                            if (Memo.Trim() != RemarksValue.Trim() || StatusValue != OrderState.ToString().Trim() || DateTime.Parse(PaymentConfirmTime.ToString().Trim()) != xmorderInfo.PayDate)
                            {
                                xmorderInfo.Remark = Remarks;
                                xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//修改
                                //xmorderInfo.City = City.ToString().Trim();
                                //xmorderInfo.County = County.ToString().Trim();
                                //xmorderInfo.Province = Province.ToString().Trim();
                                xmorderInfo.IsInvoiced = IsInvoices.Value;

                                #region 记录操作

                                int UpsatorID = 0;
                                if (HozestERPContext.Current.User != null)
                                {
                                    UpsatorID = HozestERPContext.Current.User.CustomerID;
                                }
                                else
                                {
                                    string UserName = "admin";
                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                    if (customer.Count > 0)
                                    {
                                        UpsatorID = customer[0].CustomerID;
                                    }
                                }

                                if (PaymentConfirmTime.ToString().Trim() != null && PaymentConfirmTime.ToString().Trim() != "")
                                {
                                    if (xmorderInfo.PayDate != Convert.ToDateTime(PaymentConfirmTime.ToString().Trim()))
                                    {
                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                        record.OrderInfoId = xmorderInfo.ID;
                                        record.PropertyName = "PayDate";
                                        record.OldValue = System.Convert.ToString(xmorderInfo.PayDate);
                                        record.NewValue = PaymentConfirmTime.ToString().Trim();
                                        record.UpdatorID = UpsatorID;
                                        record.UpdateTime = DateTime.Now;
                                        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record);// base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                                    }
                                }

                                if (Modified != null && Modified != "")
                                {
                                    if (xmorderInfo.OrderInfoModified != Convert.ToDateTime(Modified))
                                    {
                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                        record.OrderInfoId = xmorderInfo.ID;
                                        record.PropertyName = "OrderInfoModified";
                                        record.OldValue = System.Convert.ToString(xmorderInfo.OrderInfoModified);
                                        record.NewValue = Modified.ToString().Trim();
                                        record.UpdatorID = UpsatorID;
                                        record.UpdateTime = DateTime.Now;
                                        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record);//base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                                    }
                                }

                                if (Remarks != null && Remarks != "")
                                {
                                    if (xmorderInfo.Remark != Remarks)
                                    {
                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                        record.OrderInfoId = xmorderInfo.ID;
                                        record.PropertyName = "Remarks";
                                        record.OldValue = xmorderInfo.Remark;
                                        record.NewValue = Remarks;
                                        record.UpdatorID = UpsatorID;
                                        record.UpdateTime = DateTime.Now;
                                        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                    }
                                }
                                if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                {
                                    if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
                                    {
                                        var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, CustomerServiceRemark);
                                        if (RecordExist == null || RecordExist.Count == 0)
                                        {
                                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                            record.OrderInfoId = xmorderInfo.ID;
                                            record.PropertyName = "CustomerServiceRemark";
                                            record.OldValue = xmorderInfo.CustomerServiceRemark;
                                            record.NewValue = CustomerServiceRemark;
                                            record.UpdatorID = UpsatorID;
                                            record.UpdateTime = DateTime.Now;
                                            IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                        }
                                    }
                                }
                                if (xmorderInfo.OrderStatus != OrderState.ToString().Trim())
                                {
                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    record.OrderInfoId = xmorderInfo.ID;
                                    record.PropertyName = "OrderStatusId";
                                    record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                                    record.NewValue = System.Convert.ToString(OrderState.ToString().Trim());
                                    record.UpdatorID = UpsatorID;

                                    if (Modified != null && Modified != "")
                                    {
                                        record.UpdateTime = DateTime.Parse(Modified);
                                    }
                                    else
                                    {
                                        record.UpdateTime = DateTime.Now;
                                    }
                                    IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                }

                                #endregion
                            }

                            if (HozestERPContext.Current.User != null)
                            {
                                xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                            }
                            else
                            {
                                string UserName = "admin";
                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                if (customer.Count > 0)
                                {
                                    xmorderInfo.UpdateID = customer[0].CustomerID;
                                }
                            }

                            xmorderInfo.UpdateDate = DateTime.Now;

                            #endregion

                            string scProductName = "";//商品名称（刷单）
                            //decimal scSalePrice = 0;//销售价(刷单)
                            decimal priceTotal = 0;//总商品金额
                            for (int k = 0; k < orderInfoitems.Count(); k++)
                            {
                                if (orderInfoitems[k].sku_name.Contains("大礼包"))
                                    continue;
                                var order = orderInfoitems;
                                decimal PriceNum = decimal.Parse(order[k].jd_price == null ? "0" : (order[k].jd_price == "" ? "0" : order[k].jd_price)) * decimal.Parse(order[k].item_total);
                                priceTotal += PriceNum;
                            }
                            decimal payPriceK = 0;//已赋值付款金额

                            #region 注释的原订单从表商品详情
                            //for (int j = 0; j < orderlst[i].ItemInfoList.Count; j++)
                            //{
                            //    SkuName = orderlst[i].ItemInfoList[j].SkuName;
                            //    ItemTotal = orderlst[i].ItemInfoList[j].ItemTotal;
                            //    JdPrice = orderlst[i].ItemInfoList[j].JdPrice;
                            //    OuterSkuId = orderlst[i].ItemInfoList[j].OuterSkuId;
                            //    SkuId = orderlst[i].ItemInfoList[j].SkuId;
                            //    WareId = orderlst[i].ItemInfoList[j].WareId;
                            //    if ((SkuId != "" && SkuId != null))
                            //    {

                            //        #region 数据赋值
                            //        //京东Id查询。
                            //        var ProductList = this.GetXMProductListByPlatFormMerchantCode(SkuId.ToString(), int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());

                            //        //var OrderyReportProduct = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == SkuId).SingleOrDefault();

                            //        //if (OrderyReportProduct == null)
                            //        //{
                            //        //    OrderyReportProduct = new XMOrderInfoProductDetails();
                            //        //}
                            //        var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == SkuId).ToList();//.SingleOrDefault();

                            //        XMOrderInfoProductDetails OrderyReportProduct = null;

                            //        if (OrderyReportProductList.Count == 0)
                            //        {
                            //            OrderyReportProduct = new XMOrderInfoProductDetails();
                            //        }
                            //        else
                            //        {

                            //            OrderyReportProduct = OrderyReportProductList[0];
                            //        }

                            //        decimal FactoryPrice = 0;

                            //        if (ProductList.Count > 0)
                            //        {
                            //            if (ProductList[0].TDateTimeStart != null && ProductList[0].TDateTimeEnd != null && PaymentConfirmTime != null && PaymentConfirmTime != "" && PaymentConfirmTime != "0001-01-01 00:00:00")
                            //            {
                            //                if (DateTime.Parse(PaymentConfirmTime.ToString().Trim()) >= ProductList[0].TDateTimeStart && DateTime.Parse(PaymentConfirmTime.ToString().Trim()) <= ProductList[0].TDateTimeEnd)
                            //                {
                            //                    OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                            //                    OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                            //                    OrderyReportProduct.FactoryPrice = ProductList[0].TCostprice * Convert.ToInt32(ItemTotal);//出厂价
                            //                    OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                            //                    FactoryPrice = ProductList[0].TCostprice.Value * Convert.ToInt32(ItemTotal);//出厂价
                            //                }
                            //                else
                            //                {
                            //                    OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                            //                    OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                            //                    OrderyReportProduct.FactoryPrice = ProductList[0].Costprice * Convert.ToInt32(ItemTotal);//出厂价
                            //                    OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                            //                    FactoryPrice = ProductList[0].Costprice.Value * Convert.ToInt32(ItemTotal);//出厂价
                            //                }

                            //            }
                            //            else
                            //            {
                            //                OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                            //                OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                            //                OrderyReportProduct.FactoryPrice = ProductList[0].Costprice * Convert.ToInt32(ItemTotal);//出厂价
                            //                OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                            //                FactoryPrice = ProductList[0].Costprice.Value * Convert.ToInt32(ItemTotal);//出厂价
                            //            }
                            //        }
                            //        else
                            //        {
                            //            OrderyReportProduct.PlatformMerchantCode = SkuId; //料号（商品编码）
                            //            OrderyReportProduct.Specifications = "";//尺寸
                            //            OrderyReportProduct.FactoryPrice = 0;//出厂价
                            //            OrderyReportProduct.ProductName = "无产品";
                            //        }

                            //        if (scProductName == "")
                            //        {
                            //            scProductName = OrderyReportProduct.ProductName;
                            //            //scSalePrice = decimal.Parse(OrderyReportProduct.SalesPrice == null ? "0" : OrderyReportProduct.SalesPrice.ToString());
                            //        }

                            //        if (Memo.Trim() != RemarksValue.Trim() || StatusValue != OrderState.ToString().Trim() || DateTime.Parse(PaymentConfirmTime.ToString().Trim()) != xmorderInfo.PayDate
                            //            || OrderyReportProduct.FactoryPrice.ToString() != FactoryPrice.ToString())
                            //        {
                            //            if (PaymentConfirmTime != null && PaymentConfirmTime != "")
                            //            {
                            //                OrderyReportProduct.CutoffShipDay = DateTime.Parse(PaymentConfirmTime.ToString().Trim()).AddDays(+20);//截止发货日 
                            //            }
                            //            //OrderyReportProduct.SalesPrice = Math.Round(SalesPriceV1 / Convert.ToInt32(ItemTotal), 2);// SalesPriceV1 / Convert.ToInt32(ItemTotal);//销售价
                            //            OrderyReportProduct.SalesPrice = decimal.Parse(JdPrice);//销售价
                            //            if (HozestERPContext.Current.User != null)
                            //            {
                            //                OrderyReportProduct.UpdateID = HozestERPContext.Current.User.CustomerID;
                            //            }
                            //            else
                            //            {
                            //                string UserName = "admin";
                            //                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                            //                if (customer.Count > 0)
                            //                {
                            //                    OrderyReportProduct.UpdateID = customer[0].CustomerID;
                            //                }
                            //            }

                            //            OrderyReportProduct.UpdateDate = DateTime.Now;
                            //        }
                            //        #endregion
                            //    }
                            //}
                            #endregion

                            //是否刷单
                            orderstatus = "WAIT_SELLER_STOCK_OUT,WAIT_SELLER_DELIVERY,WAIT_GOODS_RECEIVE_CONFIRM,SEND_TO_DISTRIBUTION_CENER,RECEIPTS_CONFIRM,FINISHED_L,DISTRIBUTION_CENTER_RECEIVED,TRADE_CANCELED";
                            if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                            {
                                xmorderInfo.IsScalping = IoC.Resolve<IXMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), OrderId, Remarks, CustomerServiceRemark, Pin, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                            }

                            #region 保存数据

                            IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);

                            #endregion

                        }
                        #endregion
                    }
                }
            }
            catch (Exception ex)
            {
                //throw new Exception(e.Message);
                IoC.Resolve<IRecordErrorLogs>().WriteErrorLog("负责人:" + HozestERPContext.Current.User.CustomerID.ToString() + ";   方法名:PageJDOrderData;  异常提示：" + ex.Message.ToString() + ";   InnerException:" + ex.InnerException);
            }
        }

        /// <summary>
        /// 同步天猫数据  taobao.trades.sold.increment.get 查询卖家已卖出的增量交易数据（根据修改时间）
        /// </summary>
        /// <param name="createDateStart"></param>
        /// <param name="createDateEnd"></param>
        /// <param name="Status"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        public void SynchronousTMTradesSoldIncrementGetList(string createDateStart, string createDateEnd, string Status, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            Int64 totalCount;
            int pageSize = 50;//每页的条数
            for (int i = 1; i < 100; i++)
            {
                int ICount = 0;
                int UCount = 0;

                var listTrade = GetTradesSoldIncrementGetList(createDateStart, createDateEnd, Status, i, pageSize, out totalCount, true, xMorderInfoApp);

                //无数据
                if (listTrade == null)
                {
                    return;
                }

                if (listTrade.Count > 0)
                {
                    PageTMOrderDataList(listTrade, ref ICount, ref UCount, xMorderInfoApp);
                }
                InsertCount += ICount;
                UpdateCount += UCount;
                if (listTrade.Count < 50)
                {
                    return;
                }
            }
        }

        /// <summary>
        /// 同步天猫数据
        /// </summary>
        /// <param name="createDateStart"></param>
        /// <param name="createDateEnd"></param>
        /// <param name="Status"></param>
        /// <param name="TMparamMessage"></param>
        /// <param name="?"></param>
        public void SynchronousTMOrderData(string createDateStart, string createDateEnd, string Status, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            Int64 totalCount;
            int pageSize = 100;//每页的条数
            for (int i = 1; i < 100; i++)
            {
                int ICount = 0;
                int UCount = 0;

                var listTrade = GetTradeList(createDateStart, createDateEnd, Status, i, pageSize, out totalCount, true, xMorderInfoApp);

                //无数据
                if (listTrade == null)
                {
                    return;
                }

                if (listTrade.Count > 0)
                {
                    PageTMOrderDataList(listTrade, ref ICount, ref UCount, xMorderInfoApp);

                }
                InsertCount += ICount;
                UpdateCount += UCount;
                if (listTrade.Count < 100)
                {
                    return;
                }
            }
        }

        /// <summary>
        /// 天猫
        /// </summary>
        /// <param name="listTrade"></param>
        /// <param name="resultCount"></param>
        /// <param name="updateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        private void PageTMOrderDataList(List<Trade> listTrade, ref int resultCount, ref int updateCount, XMOrderInfoApp xMorderInfoApp)
        {
            string Tid = "";
            try
            {
                for (int i = 0; i < listTrade.Count; i++)
                {
                    XMOrderInfo xmOrderInfo = new XMOrderInfo();

                    Trade trade = null;
                    List<Order> order = null;

                    if (listTrade[i].Tid != null)
                    {
                        trade = GetTrade(listTrade[i].Tid, xMorderInfoApp);//,orderInfoApp
                        //order = trade.Orders;
                    }

                    if (listTrade[i].Orders.Count > 0)
                    {
                        order = listTrade[i].Orders;
                    }
                    string buyerNick = "";//ID 
                    // string Remarks = "";//listTrade[i].BuyerMemo;//买家备注（与淘宝网上订单的买家备注对应，只有买家才能查看该字段）
                    string CustomerServiceRemark = ""; // listTrade[i].SellerMemo;//客服备注  卖家备注

                    string buyermessage = trade.BuyerMessage;//买家留言

                    string SellerMemo = "";
                    //是否发票  
                    bool? IsInvoices = false;

                    if (trade != null)
                    {
                        buyerNick = trade.BuyerNick;//ID 
                        SellerMemo = trade.SellerMemo; //备注
                        #region 备注

                        if (SellerMemo != null)
                        {
                            CustomerServiceRemark = SellerMemo;

                            if (SellerMemo.IndexOf("发票") > -1)
                            {
                                IsInvoices = true;//要发票
                            }
                        }
                        else
                        {

                            CustomerServiceRemark = "";
                            //Remarks = "";
                        }
                        #endregion
                    }
                    string buyeralipayno = trade.BuyerAlipayNo;//收款人账号
                    string created = listTrade[i].Created;// 创单时间
                    string Modified = listTrade[i].Modified;//修改时间
                    string PayTime = listTrade[i].PayTime;//支付时间
                    string ReceivedPayPayment = listTrade[i].ReceivedPayment;//支付宝到帐金额
                    string ConsignTime = listTrade[i].ConsignTime;//卖家发货时间
                    string Payment = listTrade[i].Payment == null ? "0" : listTrade[i].Payment;//支付金额 
                    if (listTrade[i].StepPaidFee != null)
                    {
                        Payment = listTrade[i].StepPaidFee == null ? "0" : listTrade[i].StepPaidFee;//预付金额 
                    }
                    if (listTrade[i].PaidCouponFee != null) //支付金额减去满减金额
                    {
                        Payment = (decimal.Parse(Payment) - decimal.Parse(listTrade[i].PaidCouponFee)).ToString();
                    }
                    string receiverState = listTrade[i].ReceiverState; //省
                    string receiverAddress = listTrade[i].ReceiverAddress;//详细地址
                    string receiverCity = listTrade[i].ReceiverCity;//市
                    string receiverDistrict = listTrade[i].ReceiverDistrict;//区 
                    long pNum = listTrade[i].Num;
                    string receiverZip = listTrade[i].ReceiverZip;

                    string Mobile = "";
                    string ReceiverMobile = listTrade[i].ReceiverMobile;//手机 

                    if (ReceiverMobile != null)
                    {
                        if (ReceiverMobile.IndexOf("'") == -1)
                        {
                            Mobile = listTrade[i].ReceiverMobile;//手机
                        }
                        else
                        {
                            string suMobile = ReceiverMobile.Substring(ReceiverMobile.LastIndexOf("'") + 1).ToLower();
                            Mobile = suMobile;
                        }
                    }
                    else
                    {
                        Mobile = "";
                    }

                    string receiverName = listTrade[i].ReceiverName;//收货人
                    string receiverPhone = listTrade[i].ReceiverPhone;//电话
                    string Address = receiverState + receiverCity + receiverDistrict + receiverAddress + "(" + receiverZip + ")";//地址   
                    Tid = listTrade[i].Tid.ToString();//订单编号
                    string TotalFee = listTrade[i].TotalFee; //总费用  
                    string ShippingType = trade.ShippingType;//

                    string OuterSkuId = "";//商品编码
                    long num = 0;//数量
                    string title = "";
                    string InvoiceNo = "";//包裹的运单号
                    string LogisticsCompanys = "";//发货的快递公司名称
                    string price = "";//单价
                    decimal scSalePrice = 0;//销售价(刷单)

                    //平台优惠金额
                    decimal PlatformDiscountAmount = 0;
                    if (trade.PromotionDetails != null && trade.PromotionDetails.Count > 0)
                    {
                        foreach (var item in trade.PromotionDetails)
                        {
                            if (item.PromotionName == "红包" || item.PromotionName == "天猫购物券" || item.PromotionName == "天猫积分" || item.PromotionName == "集分宝")
                            {
                                PlatformDiscountAmount += decimal.Parse(item.DiscountFee);
                            }
                        }
                    }

                    //if (order.Count > 0 && order[0].Title != null && order[0].Title != "喜临门城市爱情运费补拍专用链接")
                    //{
                    //订单主表详情
                    XMOrderInfo xmorderInfo = new XMOrderInfo();
                    xmorderInfo = GetXMOrderInfoByOrderCode(Tid);

                    #region 新增
                    if (xmorderInfo == null)
                    {
                        xmorderInfo = new XMOrderInfo();
                        xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();
                        xmorderInfo.NickID = xMorderInfoApp.NickId.Value; //1;//1:城市爱情旗舰店
                        xmorderInfo.PlatformTypeId = xMorderInfoApp.PlatformTypeId;//250;//平台类型（天猫）
                        xmorderInfo.OrderInfoCreateDate = Convert.ToDateTime(created);//创单时间

                        if (PayTime != null && PayTime != "" && PayTime != "0001-01-01 00:00:00")
                        {

                            if (listTrade[i].StepTradeStatus == "FRONT_PAID_FINAL_NOPAID")//只付预付款不算已付款订单
                            {

                            }
                            else
                            {
                                xmorderInfo.PayDate = Convert.ToDateTime(PayTime);//付款时间
                            }

                            if (ConsignTime != "" && ConsignTime != null && ConsignTime != "0001-01-01 00:00:00")// "WAIT_BUYER_CONFIRM_GOODS")//等待买家确认收货,即:卖家已发货
                            {
                                xmorderInfo.DeliveryTime = Convert.ToDateTime(ConsignTime);//发货时间
                            }
                            if (listTrade[i].Status == "TRADE_FINISHED")//交易成功
                            {
                                if (Modified != null && Modified != "" && Modified != "0001-01-01 00:00:00")
                                {
                                    //发货时间为空时 发货时间等于发成时间
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Parse(Modified.ToString().Trim());//发货时间
                                    }
                                    if (xmorderInfo.CompletionTime == null)
                                    {
                                        xmorderInfo.CompletionTime = DateTime.Parse(Modified.ToString().Trim());//完成时间
                                        AutoSingleRow(Tid);
                                    }
                                }
                            }

                            // DateTime.Parse(PayTime.ToString().Trim()).AddDays(+15);//发货时间
                            //XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//发货时间

                            #region 赠品、返现  只有订单完成才生成返现和赠品信息
                            //    trade.Status.ToString().Trim() == "WAIT_SELLER_SEND_GOODS" || trade.Status.ToString().Trim() == "SELLER_CONSIGNED_PART"
                            //|| trade.Status.ToString().Trim() == "WAIT_BUYER_CONFIRM_GOODS" || 
                            //|| trade.Status.ToString().Trim() == "WAIT_SELLER_STOCK_OUT" || trade.Status.ToString().Trim() == "WAIT_GOODS_RECEIVE_CONFIRM"
                            //|| trade.Status.ToString().Trim() == "FINISHED_L"
                            //if (trade.Status.ToString().Trim() == "TRADE_FINISHED")//WAIT_SELLER_SEND_GOODS(等待卖家发货,即:买家已付款)
                            //{
                            if (created.ToString().Trim() != null && created.ToString().Trim() != "")
                            {
                                if (DateTime.Parse(created.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                {
                                    if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                    {
                                        //string BuyerAlipayNoS = buyeralipayno;//收款账号  
                                        string BuyerName = receiverName;//收货人名称
                                        string WantNo = buyerNick;//旺旺号
                                        string OrderCode = Tid;//订单号 
                                        string paramMessage = string.Empty;

                                        if (CustomerServiceRemark.IndexOf("/赠品") > -1 || CustomerServiceRemark.IndexOf("/退差价") > -1)
                                        {
                                            #region 赠品
                                            if (CustomerServiceRemark.IndexOf("/赠品") > -1)
                                            {
                                                //返回赠品条数
                                                int PremiumsInst = XMPremiumsInst(CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, xMorderInfoApp.PlatformTypeId.Value, xMorderInfoApp.NickId.Value);

                                            }
                                            #endregion

                                            #region 返现
                                            if (CustomerServiceRemark.IndexOf("/退差价") > -1)
                                            {
                                                if ((CustomerServiceRemark.IndexOf("/支付宝") > -1 || CustomerServiceRemark.IndexOf("/卡号") > -1))
                                                {
                                                    //返回返现条数
                                                    int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                                }
                                                else
                                                {

                                                    //返回返现条数
                                                    int CashBackApplicationInstCount = TMCashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                                }
                                            }

                                            #endregion
                                        }
                                    }
                                }
                            }

                            //}
                            #endregion

                        }
                        if (Modified != null && Modified != "")
                        {
                            xmorderInfo.OrderInfoModified = DateTime.Parse(Modified);//变更时间
                        }
                        xmorderInfo.OrderCode = Tid;//订单号
                        xmorderInfo.OrderStatus = listTrade[i].Status;//状态 
                        //orderInfo.LogisticsId = LogisticsCompanys;//物流公司ID 
                        // orderInfo.LogisticsNumber = InvoiceNo;//物流单号(运单号) 
                        xmorderInfo.WantID = buyerNick;//旺旺id
                        xmorderInfo.Mobile = Mobile;//手机
                        xmorderInfo.Tel = receiverPhone;//电话
                        xmorderInfo.BuyerE_mail = listTrade[i].BuyerEmail;//买家邮件地址
                        xmorderInfo.FullName = receiverName;//姓名

                        //orderInfo.Province= receiverState; //省 
                        //orderInfo.City =receiverCity;//市
                        //orderInfo.County= receiverDistrict;//区 
                        if (receiverCity != null)
                        {
                            xmorderInfo.City = receiverCity.ToString().Trim();//市
                        }
                        if (receiverDistrict != null)
                        {
                            xmorderInfo.County = receiverDistrict.ToString().Trim();//区
                        }
                        if (receiverState != null)
                        {
                            xmorderInfo.Province = receiverState.ToString().Trim();//省
                        }
                        xmorderInfo.DeliveryAddress = Address;//收货地址
                        xmorderInfo.SourceType = "同步";//数据来源类型
                        xmorderInfo.FinancialAudit = true;//财务审核
                        xmorderInfo.Remark = buyermessage;// Remarks;//备注
                        xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//客服备注（新增）
                        xmorderInfo.IsInvoiced = IsInvoices.Value;//是否发票
                        xmorderInfo.InvoiceHead = listTrade[i].InvoiceName;//发票抬头
                        xmorderInfo.PayMethod = listTrade[i].Type;//支付方式
                        xmorderInfo.DistributeMethod = listTrade[i].ShippingType;//配送方式
                        xmorderInfo.DistributePrice = Decimal.Parse(listTrade[i].PostFee == null ? "0" : listTrade[i].PostFee);//配送费用（天猫）
                        xmorderInfo.IsDistributed = listTrade[i].HasYfx;//是否保价（运费险）
                        if (trade.HasYfx == true)
                        {
                            xmorderInfo.SupportPrice = Decimal.Parse(listTrade[i].YfxFee == null ? "0" : listTrade[i].YfxFee);//保价费用
                        }
                        xmorderInfo.ProductPrice = decimal.Parse(listTrade[i].TotalFee == null ? "0" : listTrade[i].TotalFee);//商品总金额
                        xmorderInfo.Taxes = decimal.Parse(listTrade[i].CommissionFee == null ? "0" : listTrade[i].CommissionFee);//税金

                        decimal ordertotal = 0;//订单总金额  (商品总额+邮费+运费险+交易佣金)
                        ordertotal = decimal.Parse(listTrade[i].TotalFee == null ? "0" : listTrade[i].TotalFee) + Decimal.Parse(listTrade[i].PostFee == null ? "0" : listTrade[i].PostFee);
                        if (xmorderInfo.IsDistributed == true)
                        {
                            ordertotal += Decimal.Parse(listTrade[i].YfxFee == null ? "0" : listTrade[i].YfxFee);
                        }
                        ordertotal += decimal.Parse(listTrade[i].CommissionFee == null ? "0" : listTrade[i].CommissionFee);
                        xmorderInfo.OrderPrice = ordertotal;//订单金额

                        decimal receiveprice = 0;//应收金额  （订单总金额-优惠金额）
                        if (listTrade[i].PromotionDetails != null && listTrade[i].PromotionDetails.Count > 0)
                        {
                            receiveprice = ordertotal - decimal.Parse(listTrade[i].PromotionDetails[0].DiscountFee == null ? "0" : listTrade[i].PromotionDetails[0].DiscountFee);
                        }
                        xmorderInfo.PayPrice = Decimal.Parse(Payment) + PlatformDiscountAmount;//支付金额
                        xmorderInfo.ReceivablePrice = Decimal.Parse(ReceivedPayPayment);//支付宝到帐金额
                        //orderInfo.IsScalping = false;//是否刷单


                        scSalePrice = Decimal.Parse(Payment);//支付金额

                        xmorderInfo.IsCashBack = false;//是否返现
                        xmorderInfo.IsSentGifts = false;//是否已发赠品 
                        xmorderInfo.IsEvaluate = false;//是否赔付
                        xmorderInfo.IsEnable = false;//是否删除
                        xmorderInfo.IsOurOrder = true;//是我们的订单

                        if (trade.BuyerObtainPointFee != null)
                        {
                            xmorderInfo.BuyerObtainPointFee = decimal.Parse(trade.BuyerObtainPointFee.ToString());//买家获得积分,返点的积分
                        }

                        xmorderInfo.TradeFrom = trade.TradeFrom;//交易内部来源
                        if (trade.RealPointFee != null)
                        {
                            xmorderInfo.RealPointFee = decimal.Parse(trade.RealPointFee.ToString());//买家实际使用积分
                        }
                        if (trade.CommissionFee != null)
                        {
                            xmorderInfo.CommissionFee = decimal.Parse(trade.CommissionFee.ToString());//交易佣金
                        }
                        xmorderInfo.TradeSource = trade.TradeSource;//交易外部来源
                        if (trade.CreditCardFee != null)
                        {
                            xmorderInfo.CreditCardFee = decimal.Parse(trade.CreditCardFee.ToString());//使用信用卡支付金额数
                        }

                        if (HozestERPContext.Current.User != null)
                        {
                            xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                            xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;

                        }
                        else
                        {
                            string UserName = "admin";
                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                            if (customer.Count > 0)
                            {
                                xmorderInfo.CreateID = customer[0].CustomerID;
                                xmorderInfo.UpdateID = customer[0].CustomerID;
                            }
                        }

                        xmorderInfo.CreateDate = DateTime.Now;
                        xmorderInfo.UpdateDate = DateTime.Now;


                        string scProductName = "";//商品名称（刷单）
                        decimal priceTotal = 0;//总商品金额
                        for (int k = 0; k < order.Count; k++)
                        {
                            decimal PriceNum = decimal.Parse(order[k].Price == null ? "0" : (order[k].Price == "" ? "0" : order[k].Price)) * order[k].Num;
                            priceTotal += PriceNum;
                        }
                        decimal payPriceK = 0;//已赋值付款金额

                        for (int k = 0; k < order.Count; k++)
                        {
                            OuterSkuId = order[k].OuterSkuId;//商品编码
                            //如果没有细分的商家编码并且有统一的商家编码就用统一商家编码代替OuterSkuId
                            if (OuterSkuId == null && order[k].OuterIid != null)
                            {
                                OuterSkuId = order[k].OuterIid;
                            }
                            num = order[k].Num;//数量
                            title = order[k].Title; //标题
                            InvoiceNo = order[k].InvoiceNo;//包裹的运单号
                            LogisticsCompanys = order[k].LogisticsCompany;//发货的快递公司名称
                            price = order[k].Price;//销售价
                            //XMOrderInfoProductDetails XMOrderInfoProduct = new XMOrderInfoProductDetails();
                            if (OuterSkuId != "" && OuterSkuId != null)
                            {
                                //商家编码查询从表信息。
                                var ProductList = this.GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);

                                //2015-7-28新增
                                decimal a = 0;
                                decimal? tj = 0;
                                bool IsZuHe = false;
                                if (ProductList.Count == 0)
                                {
                                    ProductList = GetXMProductListByzuheCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                    a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                    if (ProductList.Count > 0)
                                    {
                                        IsZuHe = true;
                                    }
                                }

                                //var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                                //XMOrderInfoProductDetails XMOrderInfoProduct = null;

                                //if (OrderyReportProductList.Count == 0)
                                //{
                                //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                //}
                                //else
                                //{

                                //    XMOrderInfoProduct = OrderyReportProductList[0];
                                //}

                                if (ProductList.Count > 0)
                                {
                                    decimal payPriceI = 0;//组合已赋值付款金额
                                    decimal ZuHeTotal = 0;
                                    for (int w = 0; w < ProductList.Count; w++)
                                    {
                                        decimal ZuHeNum = (decimal)ProductList[w].Saleprice * decimal.Parse(ProductList[w].count.ToString());
                                        ZuHeTotal += ZuHeNum;
                                    }
                                    for (int s = 0; s < ProductList.Count; s++)
                                    {
                                        var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                        //商品关联主表信息
                                        //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                        if (ProductList[s].TDateTimeStart != null && ProductList[s].TDateTimeEnd != null && PayTime != null && PayTime != "" && PayTime != "0001-01-01 00:00:00")
                                        {
                                            if (Convert.ToDateTime(PayTime) >= ProductList[s].TDateTimeStart && Convert.ToDateTime(PayTime) <= ProductList[s].TDateTimeEnd)
                                            {
                                                //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                XMOrderInfoProduct.FactoryPrice = ProductList[s].TCostprice * Convert.ToInt32(num);//出厂价
                                                XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                XMOrderInfoProduct.TCostprice = ProductList[s].TCostprice;
                                                if (!string.IsNullOrEmpty(ProductList[s].TManufacturersCode))
                                                {
                                                    XMOrderInfoProduct.TManufacturersCode = ProductList[s].TManufacturersCode;
                                                }
                                                else
                                                {
                                                    XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                }
                                            }
                                            else
                                            {
                                                //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * num * ProductList[s].count;//出厂价*数量
                                                XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                            }
                                        }
                                        else
                                        {
                                            //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                            XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                            XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * num * ProductList[s].count;//出厂价*数量
                                            XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                            XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                            XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                        }

                                        XMOrderInfoProduct.ProductNum = Convert.ToInt32(num) * ProductList[s].count;//数量
                                        if (PayTime != null && PayTime != "")
                                        {
                                            XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//截止发货时间

                                        }
                                        //XMOrderInfoProduct.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);// Convert.ToDecimal(Payment) / Convert.ToInt32(num);//销售价
                                        //XMOrderInfoProduct.SalesPrice = decimal.Parse(price);//销售价
                                        //if (s < ProductList.Count - 1)
                                        //{
                                        //    XMOrderInfoProduct.SalesPrice = Math.Round(decimal.Parse(((ProductList[s].Costprice * ProductList[s].count * num / a) * decimal.Parse(price)).ToString()), 2);//销售价
                                        //    tj = tj + XMOrderInfoProduct.SalesPrice;
                                        //}
                                        //else
                                        //{
                                        //    XMOrderInfoProduct.SalesPrice = decimal.Parse(price) - tj;//销售价
                                        //}
                                        decimal PartPayPrice = 0;
                                        if (k == order.Count - 1)
                                        {
                                            PartPayPrice = (decimal)xmorderInfo.PayPrice - payPriceK;
                                        }
                                        else
                                        {
                                            PartPayPrice = Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(price) * num / priceTotal, 2);
                                            //payPriceK += PartPayPrice;
                                        }
                                        if (IsZuHe)
                                        {
                                            if (s == ProductList.Count - 1)
                                            {
                                                XMOrderInfoProduct.SalesPrice = PartPayPrice - payPriceI;
                                                payPriceK += PartPayPrice;
                                            }
                                            else
                                            {
                                                if (ZuHeTotal == 0) //产品销售价没有维护，是0时导致分母为0，计算出错
                                                {
                                                    XMOrderInfoProduct.SalesPrice = 0;
                                                }
                                                else
                                                {
                                                    XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice * (decimal)ProductList[s].Saleprice * decimal.Parse(ProductList[s].count.ToString()) / ZuHeTotal, 2);//销售价
                                                }
                                                payPriceI += (decimal)XMOrderInfoProduct.SalesPrice;
                                            }
                                        }
                                        else
                                        {
                                            XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice, 2);//销售价
                                            payPriceK += PartPayPrice;
                                        }

                                        XMOrderInfoProduct.IsEnable = false;//是否删除
                                        XMOrderInfoProduct.IsAudit = false;//是否审核
                                        XMOrderInfoProduct.IsExpedited = false;//是否加急

                                        XMOrderInfoProduct.ISArrivedLibrary = false;
                                        //XMOrderInfoProduct.ShippingType = ShippingType;

                                        //XMOrderInfoProduct.IsHadPlanBill = false;
                                        //XMOrderInfoProduct.IsReDelivery = false;
                                        //XMOrderInfoProduct.IsChangeGoods = false;
                                        //XMOrderInfoProduct.IsReturnGoods = false;
                                        //XMOrderInfoProduct.IsContinue = false;

                                        if (scProductName == "")
                                        {
                                            scProductName = XMOrderInfoProduct.ProductName;
                                            // scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                        }

                                        if (HozestERPContext.Current.User != null)
                                        {
                                            XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                            XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                        }
                                        else
                                        {
                                            string UserName = "admin";
                                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                            if (customer.Count > 0)
                                            {
                                                XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                            }
                                        }

                                        XMOrderInfoProduct.CreateDate = DateTime.Now;
                                        XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                        xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                    }
                                }
                                else
                                {
                                    var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                    XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                    XMOrderInfoProduct.Specifications = "";//尺寸
                                    XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                    XMOrderInfoProduct.ProductName = "无产品";

                                    xmorderInfo.IsAbnormal = true;//是否异常

                                    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                    if (PayTime != null && PayTime != "")
                                    {
                                        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//截止发货时间

                                    }
                                    //XMOrderInfoProduct.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);// Convert.ToDecimal(Payment) / Convert.ToInt32(num);//销售价
                                    XMOrderInfoProduct.SalesPrice = decimal.Parse(price) * Convert.ToInt32(num);//销售价
                                    XMOrderInfoProduct.IsEnable = false;//是否删除
                                    XMOrderInfoProduct.IsAudit = false;//是否审核
                                    XMOrderInfoProduct.IsExpedited = false;//是否加急

                                    XMOrderInfoProduct.ISArrivedLibrary = false;
                                    //XMOrderInfoProduct.ShippingType = ShippingType;

                                    //XMOrderInfoProduct.IsHadPlanBill = false;
                                    //XMOrderInfoProduct.IsReDelivery = false;
                                    //XMOrderInfoProduct.IsChangeGoods = false;
                                    //XMOrderInfoProduct.IsReturnGoods = false;
                                    //XMOrderInfoProduct.IsContinue = false;

                                    if (scProductName == "")
                                    {
                                        scProductName = XMOrderInfoProduct.ProductName;
                                        // scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                    }

                                    if (HozestERPContext.Current.User != null)
                                    {
                                        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                    }
                                    else
                                    {
                                        string UserName = "admin";
                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                        if (customer.Count > 0)
                                        {
                                            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                        }
                                    }

                                    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                    XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                }
                            }
                        }

                        //判断是否刷单
                        orderstatus = "WAIT_SELLER_SEND_GOODS,SELLER_CONSIGNED_PART,WAIT_BUYER_CONFIRM_GOODS,TRADE_BUYER_SIGNED,TRADE_FINISHED,TRADE_CLOSED";
                        if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                        {
                            xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), Tid, buyermessage, CustomerServiceRemark, buyerNick, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                        }

                        #region  保存数据

                        IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
                        resultCount++;

                        //新建发票
                        if (xmorderInfo.IsInvoiced != null && xmorderInfo.IsInvoiced == true)
                        {
                            ToAddXMInvoiceInfo(xmorderInfo,719,"","","","","");
                        }

                        #endregion
                    }
                    #endregion

                    #region 修改
                    else
                    {
                        #region 订单主表信息
                        if (PayTime != null && PayTime != "")
                        {
                            xmorderInfo.PayDate = Convert.ToDateTime(PayTime);//付款时间 OK

                            if (ConsignTime != "" && ConsignTime != null && ConsignTime != "0001-01-01 00:00:00")// "WAIT_BUYER_CONFIRM_GOODS")//等待买家确认收货,即:卖家已发货
                            {
                                xmorderInfo.DeliveryTime = Convert.ToDateTime(ConsignTime);//发货时间
                            }
                            if (listTrade[i].Status == "TRADE_FINISHED")//交易成功
                            {
                                if (Modified != null && Modified != "")
                                {
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Parse(Modified.ToString().Trim());//发货时间
                                    }
                                    if (xmorderInfo.CompletionTime == null)
                                    {
                                        xmorderInfo.CompletionTime = DateTime.Parse(Modified.ToString().Trim());//完成时间
                                        AutoSingleRow(Tid);
                                    }
                                }
                            }

                            //if (listTrade[i].Status == "WAIT_BUYER_CONFIRM_GOODS")
                            //{
                            //    xmorderInfo.DeliveryTime = Convert.ToDateTime(PayTime);// DateTime.Parse(PayTime.ToString().Trim()).AddDays(+15);//发货时间
                            //}

                            //xmorderinfoproduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//发货时间
                        }

                        if (Modified != null && Modified != "")
                        {
                            xmorderInfo.OrderInfoModified = DateTime.Parse(Modified);
                        }
                        xmorderInfo.OrderInfoCreateDate = Convert.ToDateTime(created);//创单时间
                        xmorderInfo.OrderStatus = listTrade[i].Status;//状态   OK

                        xmorderInfo.WantID = buyerNick;//旺旺id
                        //xmorderInfo.Tel = receiverPhone;//电话
                        xmorderInfo.BuyerE_mail = listTrade[i].BuyerEmail;//买家邮件地址
                        xmorderInfo.IsInvoiced = IsInvoices.Value;//是否发票
                        xmorderInfo.InvoiceHead = listTrade[i].InvoiceName;//发票抬头
                        xmorderInfo.PayMethod = listTrade[i].Type;//支付方式
                        if (trade.BuyerObtainPointFee != null)
                        {
                            xmorderInfo.BuyerObtainPointFee = decimal.Parse(trade.BuyerObtainPointFee.ToString());//买家获得积分,返点的积分
                        }

                        xmorderInfo.TradeFrom = trade.TradeFrom;//交易内部来源
                        if (trade.RealPointFee != null)
                        {
                            xmorderInfo.RealPointFee = decimal.Parse(trade.RealPointFee.ToString());//买家实际使用积分
                        }
                        if (trade.CommissionFee != null)
                        {
                            xmorderInfo.CommissionFee = decimal.Parse(trade.CommissionFee.ToString());//交易佣金
                        }
                        xmorderInfo.TradeSource = trade.TradeSource;//交易外部来源
                        if (trade.CreditCardFee != null)
                        {
                            xmorderInfo.CreditCardFee = decimal.Parse(trade.CreditCardFee.ToString());//使用信用卡支付金额数
                        }

                        //xmorderInfo.FullName = receiverName;//姓名
                        //xmorderInfo.Mobile = Mobile;//手机
                        //if (receiverCity != null)
                        //{
                        //    xmorderInfo.City = receiverCity.ToString().Trim();//市
                        //}
                        //if (receiverDistrict != null)
                        //{
                        //    xmorderInfo.County = receiverDistrict.ToString().Trim();//区
                        //}
                        //if (receiverState != null)
                        //{
                        //    xmorderInfo.Province = receiverState.ToString().Trim();//省
                        //}
                        //xmorderInfo.DeliveryAddress = Address;//收货地址

                        xmorderInfo.DistributeMethod = listTrade[i].ShippingType;//配送方式
                        xmorderInfo.DistributePrice = Decimal.Parse(listTrade[i].PostFee == null ? "0" : listTrade[i].PostFee);//配送费用（天猫）
                        xmorderInfo.IsDistributed = listTrade[i].HasYfx;//是否保价（运费险）
                        if (trade.HasYfx == true)
                        {
                            xmorderInfo.SupportPrice = Decimal.Parse(listTrade[i].YfxFee == null ? "0" : listTrade[i].YfxFee);//保价费用
                        }
                        xmorderInfo.ProductPrice = decimal.Parse(listTrade[i].TotalFee == null ? "0" : listTrade[i].TotalFee);//商品总金额
                        xmorderInfo.Taxes = decimal.Parse(listTrade[i].CommissionFee == null ? "0" : listTrade[i].CommissionFee);//税金
                        decimal ordertotal = 0;//订单总金额  (商品总额+邮费+运费险+交易佣金)
                        ordertotal = decimal.Parse(listTrade[i].TotalFee == null ? "0" : listTrade[i].TotalFee) + Decimal.Parse(listTrade[i].PostFee == null ? "0" : listTrade[i].PostFee);
                        if (xmorderInfo.IsDistributed == true)
                        {
                            ordertotal += Decimal.Parse(listTrade[i].YfxFee == null ? "0" : listTrade[i].YfxFee);
                        }
                        ordertotal += decimal.Parse(listTrade[i].CommissionFee == null ? "0" : listTrade[i].CommissionFee);
                        xmorderInfo.OrderPrice = ordertotal;//订单金额

                        decimal receiveprice = 0;//应收金额  （订单总金额-优惠金额）
                        if (listTrade[i].PromotionDetails != null && listTrade[i].PromotionDetails.Count > 0)
                        {
                            receiveprice = ordertotal - decimal.Parse(listTrade[i].PromotionDetails[0].DiscountFee == null ? "0" : listTrade[i].PromotionDetails[0].DiscountFee);
                        }
                        if (listTrade[i].StepTradeStatus != "FRONT_NOPAID_FINAL_NOPAID")//预付款退款时让订单保留已付款金额
                        {
                            xmorderInfo.PayPrice = Decimal.Parse(Payment);//支付金额
                        }
                        xmorderInfo.ReceivablePrice = Decimal.Parse(ReceivedPayPayment);//支付宝到帐金额


                        #region 赠品、返现 (修改)  只有订单完成才能修改赠品发现信息
                        //if (trade.Status.ToString().Trim() == "TRADE_FINISHED")//WAIT_SELLER_SEND_GOODS(等待卖家发货,即:买家已付款)
                        //{
                        if (xmorderInfo.CustomerServiceRemark.Trim() != CustomerServiceRemark.Trim())
                        {
                            string CustomerServiceRemarkOld = xmorderInfo.CustomerServiceRemark.Trim();
                            string CustomerServiceRemarkNew = CustomerServiceRemark.Trim();

                            if (CustomerServiceRemarkNew.IndexOf("/赠品") > -1 || CustomerServiceRemarkNew.IndexOf("/退差价") > -1)
                            {

                                string BuyerName = receiverName;//收货人名称
                                string WantNo = buyerNick;//旺旺号
                                string OrderCode = Tid;//订单号 
                                string paramMessage = string.Empty;

                                if ((CustomerServiceRemark.IndexOf("/支付宝") > -1 || CustomerServiceRemark.IndexOf("/卡号") > -1))
                                {
                                    //返回返现条数
                                    int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                }
                                else
                                {
                                    //返回返现条数
                                    int CashBackApplicationInstCount = TMCashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                }
                                IoC.Resolve<IXMOrderInfoAPIService>().XMPremiumsAndCashBackApplication(CustomerServiceRemarkOld, CustomerServiceRemarkNew, xmorderInfo.OrderCode, xmorderInfo.WantID, xmorderInfo.FullName, (int)xmorderInfo.PlatformTypeId, (int)xmorderInfo.NickID);
                            }
                        }
                        //}
                        #endregion

                        //更改收货地址
                        //if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
                        //{
                        //    string csr = CustomerServiceRemark + "$";
                        //    string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                        //    string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");

                        //    xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                        //}

                        string Memo = CustomerServiceRemark; //Remarks + CustomerServiceRemark;//SellerMemo.Substring(SellerMemo.LastIndexOf("'") + 1).ToLower();
                        string RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;
                        string StatusValue = xmorderInfo.OrderStatus.Trim();
                        decimal FactoryPrice = 0;

                        if (Memo != RemarksValue || StatusValue != listTrade[i].Status.Trim() || Convert.ToDateTime(PayTime) != xmorderInfo.PayDate)
                        {
                            #region 记录操作

                            int UpsatorID = 0;
                            if (HozestERPContext.Current.User != null)
                            {
                                UpsatorID = HozestERPContext.Current.User.CustomerID;
                            }
                            else
                            {
                                string UserName = "admin";
                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                if (customer.Count > 0)
                                {
                                    UpsatorID = customer[0].CustomerID;
                                }
                            }


                            if (PayTime != null && PayTime != "")
                            {
                                if (xmorderInfo.PayDate != Convert.ToDateTime(PayTime))
                                {
                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    record.OrderInfoId = xmorderInfo.ID;
                                    record.PropertyName = "PayDate";
                                    record.OldValue = System.Convert.ToString(xmorderInfo.PayDate);
                                    record.NewValue = PayTime;
                                    record.UpdatorID = UpsatorID;
                                    record.UpdateTime = DateTime.Now;
                                    IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                }
                            }

                            if (Modified != null && Modified != "")
                            {
                                if (xmorderInfo.OrderInfoModified != Convert.ToDateTime(Modified))
                                {
                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    record.OrderInfoId = xmorderInfo.ID;
                                    record.PropertyName = "OrderInfoModified";
                                    record.OldValue = System.Convert.ToString(xmorderInfo.OrderInfoModified);
                                    record.NewValue = Modified.ToString().Trim();
                                    record.UpdatorID = UpsatorID;
                                    record.UpdateTime = DateTime.Now;
                                    IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record);//base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                                }
                            }

                            if (buyermessage != null && buyermessage != "")
                            {
                                if (xmorderInfo.Remark != buyermessage)
                                {
                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    record.OrderInfoId = xmorderInfo.ID;
                                    record.PropertyName = "Remarks";
                                    record.OldValue = xmorderInfo.Remark;
                                    record.NewValue = buyermessage;
                                    record.UpdatorID = UpsatorID;
                                    record.UpdateTime = DateTime.Now;
                                    IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                }
                            }
                            if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                            {
                                if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
                                {
                                    var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, CustomerServiceRemark);
                                    if (RecordExist == null || RecordExist.Count == 0)
                                    {
                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                        record.OrderInfoId = xmorderInfo.ID;
                                        record.PropertyName = "CustomerServiceRemark";
                                        record.OldValue = xmorderInfo.CustomerServiceRemark;
                                        record.NewValue = CustomerServiceRemark;
                                        record.UpdatorID = UpsatorID;
                                        record.UpdateTime = DateTime.Now;
                                        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                    }
                                }
                            }
                            if (xmorderInfo.OrderStatus != listTrade[i].Status)
                            {
                                XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                record.OrderInfoId = xmorderInfo.ID;
                                record.PropertyName = "OrderStatusId";
                                record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                                record.NewValue = System.Convert.ToString(listTrade[i].Status);
                                record.UpdatorID = UpsatorID;

                                if (Modified != null && Modified != "")
                                {
                                    record.UpdateTime = DateTime.Parse(Modified);
                                }
                                else
                                {
                                    record.UpdateTime = DateTime.Now;
                                }
                                IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                            }

                            #endregion
                        }

                        //if (receiverCity != null)
                        //{
                        //    xmorderInfo.City = receiverCity.ToString().Trim();
                        //}
                        //if (receiverDistrict != null)
                        //{
                        //    xmorderInfo.County = receiverDistrict.ToString().Trim();
                        //}
                        //if (receiverState != null)
                        //{
                        //    xmorderInfo.Province = receiverState.ToString().Trim();
                        //}
                        xmorderInfo.IsInvoiced = IsInvoices.Value;
                        //xmorderInfo.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);//销售价
                        xmorderInfo.PayPrice = Decimal.Parse(Payment);//支付金额

                        scSalePrice = Decimal.Parse(listTrade[i].Payment == null ? "0" : listTrade[i].Payment);//支付金额

                        xmorderInfo.Remark = buyermessage;//Remarks;//备注 OK
                        xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//修改
                        if (HozestERPContext.Current.User != null)
                        {
                            xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                        }
                        else
                        {
                            string UserName = "admin";
                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                            if (customer.Count > 0)
                            {
                                xmorderInfo.UpdateID = customer[0].CustomerID;
                            }

                        }
                        xmorderInfo.UpdateDate = DateTime.Now;
                        xmorderInfo.IsOurOrder = true;//是我们的订单

                        #endregion

                        string scProductName = "";//商品名称（刷单）
                        //decimal scSalePrice = 0;//销售价(刷单)

                        #region 注释的原订单详细信息
                        //for (int k = 0; k < order.Count; k++)
                        //{
                        //    OuterSkuId = order[k].OuterSkuId;//商品编码
                        //    num = order[k].Num;//数量
                        //    title = order[k].Title; //标题
                        //    InvoiceNo = order[k].InvoiceNo;//包裹的运单号
                        //    LogisticsCompanys = order[k].LogisticsCompany;//发货的快递公司名称
                        //    price = order[k].Price;//单价
                        //    if (OuterSkuId != "" && OuterSkuId != null)
                        //    {
                        //        //商家编码查询商品从表信息。
                        //        var ProductList = this.GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);
                        //        var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                        //        XMOrderInfoProductDetails OrderyReportProduct = null;

                        //        if (OrderyReportProductList.Count == 0)
                        //        {
                        //            OrderyReportProduct = new XMOrderInfoProductDetails();
                        //        }
                        //        else
                        //        {

                        //            OrderyReportProduct = OrderyReportProductList[0];
                        //        }
                        //        if (ProductList.Count > 0)
                        //        {

                        //            //商品关联主表信息
                        //            //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                        //            if (ProductList[0].TDateTimeStart != null && ProductList[0].TDateTimeEnd != null && PayTime != null && PayTime != "" && PayTime != "0001-01-01 00:00:00")
                        //            {
                        //                if (Convert.ToDateTime(PayTime) >= ProductList[0].TDateTimeStart && Convert.ToDateTime(PayTime) <= ProductList[0].TDateTimeEnd)
                        //                {
                        //                    OrderyReportProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                        //                    OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                        //                    OrderyReportProduct.FactoryPrice = ProductList[0].TCostprice * Convert.ToInt32(num);//出厂价
                        //                    OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                        //                    FactoryPrice = ProductList[0].TCostprice.Value * Convert.ToInt32(num);//出厂价
                        //                }
                        //                else
                        //                {
                        //                    OrderyReportProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                        //                    OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                        //                    OrderyReportProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                        //                    OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                        //                    FactoryPrice = ProductList[0].Costprice.Value * num;//出厂价*数量
                        //                }

                        //            }
                        //            else
                        //            {
                        //                OrderyReportProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                        //                OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                        //                OrderyReportProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                        //                OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                        //                FactoryPrice = ProductList[0].Costprice.Value * num;//出厂价*数量
                        //            }
                        //        }
                        //        else
                        //        {
                        //            OrderyReportProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                        //            OrderyReportProduct.Specifications = "";//尺寸
                        //            OrderyReportProduct.FactoryPrice = 0;//出厂价
                        //            OrderyReportProduct.ProductName = "无产品";
                        //        }

                        //        if (scProductName == "")
                        //        {
                        //            scProductName = OrderyReportProduct.ProductName;
                        //            //scSalePrice = decimal.Parse(OrderyReportProduct.SalesPrice == null ? "0" : OrderyReportProduct.SalesPrice.ToString());
                        //        }

                        //        if (Memo != RemarksValue || StatusValue != listTrade[i].Status.Trim() || Convert.ToDateTime(PayTime) != xmorderInfo.PayDate
                        //            || OrderyReportProduct.FactoryPrice.ToString() != FactoryPrice.ToString())
                        //        {
                        //            //OrderyReportProduct.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);// Convert.ToDecimal(Payment) / Convert.ToInt32(num);//销售价
                        //            OrderyReportProduct.SalesPrice = decimal.Parse(price);//销售价
                        //            if (PayTime != null && PayTime != "")
                        //            {
                        //                OrderyReportProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//发货时间
                        //            }

                        //            if (HozestERPContext.Current.User != null)
                        //            {
                        //                OrderyReportProduct.UpdateID = HozestERPContext.Current.User.CustomerID;
                        //            }
                        //            else
                        //            {
                        //                string UserName = "admin";
                        //                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                        //                if (customer.Count > 0)
                        //                {
                        //                    OrderyReportProduct.UpdateID = customer[0].CustomerID;
                        //                }
                        //            }

                        //            OrderyReportProduct.UpdateDate = DateTime.Now;

                        //        }
                        //    }
                        //}
                        #endregion

                        //判断是否刷单
                        orderstatus = "WAIT_SELLER_SEND_GOODS,SELLER_CONSIGNED_PART,WAIT_BUYER_CONFIRM_GOODS,TRADE_BUYER_SIGNED,TRADE_FINISHED,TRADE_CLOSED";
                        if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                        {
                            xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), Tid, buyermessage, CustomerServiceRemark, buyerNick, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                        }

                        #region 保存数据

                        IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
                        updateCount++;

                        #endregion
                    }

                    #endregion
                }
                //}
            }
            catch (Exception ex)
            {
                IoC.Resolve<IRecordErrorLogs>().WriteErrorLog("负责人:" + HozestERPContext.Current.User.CustomerID.ToString() + ";   方法名:PageTMOrderDataList;  订单号" + Tid + " ; 异常提示：" + ex.Message.ToString() + ";   InnerException:" + ex.InnerException);
            }
        }

        /// <summary>
        /// 一号店 yhd.trades.sold.increment.get 查询卖家已卖出的增量交易数据（根据修改时间,兼容淘宝接口）
        /// </summary>
        /// <param name="createDateStart"></param>
        /// <param name="createDateEnd"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        public void SynchronousYHDTradesSoldIncrementData(string createDateStart, string createDateEnd, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            //Int64 totalCount;
            bool HasNext;
            int pageSize = 100;//每页的条数
            for (int i = 1; i < 100; i++)
            {
                int ICount = 0;
                int UCount = 0;

                var listTrade = PageYHDTradesSoldIncrementList(createDateStart, createDateEnd, i, pageSize, out  HasNext, xMorderInfoApp);//out totalCount,

                //无数据
                if (listTrade == null)
                {
                    return;
                }

                if (listTrade.Count > 0)
                {
                    //订单数据保存数据库中
                    PageYHDTradesSoldIncrementOrderList(listTrade, ref ICount, ref UCount, xMorderInfoApp);
                }

                InsertCount += ICount;
                UpdateCount += UCount;
                if (listTrade.Count < 100)
                {
                    return;
                }
            }
        }

        /// <summary>
        /// 一号店
        /// </summary>
        /// <param name="listTrade"></param>
        /// <param name="resultCount"></param>
        /// <param name="updateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        private void PageYHDTradesSoldIncrementOrderList(List<Yhd.Api.Object.Trade.Trade> listTrade, ref int resultCount, ref int updateCount, XMOrderInfoApp xMorderInfoApp)
        {
            string Tid = "";
            try
            {
                for (int i = 0; i < listTrade.Count; i++)
                {
                    XMOrderInfo xmOrderInfo = new XMOrderInfo();

                    Yhd.Api.Object.Trade.Trade trade = null;
                    //Yhd.Api.Object.Trade.Trade.Orders order = null;

                    //orders 	Order[] 	订单列表
                    //Yhd.Api.Object.Trade.OrderList order = null;

                    //列表
                    //List<Yhd.Api.Object.Trade.Order> OrderLst = null;


                    if (listTrade[i].Tid != null)
                    {
                        trade = GetYHDTrade(listTrade[i].Tid.Value, xMorderInfoApp);//,orderInfoApp
                        //order = trade.Orders;
                    }

                    //if (listTrade[i].Orders!=null)
                    //{
                    //    order = listTrade[i].Orders;

                    //    if (order != null)
                    //    {
                    //        OrderLst = order.Order;
                    //    }
                    //}

                    string buyerNick = "";//ID 
                    // string Remarks = "";//listTrade[i].BuyerMemo;//买家备注（与淘宝网上订单的买家备注对应，只有买家才能查看该字段）
                    string CustomerServiceRemark = ""; // listTrade[i].SellerMemo;//客服备注  卖家备注
                    string buyermessage = trade.Buyer_message;//.BuyerMessage;//买家留言
                    string SellerMemo = "";

                    //是否发票  
                    bool? IsInvoices = false;

                    if (trade != null)
                    {
                        buyerNick = trade.Buyer_nick;//.BuyerNick;//ID 
                        SellerMemo = trade.Seller_memo;//.SellerMemo; //备注
                        #region 备注

                        if (SellerMemo != null)
                        {

                            CustomerServiceRemark = SellerMemo;

                            if (SellerMemo.IndexOf("发票") > -1)
                            {
                                IsInvoices = true;//要发票
                            }
                        }
                        else
                        {

                            CustomerServiceRemark = "";
                            //Remarks = "";
                        }
                        #endregion
                    }
                    string buyeralipayno = trade.Buyer_alipay_no;//.BuyerAlipayNo;
                    string created = listTrade[i].Created;// 创单时间
                    string Modified = listTrade[i].Modified;//修改时间
                    string PayTime = listTrade[i].Pay_time;//.PayTime;//支付时间
                    string EndTime = listTrade[i].End_time;//交易结束时间。交易成功时间(更新交易状态为成功的同时更新)/确认收货时间或者交易关闭时间 。格式:yyyy-MM-dd HH:mm:ss
                    string Payment = listTrade[i].Payment == null ? "0" : listTrade[i].Payment;//支付金额  
                    string receiverState = listTrade[i].Receiver_state;//.ReceiverState; //省
                    string receiverAddress = listTrade[i].Receiver_address;//详细地址
                    string receiverCity = listTrade[i].Receiver_city;//市
                    string receiverDistrict = listTrade[i].Receiver_district;//区 
                    long pNum = listTrade[i].Num.Value;//.Num;
                    string receiverZip = listTrade[i].Receiver_zip;

                    string Mobile = "";
                    string ReceiverMobile = listTrade[i].Receiver_mobile;//手机 

                    if (ReceiverMobile != null)
                    {
                        if (ReceiverMobile.IndexOf("'") == -1)
                        {
                            Mobile = listTrade[i].Receiver_mobile;//手机
                        }
                        else
                        {
                            string suMobile = ReceiverMobile.Substring(ReceiverMobile.LastIndexOf("'") + 1).ToLower();
                            Mobile = suMobile;
                        }
                    }
                    else
                    {
                        Mobile = "";
                    }

                    string receiverName = listTrade[i].Receiver_name;//收货人
                    string receiverPhone = listTrade[i].Receiver_phone;//电话
                    string Address = receiverState + receiverCity + receiverDistrict + receiverAddress + "(" + receiverZip + ")";//地址   
                    Tid = listTrade[i].Tid.ToString();//订单编号
                    string TotalFee = listTrade[i].Total_fee; //总费用  
                    string ShippingType = trade.Shipping_type;//

                    string OuterSkuId = "";//商品编码
                    long num = 0;//数量
                    string title = "";
                    string InvoiceNo = "";//包裹的运单号
                    string LogisticsCompanys = "";//发货的快递公司名称
                    string price = "";//单价

                    decimal scSalePrice = 0;//销售价(刷单)

                    //if (order!=null  && order.Title != null && order[.Title != "喜临门城市爱情运费补拍专用链接")
                    //{
                    //订单主表详情
                    XMOrderInfo xmorderInfo = new XMOrderInfo();
                    xmorderInfo = GetXMOrderInfoByOrderCode(Tid);

                    #region 新增
                    if (xmorderInfo == null)
                    {
                        xmorderInfo = new XMOrderInfo();
                        xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();
                        xmorderInfo.NickID = xMorderInfoApp.NickId.Value; //1;//1:城市爱情旗舰店
                        xmorderInfo.PlatformTypeId = xMorderInfoApp.PlatformTypeId;//250;//平台类型（天猫）
                        xmorderInfo.OrderInfoCreateDate = Convert.ToDateTime(created);//创单时间

                        if (PayTime != null && PayTime != "" && PayTime != "0001-01-01 00:00:00")
                        {
                            xmorderInfo.PayDate = Convert.ToDateTime(PayTime);//付款时间

                            //if (listTrade[i].Status == "WAIT_BUYER_CONFIRM_GOODS")
                            //{
                            //    xmorderInfo.DeliveryTime = Convert.ToDateTime(PayTime);// DateTime.Parse(PayTime.ToString().Trim()).AddDays(+15);//发货时间
                            //}
                            //XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//发货时间

                            #region 赠品、返现  1号店状态为已收到 完成才生成订单信息
                            //|| trade.Status.ToString().Trim() == "WAIT_BUYER_CONFIRM_GOODS" || trade.Status.ToString().Trim() == "TRADE_FINISHED"
                            //|| trade.Status.ToString().Trim() == "WAIT_SELLER_STOCK_OUT" || trade.Status.ToString().Trim() == "WAIT_GOODS_RECEIVE_CONFIRM"
                            //|| trade.Status.ToString().Trim() == "FINISHED_L"
                            //trade.Status.ToString().Trim() == "WAIT_SELLER_SEND_GOODS" || trade.Status.ToString().Trim() == "SELLER_CONSIGNED_PART"
                            //if (trade.Status.ToString().Trim() == "ORDER_RECEIVED" || trade.Status.ToString().Trim() == "ORDER_FINISH")//WAIT_SELLER_SEND_GOODS(等待卖家发货,即:买家已付款)
                            //{
                            if (created.ToString().Trim() != null && created.ToString().Trim() != "")
                            {
                                if (DateTime.Parse(created.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                {
                                    if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                    {
                                        //string BuyerAlipayNoS = buyeralipayno;//收款账号  
                                        string BuyerName = receiverName;//收货人名称
                                        string WantNo = buyerNick;//旺旺号
                                        string OrderCode = Tid;//订单号 
                                        string paramMessage = string.Empty;

                                        if (CustomerServiceRemark.IndexOf("/赠品") > -1 || CustomerServiceRemark.IndexOf("/退差价") > -1)
                                        {
                                            #region 赠品
                                            if (CustomerServiceRemark.IndexOf("/赠品") > -1)
                                            {
                                                //返回赠品条数
                                                int PremiumsInst = XMPremiumsInst(CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, xMorderInfoApp.PlatformTypeId.Value, xMorderInfoApp.NickId.Value);

                                            }
                                            #endregion

                                            #region 返现
                                            if (CustomerServiceRemark.IndexOf("/退差价") > -1)
                                            {

                                                //返回返现条数
                                                int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                            }

                                            #endregion
                                        }
                                    }
                                }
                            }

                            //}
                            #endregion
                        }
                        if (Modified != null && Modified != "" && Modified != "0001-01-01 00:00:00")
                        {
                            xmorderInfo.OrderInfoModified = DateTime.Parse(Modified);//变更时间

                            if (listTrade[i].Status == "ORDER_OUT_OF_WH")
                            {
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = Convert.ToDateTime(Modified);// DateTime.Parse(PayTime.ToString().Trim()).AddDays(+15);//发货时间
                                }
                            }
                        }

                        if (EndTime != null && EndTime != "" && Modified != "0001-01-01 00:00:00")
                        {

                            if (xmorderInfo.DeliveryTime == null)
                            {
                                xmorderInfo.DeliveryTime = Convert.ToDateTime(EndTime);// DateTime.Parse(PayTime.ToString().Trim()).AddDays(+15);//发货时间
                            }
                            if (xmorderInfo.CompletionTime == null)
                            {
                                xmorderInfo.CompletionTime = DateTime.Parse(EndTime);
                                AutoSingleRow(Tid);
                            }
                        }
                        xmorderInfo.OrderCode = Tid;//订单号
                        xmorderInfo.OrderStatus = listTrade[i].Status;//状态 
                        //orderInfo.LogisticsId = LogisticsCompanys;//物流公司ID 
                        //orderInfo.LogisticsNumber = InvoiceNo;//物流单号(运单号) 
                        xmorderInfo.WantID = buyerNick;//旺旺id
                        xmorderInfo.Mobile = Mobile;//手机
                        xmorderInfo.Tel = receiverPhone;//电话
                        xmorderInfo.BuyerE_mail = listTrade[i].Buyer_email;//买家邮件地址
                        xmorderInfo.FullName = receiverName;//姓名

                        //orderInfo.Province= receiverState; //省 
                        //orderInfo.City =receiverCity;//市
                        //orderInfo.County= receiverDistrict;//区 
                        if (receiverCity != null)
                        {
                            xmorderInfo.City = receiverCity.ToString().Trim();//市
                        }
                        if (receiverDistrict != null)
                        {
                            xmorderInfo.County = receiverDistrict.ToString().Trim();//区
                        }
                        if (receiverState != null)
                        {
                            xmorderInfo.Province = receiverState.ToString().Trim();//省
                        }
                        xmorderInfo.DeliveryAddress = Address;//收货地址
                        xmorderInfo.SourceType = "同步";//数据来源类型
                        xmorderInfo.FinancialAudit = true;//财务审核
                        xmorderInfo.Remark = buyermessage;// Remarks;//备注
                        xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//客服备注（新增）
                        xmorderInfo.IsInvoiced = IsInvoices.Value;//是否发票
                        xmorderInfo.InvoiceHead = listTrade[i].Invoice_name;//发票抬头
                        xmorderInfo.PayMethod = listTrade[i].Type;//支付方式
                        xmorderInfo.DistributeMethod = listTrade[i].Shipping_type;//配送方式
                        xmorderInfo.DistributePrice = Decimal.Parse(listTrade[i].Post_fee == null ? "0" : listTrade[i].Post_fee);//配送费用（天猫）
                        xmorderInfo.IsDistributed = listTrade[i].Has_yfx;//是否保价（运费险）
                        if (trade.Has_yfx == true)
                        {
                            xmorderInfo.SupportPrice = Decimal.Parse(listTrade[i].Yfx_fee == null ? "0" : listTrade[i].Yfx_fee);//保价费用
                        }
                        xmorderInfo.ProductPrice = decimal.Parse(listTrade[i].Total_fee == null ? "0" : listTrade[i].Total_fee);//商品总金额
                        xmorderInfo.Taxes = decimal.Parse(listTrade[i].Commission_fee == null ? "0" : listTrade[i].Commission_fee);//税金

                        decimal ordertotal = 0;//订单总金额  (商品总额+邮费+运费险+交易佣金)
                        ordertotal = decimal.Parse(listTrade[i].Total_fee == null ? "0" : listTrade[i].Total_fee) + Decimal.Parse(listTrade[i].Post_fee == null ? "0" : listTrade[i].Post_fee);
                        if (xmorderInfo.IsDistributed == true)
                        {
                            ordertotal += Decimal.Parse(listTrade[i].Yfx_fee == null ? "0" : listTrade[i].Yfx_fee);
                        }
                        ordertotal += decimal.Parse(listTrade[i].Commission_fee == null ? "0" : listTrade[i].Commission_fee);
                        xmorderInfo.OrderPrice = ordertotal;//订单金额

                        decimal receiveprice = 0;//应收金额  （订单总金额-优惠金额）

                        List<Yhd.Api.Object.Trade.PromotionDetail> promotionDetail = null;

                        if (listTrade[i].Promotion_details != null)
                        {
                            promotionDetail = listTrade[i].Promotion_details.Promotion_detail;

                            for (int j = 0; j < listTrade.Count; j++)
                            {
                                receiveprice = ordertotal - decimal.Parse(promotionDetail[j].Discount_fee == null ? "0" : promotionDetail[j].Discount_fee);

                            }
                        }
                        xmorderInfo.PayPrice = Decimal.Parse(listTrade[i].Payment == null ? "0" : listTrade[i].Payment);//支付金额

                        scSalePrice = Decimal.Parse(listTrade[i].Payment == null ? "0" : listTrade[i].Payment);//支付金额
                        //orderInfo.IsScalping = false;//是否刷单

                        xmorderInfo.IsCashBack = false;//是否返现
                        xmorderInfo.IsSentGifts = false;//是否已发赠品 
                        xmorderInfo.IsEvaluate = false;//是否赔付
                        xmorderInfo.IsEnable = false;//是否删除
                        xmorderInfo.IsOurOrder = true;//是我们的订单

                        if (trade.Buyer_obtain_point_fee != null)
                        {
                            xmorderInfo.BuyerObtainPointFee = decimal.Parse(trade.Buyer_obtain_point_fee.ToString());//买家获得积分,返点的积分
                        }

                        xmorderInfo.TradeFrom = trade.Trade_from;//交易内部来源
                        if (trade.Real_point_fee != null)
                        {
                            xmorderInfo.RealPointFee = decimal.Parse(trade.Real_point_fee.ToString());//买家实际使用积分
                        }
                        if (trade.Commission_fee != null)
                        {
                            xmorderInfo.CommissionFee = decimal.Parse(trade.Commission_fee.ToString());//交易佣金
                        }
                        xmorderInfo.TradeSource = trade.Trade_source;//交易外部来源
                        if (trade.Credit_card_fee != null)
                        {
                            xmorderInfo.CreditCardFee = decimal.Parse(trade.Credit_card_fee.ToString());//使用信用卡支付金额数
                        }

                        if (HozestERPContext.Current.User != null)
                        {
                            xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                            xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;

                        }
                        else
                        {
                            string UserName = "admin";
                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                            if (customer.Count > 0)
                            {
                                xmorderInfo.CreateID = customer[0].CustomerID;
                                xmorderInfo.UpdateID = customer[0].CustomerID;
                            }
                        }
                        xmorderInfo.CreateDate = DateTime.Now;
                        xmorderInfo.UpdateDate = DateTime.Now;

                        string scProductName = "";//商品名称（刷单）
                        decimal priceTotal = 0;//总商品金额
                        for (int k = 0; k < trade.Orders.Order.Count; k++)
                        {
                            decimal PriceNum = decimal.Parse(trade.Orders.Order[k].Price == null ? "0" : (trade.Orders.Order[k].Price == "" ? "0" : trade.Orders.Order[k].Price)) * decimal.Parse(trade.Orders.Order[k].Num.ToString());
                            priceTotal += PriceNum;
                        }
                        decimal payPriceK = 0;//已赋值付款金额
                        //for (int k = 0; k < order.Count; k++)

                        if (trade.Orders != null)
                        {

                            if (trade.Orders.Order.Count > 0)
                            {

                                for (int k = 0; k < trade.Orders.Order.Count; k++)
                                {

                                    OuterSkuId = trade.Orders.Order[k].Outer_sku_id;//.Outer_skuId;//商品编码
                                    num = trade.Orders.Order[k].Num.Value;//数量
                                    title = trade.Orders.Order[k].Title; //标题
                                    InvoiceNo = trade.Orders.Order[k].Invoice_no;// InvoiceNo;//包裹的运单号
                                    LogisticsCompanys = trade.Orders.Order[k].Logistics_company;//.LogisticsCompany;//发货的快递公司名称
                                    price = trade.Orders.Order[k].Price;//销售价
                                    //XMOrderInfoProductDetails XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                    if (OuterSkuId != "" && OuterSkuId != null)
                                    {
                                        //商家编码查询从表信息。
                                        var ProductList = this.GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);

                                        //2015-7-28新增
                                        decimal a = 0;
                                        decimal? tj = 0;
                                        bool IsZuHe = false;
                                        if (ProductList.Count == 0)
                                        {
                                            ProductList = GetXMProductListByzuheCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                            a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                            if (ProductList.Count > 0)
                                            {
                                                IsZuHe = true;
                                            }
                                        }

                                        //var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                                        //XMOrderInfoProductDetails XMOrderInfoProduct = null;

                                        //if (OrderyReportProductList.Count == 0)
                                        //{
                                        //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                        //}
                                        //else
                                        //{

                                        //    XMOrderInfoProduct = OrderyReportProductList[0];
                                        //}
                                        if (ProductList.Count > 0)
                                        {
                                            decimal payPriceI = 0;//组合已赋值付款金额
                                            decimal ZuHeTotal = 0;
                                            for (int w = 0; w < ProductList.Count; w++)
                                            {
                                                decimal ZuHeNum = (decimal)ProductList[w].Saleprice * decimal.Parse(ProductList[w].count.ToString());
                                                ZuHeTotal += ZuHeNum;
                                            }
                                            for (int s = 0; s < ProductList.Count; s++)
                                            {
                                                var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                //商品关联主表信息
                                                //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                                if (ProductList[s].TDateTimeStart != null && ProductList[s].TDateTimeEnd != null && PayTime != null && PayTime != "" && PayTime != "0001-01-01 00:00:00")
                                                {
                                                    if (Convert.ToDateTime(PayTime) >= ProductList[s].TDateTimeStart && Convert.ToDateTime(PayTime) <= ProductList[s].TDateTimeEnd)
                                                    {
                                                        //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                        XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                        XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                        XMOrderInfoProduct.FactoryPrice = ProductList[s].TCostprice * Convert.ToInt32(num) * ProductList[s].count;//出厂价
                                                        XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                        XMOrderInfoProduct.TCostprice = ProductList[s].TCostprice;
                                                        if (!string.IsNullOrEmpty(ProductList[s].TManufacturersCode))
                                                        {
                                                            XMOrderInfoProduct.TManufacturersCode = ProductList[s].TManufacturersCode;
                                                        }
                                                        else
                                                        {
                                                            XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                        XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                        XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                        XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * num * ProductList[s].count;//出厂价*数量
                                                        XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                        XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                        XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                    }
                                                }
                                                else
                                                {
                                                    //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                    XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                    XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                    XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * num * ProductList[s].count;//出厂价*数量
                                                    XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                    XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                    XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                }

                                                XMOrderInfoProduct.ProductNum = Convert.ToInt32(num) * ProductList[s].count;//数量
                                                if (PayTime != null && PayTime != "")
                                                {
                                                    XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//截止发货时间

                                                }
                                                //XMOrderInfoProduct.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);// Convert.ToDecimal(Payment) / Convert.ToInt32(num);//销售价
                                                //XMOrderInfoProduct.SalesPrice = decimal.Parse(price);//销售价
                                                //if (s < ProductList.Count - 1)
                                                //{
                                                //    XMOrderInfoProduct.SalesPrice = Math.Round(decimal.Parse(((ProductList[s].Costprice * ProductList[s].count * num / a) * decimal.Parse(price)).ToString()), 2);//销售价
                                                //    tj = tj + XMOrderInfoProduct.SalesPrice;
                                                //}
                                                //else
                                                //{
                                                //    XMOrderInfoProduct.SalesPrice = decimal.Parse(price) - tj;//销售价
                                                //}
                                                decimal PartPayPrice = 0;
                                                if (k == trade.Orders.Order.Count - 1)
                                                {
                                                    PartPayPrice = (decimal)xmorderInfo.PayPrice - payPriceK;
                                                }
                                                else
                                                {
                                                    PartPayPrice = Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(price) * num / priceTotal, 2);
                                                    //payPriceK += PartPayPrice;
                                                }
                                                if (IsZuHe)
                                                {
                                                    if (s == ProductList.Count - 1)
                                                    {
                                                        XMOrderInfoProduct.SalesPrice = PartPayPrice - payPriceI;
                                                        payPriceK += PartPayPrice;
                                                    }
                                                    else
                                                    {
                                                        if (ZuHeTotal == 0) //产品销售价没有维护，是0时导致分母为0，计算出错
                                                        {
                                                            XMOrderInfoProduct.SalesPrice = 0;
                                                        }
                                                        else
                                                        {
                                                            XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice * (decimal)ProductList[s].Saleprice * decimal.Parse(ProductList[s].count.ToString()) / ZuHeTotal, 2);//销售价
                                                        }
                                                        payPriceI += (decimal)XMOrderInfoProduct.SalesPrice;
                                                    }
                                                }
                                                else
                                                {
                                                    XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice, 2);//销售价
                                                    payPriceK += PartPayPrice;
                                                }

                                                XMOrderInfoProduct.IsEnable = false;//是否删除
                                                XMOrderInfoProduct.IsAudit = false;//是否审核
                                                XMOrderInfoProduct.IsExpedited = false;//是否加急

                                                XMOrderInfoProduct.ISArrivedLibrary = false;
                                                //XMOrderInfoProduct.ShippingType = ShippingType;

                                                //XMOrderInfoProduct.IsHadPlanBill = false;
                                                //XMOrderInfoProduct.IsReDelivery = false;
                                                //XMOrderInfoProduct.IsChangeGoods = false;
                                                //XMOrderInfoProduct.IsReturnGoods = false;
                                                //XMOrderInfoProduct.IsContinue = false;

                                                if (scProductName == "")
                                                {
                                                    scProductName = XMOrderInfoProduct.ProductName;
                                                    //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                }

                                                if (HozestERPContext.Current.User != null)
                                                {
                                                    XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                    XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                }
                                                else
                                                {
                                                    string UserName = "admin";
                                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                    if (customer.Count > 0)
                                                    {
                                                        XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                        XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                    }
                                                }

                                                XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                                xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                            }
                                        }
                                        else
                                        {
                                            var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                            XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                            XMOrderInfoProduct.Specifications = "";//尺寸
                                            XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                            XMOrderInfoProduct.ProductName = "无产品";

                                            xmorderInfo.IsAbnormal = true;//是否异常

                                            XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                            if (PayTime != null && PayTime != "")
                                            {
                                                XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//截止发货时间

                                            }
                                            //XMOrderInfoProduct.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);// Convert.ToDecimal(Payment) / Convert.ToInt32(num);//销售价
                                            XMOrderInfoProduct.SalesPrice = decimal.Parse(price) * Convert.ToInt32(num);//销售价
                                            XMOrderInfoProduct.IsEnable = false;//是否删除
                                            XMOrderInfoProduct.IsAudit = false;//是否审核
                                            XMOrderInfoProduct.IsExpedited = false;//是否加急

                                            XMOrderInfoProduct.ISArrivedLibrary = false;
                                            //XMOrderInfoProduct.ShippingType = ShippingType;

                                            //XMOrderInfoProduct.IsHadPlanBill = false;
                                            //XMOrderInfoProduct.IsReDelivery = false;
                                            //XMOrderInfoProduct.IsChangeGoods = false;
                                            //XMOrderInfoProduct.IsReturnGoods = false;
                                            //XMOrderInfoProduct.IsContinue = false;

                                            if (scProductName == "")
                                            {
                                                scProductName = XMOrderInfoProduct.ProductName;
                                                //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                            }

                                            if (HozestERPContext.Current.User != null)
                                            {
                                                XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                            }
                                            else
                                            {
                                                string UserName = "admin";
                                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                if (customer.Count > 0)
                                                {
                                                    XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                    XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                }
                                            }

                                            XMOrderInfoProduct.CreateDate = DateTime.Now;
                                            XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                            xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                        }
                                    }
                                    //else
                                    //{
                                    //    //没有商品编码
                                    //    XMOrderInfoProduct.PlatformMerchantCode = ""; //料号（商品编码）
                                    //    XMOrderInfoProduct.Specifications = "";//尺寸
                                    //    XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                    //    XMOrderInfoProduct.ProductName = "无产品";
                                    //    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                    //    if (PayTime != null && PayTime != "")
                                    //    {
                                    //        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//截止发货时间

                                    //    }
                                    //    //XMOrderInfoProduct.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);// Convert.ToDecimal(Payment) / Convert.ToInt32(num);//销售价
                                    //    XMOrderInfoProduct.SalesPrice = decimal.Parse(price);//销售价
                                    //    XMOrderInfoProduct.IsEnable = false;//是否删除
                                    //    XMOrderInfoProduct.IsAudit = false;//是否审核
                                    //    XMOrderInfoProduct.IsExpedited = false;//是否加急

                                    //    XMOrderInfoProduct.ISArrivedLibrary = false;

                                    //    if (HozestERPContext.Current.User != null)
                                    //    {
                                    //        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                    //        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                    //    }
                                    //    else
                                    //    {
                                    //        string UserName = "admin";
                                    //        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                    //        if (customer.Count > 0)
                                    //        {
                                    //            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                    //            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                    //        }
                                    //    }

                                    //    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                    //    XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                    //    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);

                                    //    xmorderInfo.IsAbnormal = true;//是否异常
                                    //}
                                }
                            }
                        }

                        //判断是否刷单
                        //orderstatus = "WAIT_SELLER_SEND_GOODS,SELLER_CONSIGNED_PART,WAIT_BUYER_CONFIRM_GOODS,TRADE_BUYER_SIGNED,TRADE_FINISHED";
                        orderstatus = "ORDER_PAYED,ORDER_TRUNED_TO_DO,ORDER_OUT_OF_WH,ORDER_RECEIVED,ORDER_FINISH";
                        if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                        {
                            xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), Tid, buyermessage, CustomerServiceRemark, buyerNick, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                        }

                        #region  保存数据

                        IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
                        resultCount++;

                        //新建发票
                        if (xmorderInfo.IsInvoiced != null && xmorderInfo.IsInvoiced == true)
                        {
                            ToAddXMInvoiceInfo(xmorderInfo,719,"","","","","");
                        }

                        #endregion
                    }
                    #endregion

                    #region 修改
                    else
                    {
                        #region 订单主表信息

                        if (PayTime != null && PayTime != "")
                        {
                            xmorderInfo.PayDate = Convert.ToDateTime(PayTime);//付款时间 OK
                            //if (listTrade[i].Status == "WAIT_BUYER_CONFIRM_GOODS")
                            //{
                            //    xmorderInfo.DeliveryTime = Convert.ToDateTime(PayTime);// DateTime.Parse(PayTime.ToString().Trim()).AddDays(+15);//发货时间
                            //} 
                            //xmorderinfoproduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//发货时间
                        }

                        if (Modified != null && Modified != "" && Modified != "0001-01-01 00:00:00")
                        {
                            xmorderInfo.OrderInfoModified = DateTime.Parse(Modified);//变更时间

                            if (listTrade[i].Status == "ORDER_OUT_OF_WH")
                            {
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = Convert.ToDateTime(Modified);// DateTime.Parse(PayTime.ToString().Trim()).AddDays(+15);//发货时间
                                }
                            }
                        }

                        if (EndTime != null && EndTime != "" && EndTime != "0001-01-01 00:00:00")
                        {
                            xmorderInfo.CompletionTime = DateTime.Parse(EndTime);
                            AutoSingleRow(Tid);
                            if (xmorderInfo.DeliveryTime == null)
                            {
                                xmorderInfo.DeliveryTime = Convert.ToDateTime(EndTime);// DateTime.Parse(PayTime.ToString().Trim()).AddDays(+15);//发货时间
                            }
                        }
                        xmorderInfo.OrderInfoCreateDate = Convert.ToDateTime(created);//创单时间
                        xmorderInfo.OrderStatus = listTrade[i].Status;//状态 OK

                        #region 赠品、返现 (修改)  1号店状态为完成货物已收到才能修改赠品返现状态
                        //if (trade.Status.ToString().Trim() == "ORDER_RECEIVED" || trade.Status.ToString().Trim() == "ORDER_FINISH")//WAIT_SELLER_SEND_GOODS(等待卖家发货,即:买家已付款)
                        //{
                        if (xmorderInfo.CustomerServiceRemark.Trim() != CustomerServiceRemark.Trim())
                        {
                            string CustomerServiceRemarkOld = xmorderInfo.CustomerServiceRemark.Trim();
                            string CustomerServiceRemarkNew = CustomerServiceRemark.Trim();

                            if (CustomerServiceRemarkNew.IndexOf("/赠品") > -1 || CustomerServiceRemarkNew.IndexOf("/退差价") > -1)
                            {
                                IoC.Resolve<IXMOrderInfoAPIService>().XMPremiumsAndCashBackApplication(CustomerServiceRemarkOld, CustomerServiceRemarkNew, xmorderInfo.OrderCode, xmorderInfo.WantID, xmorderInfo.FullName, (int)xmorderInfo.PlatformTypeId, (int)xmorderInfo.NickID);
                            }
                        }
                        //}
                        #endregion

                        //更改收货地址
                        //if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
                        //{
                        //    string csr = CustomerServiceRemark + "$";
                        //    string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                        //    string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");

                        //    xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                        //}

                        string Memo = CustomerServiceRemark; //Remarks + CustomerServiceRemark;//SellerMemo.Substring(SellerMemo.LastIndexOf("'") + 1).ToLower();
                        string RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;
                        string StatusValue = xmorderInfo.OrderStatus.Trim();
                        decimal FactoryPrice = 0;

                        if (Memo != RemarksValue || StatusValue != listTrade[i].Status.Trim() || Convert.ToDateTime(PayTime) != xmorderInfo.PayDate)
                        {
                            #region 记录操作

                            int UpsatorID = 0;
                            if (HozestERPContext.Current.User != null)
                            {
                                UpsatorID = HozestERPContext.Current.User.CustomerID;
                            }
                            else
                            {
                                string UserName = "admin";
                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                if (customer.Count > 0)
                                {
                                    UpsatorID = customer[0].CustomerID;
                                }
                            }

                            if (PayTime != null && PayTime != "")
                            {
                                if (xmorderInfo.PayDate != Convert.ToDateTime(PayTime))
                                {
                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    record.OrderInfoId = xmorderInfo.ID;
                                    record.PropertyName = "PayDate";
                                    record.OldValue = System.Convert.ToString(xmorderInfo.PayDate);
                                    record.NewValue = PayTime;
                                    record.UpdatorID = UpsatorID;
                                    record.UpdateTime = DateTime.Now;
                                    IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                }
                            }

                            if (Modified != null && Modified != "")
                            {

                                if (xmorderInfo.OrderInfoModified != Convert.ToDateTime(Modified))
                                {
                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    record.OrderInfoId = xmorderInfo.ID;
                                    record.PropertyName = "OrderInfoModified";
                                    record.OldValue = System.Convert.ToString(xmorderInfo.OrderInfoModified);
                                    record.NewValue = Modified.ToString().Trim();
                                    record.UpdatorID = UpsatorID;
                                    record.UpdateTime = DateTime.Now;
                                    IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record);//base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                                }
                            }

                            if (buyermessage != null && buyermessage != "")
                            {
                                if (xmorderInfo.Remark != buyermessage)
                                {
                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    record.OrderInfoId = xmorderInfo.ID;
                                    record.PropertyName = "Remarks";
                                    record.OldValue = xmorderInfo.Remark;
                                    record.NewValue = buyermessage;
                                    record.UpdatorID = UpsatorID;
                                    record.UpdateTime = DateTime.Now;
                                    IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                }
                            }
                            if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                            {
                                if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
                                {
                                    var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, CustomerServiceRemark);
                                    if (RecordExist == null || RecordExist.Count == 0)
                                    {
                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                        record.OrderInfoId = xmorderInfo.ID;
                                        record.PropertyName = "CustomerServiceRemark";
                                        record.OldValue = xmorderInfo.CustomerServiceRemark;
                                        record.NewValue = CustomerServiceRemark;
                                        record.UpdatorID = UpsatorID;
                                        record.UpdateTime = DateTime.Now;
                                        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                    }
                                }
                            }
                            if (xmorderInfo.OrderStatus != listTrade[i].Status)
                            {
                                XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                record.OrderInfoId = xmorderInfo.ID;
                                record.PropertyName = "OrderStatusId";
                                record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                                record.NewValue = System.Convert.ToString(listTrade[i].Status);
                                record.UpdatorID = UpsatorID;

                                if (Modified != null && Modified != "")
                                {
                                    record.UpdateTime = DateTime.Parse(Modified);
                                }
                                else
                                {
                                    record.UpdateTime = DateTime.Now;
                                }
                                IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                            }

                            #endregion
                        }

                        xmorderInfo.WantID = buyerNick;//旺旺id
                        //xmorderInfo.Mobile = Mobile;//手机
                        //xmorderInfo.Tel = receiverPhone;//电话
                        xmorderInfo.BuyerE_mail = listTrade[i].Buyer_email;//买家邮件地址
                        //xmorderInfo.FullName = receiverName;//姓名
                        //xmorderInfo.DeliveryAddress = Address;//收货地址
                        xmorderInfo.InvoiceHead = listTrade[i].Invoice_name;//发票抬头
                        xmorderInfo.PayMethod = listTrade[i].Type;//支付方式
                        xmorderInfo.DistributeMethod = listTrade[i].Shipping_type;//配送方式
                        xmorderInfo.DistributePrice = Decimal.Parse(listTrade[i].Post_fee == null ? "0" : listTrade[i].Post_fee);//配送费用（天猫）
                        xmorderInfo.IsDistributed = listTrade[i].Has_yfx;//是否保价（运费险）
                        if (trade.Has_yfx == true)
                        {
                            xmorderInfo.SupportPrice = Decimal.Parse(listTrade[i].Yfx_fee == null ? "0" : listTrade[i].Yfx_fee);//保价费用
                        }
                        xmorderInfo.ProductPrice = decimal.Parse(listTrade[i].Total_fee == null ? "0" : listTrade[i].Total_fee);//商品总金额
                        xmorderInfo.Taxes = decimal.Parse(listTrade[i].Commission_fee == null ? "0" : listTrade[i].Commission_fee);//税金

                        decimal ordertotal = 0;//订单总金额  (商品总额+邮费+运费险+交易佣金)
                        ordertotal = decimal.Parse(listTrade[i].Total_fee == null ? "0" : listTrade[i].Total_fee) + Decimal.Parse(listTrade[i].Post_fee == null ? "0" : listTrade[i].Post_fee);
                        if (xmorderInfo.IsDistributed == true)
                        {
                            ordertotal += Decimal.Parse(listTrade[i].Yfx_fee == null ? "0" : listTrade[i].Yfx_fee);
                        }
                        ordertotal += decimal.Parse(listTrade[i].Commission_fee == null ? "0" : listTrade[i].Commission_fee);
                        xmorderInfo.OrderPrice = ordertotal;//订单金额
                        if (trade.Buyer_obtain_point_fee != null)
                        {
                            xmorderInfo.BuyerObtainPointFee = decimal.Parse(trade.Buyer_obtain_point_fee.ToString());//买家获得积分,返点的积分
                        }
                        xmorderInfo.TradeFrom = trade.Trade_from;//交易内部来源
                        if (trade.Real_point_fee != null)
                        {
                            xmorderInfo.RealPointFee = decimal.Parse(trade.Real_point_fee.ToString());//买家实际使用积分
                        }
                        if (trade.Commission_fee != null)
                        {
                            xmorderInfo.CommissionFee = decimal.Parse(trade.Commission_fee.ToString());//交易佣金
                        }
                        xmorderInfo.TradeSource = trade.Trade_source;//交易外部来源
                        if (trade.Credit_card_fee != null)
                        {
                            xmorderInfo.CreditCardFee = decimal.Parse(trade.Credit_card_fee.ToString());//使用信用卡支付金额数
                        }

                        //if (receiverCity != null)
                        //{
                        //    xmorderInfo.City = receiverCity.ToString().Trim();
                        //}
                        //if (receiverDistrict != null)
                        //{
                        //    xmorderInfo.County = receiverDistrict.ToString().Trim();
                        //}
                        //if (receiverState != null)
                        //{
                        //    xmorderInfo.Province = receiverState.ToString().Trim();
                        //}
                        xmorderInfo.IsInvoiced = IsInvoices.Value;
                        //xmorderInfo.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);//销售价
                        xmorderInfo.PayPrice = Decimal.Parse(listTrade[i].Payment == null ? "0" : listTrade[i].Payment);//支付金额

                        scSalePrice = Decimal.Parse(listTrade[i].Payment == null ? "0" : listTrade[i].Payment);//支付金额

                        xmorderInfo.Remark = buyermessage;//Remarks;//备注 OK
                        //xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//修改
                        //xmorderInfo.ShippingType = ShippingType;

                        // WAIT_SELLER_SEND_GOODS 等待卖家发货TM
                        // TRADE_NO_CREATE_PAY 没有创建支付宝交易TM
                        // WAIT_BUYER_PAY 等待买家付款TM 
                        //if (listTrade[i].Status == "WAIT_SELLER_SEND_GOODS" ||
                        //    listTrade[i].Status == "TRADE_NO_CREATE_PAY" ||
                        //    listTrade[i].Status == "WAIT_BUYER_PAY")
                        //{
                        //    xmorderInfo.IsHadPlanBill = false;
                        //}
                        //else
                        //{
                        //    xmorderInfo.IsHadPlanBill = true;
                        //}
                        if (HozestERPContext.Current.User != null)
                        {
                            xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                        }
                        else
                        {
                            string UserName = "admin";
                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                            if (customer.Count > 0)
                            {
                                xmorderInfo.UpdateID = customer[0].CustomerID;
                            }

                        }
                        xmorderInfo.UpdateDate = DateTime.Now;
                        xmorderInfo.IsOurOrder = true;//是我们的订单

                        #endregion

                        string scProductName = "";//商品名称（刷单）
                        //decimal scSalePrice = 0;//销售价(刷单)

                        if (trade.Orders != null)
                        {
                            if (trade.Orders.Order.Count > 0)
                            {
                                # region 注释的原订单详细信息
                                //for (int k = 0; k < trade.Orders.Order.Count; k++)
                                //{
                                //    OuterSkuId = trade.Orders.Order[k].Outer_sku_id;//.OuterSkuId;//商品编码
                                //    num = trade.Orders.Order[k].Num.Value;//数量
                                //    title = trade.Orders.Order[k].Title; //标题
                                //    InvoiceNo = trade.Orders.Order[k].Invoice_no;//.InvoiceNo;//包裹的运单号
                                //    LogisticsCompanys = trade.Orders.Order[k].Logistics_company;//.LogisticsCompany;//发货的快递公司名称
                                //    price = trade.Orders.Order[k].Price;//单价
                                //    if (OuterSkuId != "" && OuterSkuId != null)
                                //    {
                                //        //商家编码查询商品从表信息。
                                //        var ProductList = this.GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);
                                //        //var OrderyReportProduct = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).SingleOrDefault();

                                //        //if (OrderyReportProduct == null)
                                //        //{
                                //        //    OrderyReportProduct = new XMOrderInfoProductDetails();
                                //        //}
                                //        var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                                //        XMOrderInfoProductDetails OrderyReportProduct = null;

                                //        if (OrderyReportProductList.Count == 0)
                                //        {
                                //            OrderyReportProduct = new XMOrderInfoProductDetails();
                                //        }
                                //        else
                                //        {

                                //            OrderyReportProduct = OrderyReportProductList[0];
                                //        }
                                //        if (ProductList.Count > 0)
                                //        {

                                //            //商品关联主表信息
                                //            //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                //            if (ProductList[0].TDateTimeStart != null && ProductList[0].TDateTimeEnd != null && PayTime != null && PayTime != "" && PayTime != "0001-01-01 00:00:00")
                                //            {
                                //                if (Convert.ToDateTime(PayTime) >= ProductList[0].TDateTimeStart && Convert.ToDateTime(PayTime) <= ProductList[0].TDateTimeEnd)
                                //                {
                                //                    OrderyReportProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                //                    OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                                //                    OrderyReportProduct.FactoryPrice = ProductList[0].TCostprice * Convert.ToInt32(num);//出厂价
                                //                    OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                //                    FactoryPrice = ProductList[0].TCostprice.Value * Convert.ToInt32(num);//出厂价
                                //                }
                                //                else
                                //                {
                                //                    OrderyReportProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                //                    OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                                //                    OrderyReportProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                                //                    OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                //                    FactoryPrice = ProductList[0].Costprice.Value * num;//出厂价*数量
                                //                }

                                //            }
                                //            else
                                //            {
                                //                OrderyReportProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                //                OrderyReportProduct.Specifications = ProductList[0].Specifications;//尺寸
                                //                OrderyReportProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                                //                OrderyReportProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                //                FactoryPrice = ProductList[0].Costprice.Value * num;//出厂价*数量
                                //            }
                                //        }
                                //        else
                                //        {
                                //            OrderyReportProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                //            OrderyReportProduct.Specifications = "";//尺寸
                                //            OrderyReportProduct.FactoryPrice = 0;//出厂价
                                //            OrderyReportProduct.ProductName = "无产品";
                                //        }

                                //        if (scProductName == "")
                                //        {
                                //            scProductName = OrderyReportProduct.ProductName;
                                //            //scSalePrice = decimal.Parse(OrderyReportProduct.SalesPrice == null ? "0" : OrderyReportProduct.SalesPrice.ToString());
                                //        }

                                //        if (Memo != RemarksValue || StatusValue != listTrade[i].Status.Trim() || Convert.ToDateTime(PayTime) != xmorderInfo.PayDate
                                //            || OrderyReportProduct.FactoryPrice.ToString() != FactoryPrice.ToString())
                                //        {
                                //            //OrderyReportProduct.SalesPrice = Math.Round(Convert.ToDecimal(Payment) / Convert.ToInt32(num), 2);// Convert.ToDecimal(Payment) / Convert.ToInt32(num);//销售价
                                //            OrderyReportProduct.SalesPrice = decimal.Parse(price);//销售价
                                //            if (PayTime != null && PayTime != "")
                                //            {
                                //                OrderyReportProduct.CutoffShipDay = DateTime.Parse(PayTime.ToString().Trim()).AddDays(+20);//发货时间
                                //            }

                                //            if (HozestERPContext.Current.User != null)
                                //            {
                                //                OrderyReportProduct.UpdateID = HozestERPContext.Current.User.CustomerID;
                                //            }
                                //            else
                                //            {
                                //                string UserName = "admin";
                                //                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                //                if (customer.Count > 0)
                                //                {
                                //                    OrderyReportProduct.UpdateID = customer[0].CustomerID;
                                //                }
                                //            }

                                //            OrderyReportProduct.UpdateDate = DateTime.Now;

                                //        }
                                //    }
                                //}
                                #endregion
                            }
                        }
                        //判断是否刷单
                        //orderstatus = "WAIT_SELLER_SEND_GOODS,SELLER_CONSIGNED_PART,WAIT_BUYER_CONFIRM_GOODS,TRADE_BUYER_SIGNED,TRADE_FINISHED";
                        orderstatus = "ORDER_PAYED,ORDER_TRUNED_TO_DO,ORDER_OUT_OF_WH,ORDER_RECEIVED,ORDER_FINISH";
                        if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                        {
                            xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), Tid, buyermessage, CustomerServiceRemark, buyerNick, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                        }

                        #region 保存数据

                        IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
                        updateCount++;

                        #endregion
                    }

                    #endregion
                }
                //}
            }
            catch (Exception ex)
            {
                IoC.Resolve<IRecordErrorLogs>().WriteErrorLog("负责人:" + HozestERPContext.Current.User.CustomerID.ToString() + ";   方法名:PageTMOrderDataList;  订单号" + Tid + " ; 异常提示：" + ex.Message.ToString() + ";   InnerException:" + ex.InnerException);
            }
        }

        /// <summary>
        /// 同步一号店数据
        /// </summary>
        /// <param name="createDateStart"></param>
        /// <param name="createDateEnd"></param>
        /// <param name="Status"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        public void SynchronousYHDOrderData(string createDateStart, string createDateEnd, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            int ICount = 0;
            int UCount = 0;
            PageYHDOrderDataList(createDateStart, createDateEnd, ref ICount, ref UCount, xMorderInfoApp);
            InsertCount += ICount;
            UpdateCount += UCount;
        }

        /// <summary>
        /// yhd.trades.sold.increment.get 查询卖家已卖出的增量交易数据（根据修改时间,兼容淘宝接口） out Int64 totalCount,
        /// </summary>
        /// <param name="paydatestart"></param>
        /// <param name="paydateend"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="xMorderInfoApp"></param> 

        private List<Yhd.Api.Object.Trade.Trade> PageYHDTradesSoldIncrementList(string paydatestart, string paydateend, int page, int pageSize, out bool HasNext, XMOrderInfoApp xMorderInfoApp)
        {
            try
            {
                //long count = 0;
                bool IsNext = false;

                if (xMorderInfoApp != null && paydatestart != "" && paydateend != "")
                {
                    //根据时间查询订单列表
                    Yhd.Api.YhdClient client = new Yhd.Api.YhdClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret);

                    Yhd.Api.Request.TradesSoldIncrementGetRequest reqSupplierOrders = new Yhd.Api.Request.TradesSoldIncrementGetRequest();
                    reqSupplierOrders.Fields = "seller_nick,buyer_nick,title,type,created,sid,tid,seller_rate,buyer_rate,buyer_memo,buyer_message,status,payment,discount_fee,adjust_fee,post_fee,total_fee,pay_time,end_time,modified,consign_time,buyer_obtain_point_fee,point_fee,real_point_fee,received_payment,commission_fee,pic_path,num_iid,num_iid,num,price,cod_fee,cod_status,shipping_type,receiver_name,receiver_state,receiver_city,receiver_district,receiver_address,receiver_zip,receiver_mobile,receiver_phone,buyer_alipay_no,orders.title,orders.pic_path,orders.price,orders.num,orders.iid,orders.num_iid,orders.sku_id,orders.refund_status,orders.status,orders.oid,orders.total_fee,orders.payment,orders.discount_fee,orders.adjust_fee,orders.sku_properties_name,orders.item_meal_name,orders.buyer_rate,orders.seller_rate,orders.outer_iid,orders.outer_sku_id,orders.refund_id,orders.seller_type,orders.logistics_company ,orders.invoice_no";
                    reqSupplierOrders.Status = "ORDER_WAIT_PAY,ORDER_PAYED,ORDER_WAIT_SEND,ORDER_ON_SENDING,ORDER_RECEIVED,ORDER_FINISH,ORDER_GRT,ORDER_CANCEL";
                    reqSupplierOrders.StartModified = DateTime.Parse(paydatestart).ToString("yyyy-MM-dd HH:mm:ss");
                    reqSupplierOrders.EndModified = DateTime.Parse(paydateend).ToString("yyyy-MM-dd HH:mm:ss");
                    reqSupplierOrders.PageNo = page;
                    reqSupplierOrders.PageSize = pageSize;
                    Yhd.Api.Response.TradesSoldIncrementGetResponse repSupplierOrders = client.Execute(reqSupplierOrders, xMorderInfoApp.AccessToken);

                    if (repSupplierOrders.Trades != null)
                    {
                        if (repSupplierOrders.Trades.Trade != null)
                        {
                            if (repSupplierOrders.Error_code == null)
                            {
                                // count = repSupplierOrders.Total_results;//.Value;
                                //totalCount = count;
                                IsNext = repSupplierOrders.Has_next;
                                HasNext = IsNext;
                                return repSupplierOrders.Trades.Trade;
                            }
                            else
                            {
                                throw new Exception("错误代码：" + repSupplierOrders.Error_code + "错误信息：" + repSupplierOrders.Msg);
                            }


                        }
                    }
                }
                // totalCount = count;
                HasNext = IsNext;
            }
            catch (Exception ex)
            {
                //totalCount = 0;
                HasNext = false;
                IoC.Resolve<IRecordErrorLogs>().WriteErrorLog("负责人:" + HozestERPContext.Current.User.CustomerID.ToString() + ";   方法名:PageYHDTradesSoldIncrementList;  异常提示：" + ex.Message.ToString() + ";   InnerException:" + ex.InnerException);

            }
            return null;
        }

        /// <summary>
        /// 一号店 批量同步
        /// </summary>
        /// <param name="paydatestart"></param>
        /// <param name="paydateend"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        private void PageYHDOrderDataList(string paydatestart, string paydateend, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            if (xMorderInfoApp != null && paydatestart != "" && paydateend != "")
            {
                //根据时间查询订单列表
                Yhd.Api.YhdClient client = new Yhd.Api.YhdClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret);
                Yhd.Api.Request.OrdersGetRequest reqSupplierOrders = new Yhd.Api.Request.OrdersGetRequest();
                reqSupplierOrders.OrderStatusList = "ORDER_WAIT_PAY,ORDER_PAYED,ORDER_WAIT_SEND,ORDER_ON_SENDING,ORDER_RECEIVED,ORDER_FINISH,ORDER_GRT,ORDER_CANCEL";
                reqSupplierOrders.StartTime = DateTime.Parse(paydatestart).ToString("yyyy-MM-dd HH:mm:ss");
                reqSupplierOrders.EndTime = DateTime.Parse(paydateend).ToString("yyyy-MM-dd HH:mm:ss");
                Yhd.Api.Response.OrdersGetResponse repSupplierOrders = client.Execute(reqSupplierOrders, xMorderInfoApp.AccessToken);

                if (repSupplierOrders.OrderList.Order != null && repSupplierOrders.OrderList.Order.Count > 0)
                {
                    for (int i = 0; i < repSupplierOrders.OrderList.Order.Count; i++)
                    {
                        //根据订单号获取订单详情
                        Yhd.Api.YhdClient client_order = new Yhd.Api.YhdClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret);
                        Yhd.Api.Request.OrderDetailGetRequest reqSupplierOrders_order = new Yhd.Api.Request.OrderDetailGetRequest();
                        reqSupplierOrders_order.OrderCode = repSupplierOrders.OrderList.Order[i].OrderCode;
                        Yhd.Api.Response.OrderDetailGetResponse repSupplierOrders_order = client_order.Execute(reqSupplierOrders_order, xMorderInfoApp.AccessToken);

                        if (repSupplierOrders_order.OrderInfo.OrderDetail != null)
                        {
                            //API获取的订单信息
                            var orderinfo = repSupplierOrders_order.OrderInfo.OrderDetail;
                            //订单编号
                            string ordercode = orderinfo.OrderCode;
                            //订单编号查询订单
                            var xmorderInfo = GetXMOrderInfoByOrderCode(ordercode);


                            decimal scSalePrice = 0;//销售价(刷单)

                            #region 新增
                            if (xmorderInfo == null)
                            {
                                xmorderInfo = new XMOrderInfo();
                                xmorderInfo.NickID = xMorderInfoApp.NickId;//城市爱情
                                xmorderInfo.PlatformTypeId = xMorderInfoApp.PlatformTypeId;//一号店
                                xmorderInfo.OrderInfoCreateDate = DateTime.Parse(orderinfo.OrderCreateTime);//创单时间
                                if (orderinfo.OrderPaymentConfirmDate != "" && orderinfo.OrderPaymentConfirmDate != null)
                                {
                                    xmorderInfo.PayDate = DateTime.Parse(orderinfo.OrderPaymentConfirmDate);//付款时间
                                }
                                if (orderinfo.DeliveryDate != "" && orderinfo.DeliveryDate != null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Parse(orderinfo.DeliveryDate);//发货时间
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Parse(orderinfo.DeliveryDate);//付款时间
                                    }
                                }
                                xmorderInfo.OrderInfoModified = DateTime.Parse(orderinfo.UpdateTime);//更新时间

                                if (orderinfo.ReceiveDate != null && orderinfo.ReceiveDate != "" && orderinfo.ReceiveDate != "0001-01-01 00:00:00")
                                {
                                    xmorderInfo.CompletionTime = DateTime.Parse(orderinfo.ReceiveDate);
                                    AutoSingleRow(ordercode);
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Parse(orderinfo.ReceiveDate);//付款时间
                                    }
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Parse(orderinfo.ReceiveDate);//付款时间
                                    }
                                }

                                xmorderInfo.OrderCode = orderinfo.OrderCode;//订单编号
                                // 订单状态:
                                //ORDER_WAIT_PAY：已下单（货款未全收）
                                //ORDER_PAYED：已下单（货款已收）
                                //ORDER_TRUNED_TO_DO：可以发货（已送仓库）
                                //ORDER_OUT_OF_WH：已出库（货在途）
                                //ORDER_RECEIVED：货物用户已收到
                                //ORDER_FINISH：订单完成
                                //ORDER_CANCEL：订单取消
                                xmorderInfo.OrderStatus = orderinfo.OrderStatus.ToString();
                                xmorderInfo.WantID = orderinfo.EndUserId.ToString();//用户id
                                xmorderInfo.FullName = orderinfo.GoodReceiverName;//收货人
                                xmorderInfo.Province = orderinfo.GoodReceiverProvince;//省
                                xmorderInfo.City = orderinfo.GoodReceiverCity;//市
                                xmorderInfo.County = orderinfo.GoodReceiverCounty;//区县
                                xmorderInfo.DeliveryAddress = orderinfo.GoodReceiverAddress;//收货地址
                                xmorderInfo.Mobile = orderinfo.GoodReceiverMoblie;//手机
                                xmorderInfo.Tel = orderinfo.GoodReceiverPhone;//电话
                                xmorderInfo.SourceType = "同步";//数据来源
                                xmorderInfo.FinancialAudit = true;//财务审核
                                xmorderInfo.Remark = orderinfo.DeliveryRemark;//发货备注
                                xmorderInfo.CustomerServiceRemark = orderinfo.MerchantRemark;//卖家备注（新增）

                                #region 赠品、返现  1号店订单状态为确认收货。完成交易时才生成赠品返现
                                //   orderinfo.OrderStatus.ToString() == "ORDER_PAYED" || orderinfo.OrderStatus.ToString() == "ORDER_TRUNED_TO_DO"
                                //|| orderinfo.OrderStatus.ToString() == "ORDER_OUT_OF_WH" || 
                                if (orderinfo.OrderStatus.ToString() == "ORDER_RECEIVED"
                             || orderinfo.OrderStatus.ToString() == "ORDER_FINISH")//待审核订单（已支付/未处理）
                                {
                                    if (orderinfo.OrderCreateTime.ToString().Trim() != null && orderinfo.OrderCreateTime.ToString().Trim() != "")
                                    {
                                        if (DateTime.Parse(orderinfo.OrderCreateTime.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                        {
                                            if (orderinfo.MerchantRemark != null && orderinfo.MerchantRemark != "")
                                            {
                                                string BuyerName = orderinfo.GoodReceiverName;//收货人名称 
                                                string WantNo = orderinfo.EndUserId.ToString();//旺旺号 
                                                string OrderCode = orderinfo.OrderCode;//订单号 
                                                string paramMessage = string.Empty;

                                                if (orderinfo.MerchantRemark.IndexOf("/赠品") > -1 || orderinfo.MerchantRemark.IndexOf("/退差价") > -1)
                                                {
                                                    #region 赠品
                                                    if (orderinfo.MerchantRemark.IndexOf("/赠品") > -1)
                                                    {
                                                        //返回赠品条数
                                                        int PremiumsInst = XMPremiumsInst(orderinfo.MerchantRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, xMorderInfoApp.PlatformTypeId.Value, xMorderInfoApp.NickId.Value);

                                                    }
                                                    #endregion

                                                    #region 返现
                                                    if (orderinfo.MerchantRemark.IndexOf("/退差价") > -1)
                                                    {

                                                        //返回返现条数
                                                        int CashBackApplicationInstCount = CashBackApplicationInst(orderinfo.MerchantRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                                    }

                                                    #endregion
                                                }
                                            }
                                        }
                                    }

                                }
                                #endregion


                                if (orderinfo.OrderNeedInvoice != 0)//发票需要情况（0:不需要，1:旧版普通，2:新版普通，3:增值税发票）
                                {
                                    xmorderInfo.IsInvoiced = true;
                                    xmorderInfo.InvoiceHead = orderinfo.InvoiceTitle;//发票抬头
                                    xmorderInfo.InvoiceNo = orderinfo.InvoiceContent;//发票内容
                                    xmorderInfo.InvoicePrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收款(产品金额-促销活动立减金额-商家抵用卷金额+运费)
                                }
                                xmorderInfo.DistributeMethod = orderinfo.DeliverySupplierId.ToString();//配送方式({10001:普通快递、20001:EMS、30001:供应商直送、40001:自提、30002:店中店商家直送} )
                                xmorderInfo.DistributePrice = decimal.Parse(orderinfo.OrderDeliveryFee.ToString());//运费 （一号店）
                                xmorderInfo.ProductPrice = Decimal.Parse(orderinfo.ProductAmount.ToString());//产品总额
                                xmorderInfo.OrderPrice = Decimal.Parse(orderinfo.OrderAmount.ToString());//订单金额
                                Decimal? promotionprice = 0;//优惠金额
                                promotionprice = xmorderInfo.ProductPrice + xmorderInfo.DistributePrice - xmorderInfo.OrderPrice;
                                xmorderInfo.OrderPromotion = promotionprice;//订单优惠金额
                                Decimal? taxes = 0;//折扣
                                taxes = (xmorderInfo.OrderPrice - promotionprice) / xmorderInfo.OrderPrice;
                                xmorderInfo.Taxes = taxes;
                                xmorderInfo.ReceivablePrice = Decimal.Parse(orderinfo.OrderAmount.ToString());//应收金额
                                xmorderInfo.PayPrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收金额

                                scSalePrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收金额

                                xmorderInfo.IsEnable = false;//是否删除
                                xmorderInfo.IsCashBack = false;//是否返现
                                xmorderInfo.IsSentGifts = false;//是否已发赠品 
                                xmorderInfo.IsEvaluate = false;//是否赔付
                                xmorderInfo.IsOurOrder = true;

                                if (HozestERPContext.Current.User != null)
                                {
                                    xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                                    xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;

                                }
                                else
                                {
                                    string UserName = "admin";
                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                    if (customer.Count > 0)
                                    {
                                        xmorderInfo.CreateID = customer[0].CustomerID;
                                        xmorderInfo.UpdateID = customer[0].CustomerID;
                                    }
                                }

                                xmorderInfo.CreateDate = DateTime.Now;
                                xmorderInfo.UpdateDate = DateTime.Now;

                                xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();//初始化
                                string ModifiedDate = orderinfo.UpdateTime;//订单修改时间


                                string scProductName = "";//商品名称（刷单）

                                for (int k = 0; k < repSupplierOrders_order.OrderInfo.OrderItemList.OrderItem.Count; k++)
                                {
                                    //产品详情
                                    var productinfo = repSupplierOrders_order.OrderInfo.OrderItemList.OrderItem[k];

                                    if (productinfo != null)
                                    {
                                        string OuterSkuId = productinfo.OuterId;//商品编码
                                        int? num = productinfo.OrderItemNum;//数量
                                        string orderitemprice = productinfo.OrderItemPrice == null ? "0" : productinfo.OrderItemPrice.ToString();//单价
                                        //XMOrderInfoProductDetails XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                        if (OuterSkuId != "" && OuterSkuId != null)
                                        {
                                            //商家编码查询从表信息。
                                            var ProductList = this.GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);

                                            //2015-7-28新增 查询组合产品
                                            decimal a = 0;
                                            decimal? tj = 0;
                                            if (ProductList.Count == 0)
                                            {
                                                ProductList = GetXMProductListByzuheCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                                a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                            }

                                            //var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                                            //XMOrderInfoProductDetails XMOrderInfoProduct = null;

                                            //if (OrderyReportProductList.Count == 0)
                                            //{
                                            //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                            //}
                                            //else
                                            //{

                                            //    XMOrderInfoProduct = OrderyReportProductList[0];
                                            //}

                                            if (ProductList.Count > 0)
                                            {
                                                for (int s = 0; s < ProductList.Count; s++)
                                                {
                                                    var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                    //商品关联主表信息
                                                    //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                                    if (ProductList[s].TDateTimeStart != null && ProductList[s].TDateTimeEnd != null && ModifiedDate != null && ModifiedDate != "" && ModifiedDate != "0001-01-01 00:00:00")
                                                    {
                                                        if (Convert.ToDateTime(ModifiedDate) >= ProductList[s].TDateTimeStart && Convert.ToDateTime(ModifiedDate) <= ProductList[s].TDateTimeEnd)
                                                        {
                                                            //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                            XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                            XMOrderInfoProduct.FactoryPrice = ProductList[s].TCostprice * Convert.ToInt32(num) * ProductList[s].count;//出厂价
                                                            XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                            XMOrderInfoProduct.TCostprice = ProductList[s].TCostprice;
                                                        }
                                                        else
                                                        {
                                                            //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                            XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                            XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * num * ProductList[s].count;//出厂价*数量
                                                            XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                            XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                        XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                        XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                        XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * num * ProductList[s].count;//出厂价*数量
                                                        XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                        XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                    }

                                                    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num) * ProductList[s].count;//数量
                                                    if (ModifiedDate != null && ModifiedDate != "")
                                                    {
                                                        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

                                                    }
                                                    //XMOrderInfoProduct.SalesPrice = Decimal.Parse(orderitemprice);//单价/销售价

                                                    if (s < ProductList.Count - 1)
                                                    {
                                                        XMOrderInfoProduct.SalesPrice = Math.Round(decimal.Parse(((ProductList[s].Costprice * ProductList[s].count * num / a) * decimal.Parse(orderitemprice)).ToString()), 2);//销售价
                                                        tj = tj + XMOrderInfoProduct.SalesPrice;
                                                    }
                                                    else
                                                    {
                                                        XMOrderInfoProduct.SalesPrice = decimal.Parse(orderitemprice) - tj;//销售价
                                                    }
                                                    XMOrderInfoProduct.IsEnable = false;//是否删除
                                                    XMOrderInfoProduct.IsAudit = false;//是否审核
                                                    XMOrderInfoProduct.IsExpedited = false;//是否加急

                                                    XMOrderInfoProduct.ISArrivedLibrary = false;
                                                    //XMOrderInfoProduct.ShippingType = ShippingType;

                                                    //XMOrderInfoProduct.IsHadPlanBill = false;
                                                    //XMOrderInfoProduct.IsReDelivery = false;
                                                    //XMOrderInfoProduct.IsChangeGoods = false;
                                                    //XMOrderInfoProduct.IsReturnGoods = false;
                                                    //XMOrderInfoProduct.IsContinue = false;

                                                    if (scProductName == "")
                                                    {
                                                        scProductName = XMOrderInfoProduct.ProductName;
                                                        //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                    }

                                                    if (HozestERPContext.Current.User != null)
                                                    {
                                                        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                    }
                                                    else
                                                    {
                                                        string UserName = "admin";
                                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                        if (customer.Count > 0)
                                                        {
                                                            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                        }
                                                    }

                                                    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                    XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                                    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                                }
                                            }
                                            else
                                            {
                                                var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                                XMOrderInfoProduct.Specifications = "";//尺寸
                                                XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                                XMOrderInfoProduct.ProductName = "无产品";

                                                xmorderInfo.IsAbnormal = true;//是否异常

                                                XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                                if (ModifiedDate != null && ModifiedDate != "")
                                                {
                                                    XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

                                                }
                                                XMOrderInfoProduct.SalesPrice = Decimal.Parse(orderitemprice) * Convert.ToInt32(num);//销售价

                                                XMOrderInfoProduct.IsEnable = false;//是否删除
                                                XMOrderInfoProduct.IsAudit = false;//是否审核
                                                XMOrderInfoProduct.IsExpedited = false;//是否加急

                                                XMOrderInfoProduct.ISArrivedLibrary = false;
                                                //XMOrderInfoProduct.ShippingType = ShippingType;

                                                //XMOrderInfoProduct.IsHadPlanBill = false;
                                                //XMOrderInfoProduct.IsReDelivery = false;
                                                //XMOrderInfoProduct.IsChangeGoods = false;
                                                //XMOrderInfoProduct.IsReturnGoods = false;
                                                //XMOrderInfoProduct.IsContinue = false;

                                                if (scProductName == "")
                                                {
                                                    scProductName = XMOrderInfoProduct.ProductName;
                                                    //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                }

                                                if (HozestERPContext.Current.User != null)
                                                {
                                                    XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                    XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                }
                                                else
                                                {
                                                    string UserName = "admin";
                                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                    if (customer.Count > 0)
                                                    {
                                                        XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                        XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                    }
                                                }

                                                XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                                xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                            }
                                        }
                                        //else
                                        //{ 
                                        //    //没有商品编码
                                        //    XMOrderInfoProduct.PlatformMerchantCode = ""; //料号（商品编码）
                                        //    XMOrderInfoProduct.Specifications = "";//尺寸
                                        //    XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                        //    XMOrderInfoProduct.ProductName = "无产品";
                                        //    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                        //    if (ModifiedDate != null && ModifiedDate != "")
                                        //    {
                                        //        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

                                        //    }
                                        //    XMOrderInfoProduct.SalesPrice = Decimal.Parse(orderitemprice);//单价/销售价

                                        //    XMOrderInfoProduct.IsEnable = false;//是否删除
                                        //    XMOrderInfoProduct.IsAudit = false;//是否审核
                                        //    XMOrderInfoProduct.IsExpedited = false;//是否加急

                                        //    XMOrderInfoProduct.ISArrivedLibrary = false;


                                        //    if (HozestERPContext.Current.User != null)
                                        //    {
                                        //        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                        //        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                        //    }
                                        //    else
                                        //    {
                                        //        string UserName = "admin";
                                        //        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                        //        if (customer.Count > 0)
                                        //        {
                                        //            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                        //            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                        //        }
                                        //    }

                                        //    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                        //    XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                        //    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);

                                        //    xmorderInfo.IsAbnormal = true;//是否异常
                                        //}
                                    }
                                }

                                //判断是否刷单
                                orderstatus = "ORDER_PAYED,ORDER_TRUNED_TO_DO,ORDER_OUT_OF_WH,ORDER_RECEIVED,ORDER_FINISH";
                                if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                                {
                                    xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), ordercode, xmorderInfo.Remark, orderinfo.MerchantRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                                }

                                #region  保存数据

                                IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
                                InsertCount++;

                                #endregion
                            }
                            #endregion

                            #region 修改

                            else
                            {
                                string Remarks = xmorderInfo.Remark;
                                string CustomerServiceRemark = xmorderInfo.CustomerServiceRemark;
                                string Modified = orderinfo.UpdateTime.ToString();
                                string Memo = Remarks + CustomerServiceRemark;//SellerMemo.Substring(SellerMemo.LastIndexOf("'") + 1).ToLower();
                                string RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;
                                string StatusValue = xmorderInfo.OrderStatus.Trim();
                                decimal FactoryPrice = 0;

                                if (Memo != RemarksValue || StatusValue != orderinfo.OrderStatus.ToString().Trim())
                                {
                                    #region 记录操作

                                    int UpsatorID = 0;
                                    if (HozestERPContext.Current.User != null)
                                    {
                                        UpsatorID = HozestERPContext.Current.User.CustomerID;
                                    }
                                    else
                                    {
                                        string UserName = "admin";
                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                        if (customer.Count > 0)
                                        {
                                            UpsatorID = customer[0].CustomerID;
                                        }
                                    }

                                    if (Modified != null && Modified != "")
                                    {

                                        if (xmorderInfo.OrderInfoModified != Convert.ToDateTime(Modified))
                                        {
                                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                            record.OrderInfoId = xmorderInfo.ID;
                                            record.PropertyName = "OrderInfoModified";
                                            record.OldValue = System.Convert.ToString(xmorderInfo.OrderInfoModified);
                                            record.NewValue = Modified.ToString().Trim();
                                            record.UpdatorID = UpsatorID;
                                            record.UpdateTime = DateTime.Now;
                                            IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record);//base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                                        }
                                    }

                                    if (Remarks != null && Remarks != "")
                                    {
                                        if (xmorderInfo.Remark != Remarks)
                                        {
                                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                            record.OrderInfoId = xmorderInfo.ID;
                                            record.PropertyName = "Remarks";
                                            record.OldValue = xmorderInfo.Remark;
                                            record.NewValue = Remarks;
                                            record.UpdatorID = UpsatorID;
                                            record.UpdateTime = DateTime.Now;
                                            IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                        }
                                    }
                                    if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                    {
                                        if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
                                        {
                                            var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, CustomerServiceRemark);
                                            if (RecordExist == null || RecordExist.Count == 0)
                                            {
                                                XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                                record.OrderInfoId = xmorderInfo.ID;
                                                record.PropertyName = "CustomerServiceRemark";
                                                record.OldValue = xmorderInfo.CustomerServiceRemark;
                                                record.NewValue = CustomerServiceRemark;
                                                record.UpdatorID = UpsatorID;
                                                record.UpdateTime = DateTime.Now;
                                                IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                            }
                                        }
                                    }
                                    if (xmorderInfo.OrderStatus != orderinfo.OrderStatus.ToString())
                                    {
                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                        record.OrderInfoId = xmorderInfo.ID;
                                        record.PropertyName = "OrderStatus";
                                        record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                                        record.NewValue = System.Convert.ToString(orderinfo.OrderStatus);
                                        record.UpdatorID = UpsatorID;

                                        if (Modified != null && Modified != "")
                                        {
                                            record.UpdateTime = DateTime.Parse(Modified);
                                        }
                                        else
                                        {
                                            record.UpdateTime = DateTime.Now;
                                        }
                                        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                    }

                                    #endregion
                                }
                                xmorderInfo.OrderInfoModified = DateTime.Parse(orderinfo.UpdateTime);//更新时间
                                if (orderinfo.OrderPaymentConfirmDate != "" && orderinfo.OrderPaymentConfirmDate != null)
                                {
                                    xmorderInfo.PayDate = DateTime.Parse(orderinfo.OrderPaymentConfirmDate);//付款时间
                                }
                                if (orderinfo.DeliveryDate != "" && orderinfo.DeliveryDate != null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Parse(orderinfo.DeliveryDate);//发货时间
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Parse(orderinfo.DeliveryDate);//付款时间
                                    }
                                }
                                if (orderinfo.ReceiveDate != null && orderinfo.ReceiveDate != "" && orderinfo.ReceiveDate != "0001-01-01 00:00:00")
                                {
                                    xmorderInfo.CompletionTime = DateTime.Parse(orderinfo.ReceiveDate);
                                    AutoSingleRow(ordercode);
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Parse(orderinfo.ReceiveDate);//付款时间
                                    }
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Parse(orderinfo.ReceiveDate);//付款时间
                                    }
                                }
                                xmorderInfo.OrderStatus = orderinfo.OrderStatus.ToString();//订单状态（38：待发货；20：已发货；24：用户已收到货；35：已完成；34：订单已关闭）
                                xmorderInfo.WantID = orderinfo.EndUserId.ToString();//用户id
                                xmorderInfo.FullName = orderinfo.GoodReceiverName;//收货人
                                xmorderInfo.Province = orderinfo.GoodReceiverProvince;//省
                                xmorderInfo.City = orderinfo.GoodReceiverCity;//市
                                xmorderInfo.County = orderinfo.GoodReceiverCounty;//区县
                                xmorderInfo.DeliveryAddress = orderinfo.GoodReceiverAddress;//收货地址
                                xmorderInfo.Mobile = orderinfo.GoodReceiverMoblie;//手机
                                xmorderInfo.Tel = orderinfo.GoodReceiverPhone;//电话
                                xmorderInfo.SourceType = "同步";//数据来源
                                xmorderInfo.FinancialAudit = true;//财务审核
                                xmorderInfo.IsOurOrder = true;

                                //更改收货地址
                                //if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
                                //{
                                //    string csr = CustomerServiceRemark + "$";
                                //    string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                                //    string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");

                                //    xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                                //}

                                xmorderInfo.Remark = orderinfo.DeliveryRemark;//发货备注
                                xmorderInfo.CustomerServiceRemark = orderinfo.MerchantRemark;//卖家备注(修改)


                                #region 赠品、返现
                                //    if (orderinfo.OrderStatus.ToString() == "ORDER_PAYED" || orderinfo.OrderStatus.ToString() == "ORDER_TRUNED_TO_DO"
                                //|| orderinfo.OrderStatus.ToString() == "ORDER_OUT_OF_WH" || orderinfo.OrderStatus.ToString() == "ORDER_RECEIVED"
                                //|| orderinfo.OrderStatus.ToString() == "ORDER_FINISH")//待审核订单（已支付/未处理）
                                //    {
                                //        if (orderinfo.OrderCreateTime.ToString().Trim() != null && orderinfo.OrderCreateTime.ToString().Trim() != "")
                                //        {
                                //            if (DateTime.Parse(orderinfo.OrderCreateTime.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                //            {
                                //                if (orderinfo.MerchantRemark != null && orderinfo.MerchantRemark != "")
                                //                {
                                //                    string BuyerName = orderinfo.GoodReceiverName;//收货人名称 
                                //                    string WantNo = orderinfo.EndUserId.ToString();//旺旺号 
                                //                    string OrderCode = orderinfo.OrderCode;//订单号 
                                //                    string paramMessage = string.Empty;

                                //                    if (orderinfo.MerchantRemark.IndexOf("赠品") > -1 || orderinfo.MerchantRemark.IndexOf("返现") > -1)
                                //                    {
                                //                        #region 赠品
                                //                        if (orderinfo.MerchantRemark.IndexOf("赠品") > -1)
                                //                        {
                                //                            //返回赠品条数
                                //                            int PremiumsInst = XMPremiumsInst(orderinfo.MerchantRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage);

                                //                        }
                                //                        #endregion

                                //                        #region 返现
                                //                        if (orderinfo.MerchantRemark.IndexOf("返现") > -1)
                                //                        {

                                //                                    //返回返现条数
                                //                                    int CashBackApplicationInstCount = CashBackApplicationInst(orderinfo.MerchantRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack),  ref paramMessage);

                                //                        }

                                //                        #endregion
                                //                    }
                                //                }
                                //            }
                                //        }

                                //    }
                                #endregion

                                #region 旧赠品、返现
                                //string MerchantRemark = orderinfo.MerchantRemark;
                                ////订单完成
                                //if (orderinfo.OrderStatus.ToString() == "ORDER_FINISH")
                                //{

                                //    if (MerchantRemark != null && MerchantRemark != "")
                                //    {
                                //        string CashBackMoney = "";//返现金额
                                //        string BuyerName = "";//姓名
                                //        string BuyerAlipayNo = "";//收款账号
                                //        string WantNo = orderinfo.EndUserId.ToString();//旺旺号
                                //        string OrderCode = orderinfo.OrderCode;//订单号  
                                #region 赠品、返现

                                #endregion

                                //    }

                                //}
                                #endregion

                                xmorderInfo.PayPrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收金额

                                scSalePrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收金额

                                if (HozestERPContext.Current.User != null)
                                {
                                    xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;

                                }
                                else
                                {
                                    string UserName = "admin";
                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                    if (customer.Count > 0)
                                    {
                                        xmorderInfo.UpdateID = customer[0].CustomerID;
                                    }
                                }

                                xmorderInfo.UpdateDate = DateTime.Now;

                                string ModifiedDate = orderinfo.UpdateTime;//订单修改时间

                                string scProductName = "";//商品名称（刷单）
                                //decimal scSalePrice = 0;//销售价(刷单)

                                for (int k = 0; k < repSupplierOrders_order.OrderInfo.OrderItemList.OrderItem.Count; k++)
                                {
                                    //产品详情
                                    var productinfo = repSupplierOrders_order.OrderInfo.OrderItemList.OrderItem[k];

                                    if (productinfo != null)
                                    {
                                        string OuterSkuId = productinfo.OuterId;//商品编码
                                        int? num = productinfo.OrderItemNum;//数量
                                        string orderitemprice = productinfo.OrderItemPrice == null ? "0" : productinfo.OrderItemPrice.ToString();//单价
                                        if (OuterSkuId != "" && OuterSkuId != null)
                                        {
                                            //商家编码查询从表信息。
                                            var ProductList = this.GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);
                                            //var XMOrderInfoProduct = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).SingleOrDefault();

                                            //if (XMOrderInfoProduct == null)
                                            //{
                                            //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                            //}

                                            var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                                            XMOrderInfoProductDetails XMOrderInfoProduct = null;

                                            if (OrderyReportProductList.Count == 0)
                                            {
                                                XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                            }
                                            else
                                            {

                                                XMOrderInfoProduct = OrderyReportProductList[0];
                                            }

                                            if (ProductList.Count > 0)
                                            {
                                                //商品关联主表信息
                                                //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                                if (ProductList[0].TDateTimeStart != null && ProductList[0].TDateTimeEnd != null && ModifiedDate != null && ModifiedDate != "" && ModifiedDate != "0001-01-01 00:00:00")
                                                {
                                                    if (Convert.ToDateTime(ModifiedDate) >= ProductList[0].TDateTimeStart && Convert.ToDateTime(ModifiedDate) <= ProductList[0].TDateTimeEnd)
                                                    {

                                                        XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                        XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
                                                        XMOrderInfoProduct.FactoryPrice = ProductList[0].TCostprice * Convert.ToInt32(num);//出厂价
                                                        XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                                        XMOrderInfoProduct.TCostprice = ProductList[0].TCostprice;
                                                    }
                                                    else
                                                    {
                                                        XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                        XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
                                                        XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                                                        XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                                        XMOrderInfoProduct.TCostprice = ProductList[0].Costprice;
                                                    }

                                                }
                                                else
                                                {
                                                    XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                    XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
                                                    XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                                                    XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                                    XMOrderInfoProduct.TCostprice = ProductList[0].Costprice;
                                                }
                                            }
                                            else
                                            {
                                                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                                XMOrderInfoProduct.Specifications = "";//尺寸
                                                XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                                XMOrderInfoProduct.ProductName = "无产品";
                                            }

                                            XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                            if (ModifiedDate != null && ModifiedDate != "")
                                            {
                                                XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

                                            }
                                            XMOrderInfoProduct.SalesPrice = Decimal.Parse(orderitemprice);//单价/销售价

                                            if (scProductName == "")
                                            {
                                                scProductName = XMOrderInfoProduct.ProductName;
                                                // scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                            }

                                            if (HozestERPContext.Current.User != null)
                                            {
                                                XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                            }
                                            else
                                            {
                                                string UserName = "admin";
                                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                if (customer.Count > 0)
                                                {
                                                    XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                }
                                            }

                                            XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                        }
                                    }
                                }

                                //判断是否刷单
                                orderstatus = "ORDER_PAYED,ORDER_TRUNED_TO_DO,ORDER_OUT_OF_WH,ORDER_RECEIVED,ORDER_FINISH";
                                if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                                {
                                    xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), ordercode, xmorderInfo.Remark, orderinfo.MerchantRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售额：订单支付金额
                                }

                                #region  保存数据

                                IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
                                UpdateCount++;

                                #endregion
                            }

                            #endregion
                        }
                    }
                }
            }
        }

        /// <summary>
        /// 根据订单OrderCode
        /// </summary>
        /// <param name="OrderCode"></param>
        /// <returns></returns>
        public XMOrderInfo GetXMOrderInfoByOrderCode(string OrderCode)
        {
            var query = from p in this._context.XMOrderInfoes
                        where p.OrderCode.Equals(OrderCode)
                        && p.IsEnable == false
                        select p;
            return query.FirstOrDefault();

        }

        /// <summary>
        /// 同步苏宁易购数据   批量获取订单（三个月内的订单） 
        /// </summary>
        /// <param name="createDateStart"></param>
        /// <param name="createDateEnd"></param>
        /// <param name="Status"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        public void SynchronousSuningOrderData(string createDateStart, string createDateEnd, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            int ICount = 0;
            int UCount = 0;
            PageSuningOrderDataList(createDateStart, createDateEnd, ref ICount, ref UCount, xMorderInfoApp);
            InsertCount += ICount;
            UpdateCount += UCount;
        }
        /// <summary>
        /// 苏宁易购 suning.custom.order.query 批量获取订单（三个月内的订单） 
        /// </summary>
        /// <param name="paydatestart"></param>
        /// <param name="paydateend"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        private void PageSuningOrderDataList(string paydatestart, string paydateend, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            //根据时间查询订单信息
            suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrderQueryRequest requestList = new suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrderQueryRequest();
            requestList.startTime = paydatestart;
            requestList.endTime = paydateend;
            //开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
            //SuningLogger.IsLogDebug = true;
            suning::suning_api_sdk.ISuningClient clientList = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
            suning::suning_api_sdk.BizResponse.CustomTransactionResponse.OrderQueryResponse responseList = clientList.Execute(requestList);

            if (responseList != null && responseList.orderQuery.Count > 0)
            {
                for (int o = 0; o < responseList.orderQuery.Count; o++)
                {
                    var orderListInfo = responseList.orderQuery[o];

                    if (xMorderInfoApp != null && orderListInfo.orderCode != "")
                    {
                        //根据订单号查询订单信息
                        suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrderGetRequest request = new suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrderGetRequest();
                        request.orderCode = orderListInfo.orderCode;
                        //开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
                        //SuningLogger.IsLogDebug = true;
                        suning::suning_api_sdk.ISuningClient client = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
                        suning::suning_api_sdk.BizResponse.CustomTransactionResponse.OrderGetResponse response = client.Execute(request);

                        if (response != null && response.orderDetail.Count > 0)
                        {
                            //订单编号查询订单
                            var xmorderInfo = this.GetXMOrderInfoByOrderCode(orderListInfo.orderCode);
                            //获取的订单商品
                            var productInfo = response.orderDetail.FirstOrDefault();


                            decimal scSalePrice = 0;//销售价(刷单)

                            #region 新增
                            if (xmorderInfo == null)
                            {
                                xmorderInfo = new XMOrderInfo();
                                xmorderInfo.NickID = xMorderInfoApp.NickId;//城市爱情
                                xmorderInfo.PlatformTypeId = xMorderInfoApp.PlatformTypeId;//苏宁易购
                                xmorderInfo.OrderInfoCreateDate = DateTime.Parse(response.orderSaleTime);//创单时间
                                xmorderInfo.OrderCode = response.orderCode;//订单编号
                                xmorderInfo.OrderStatus = response.orderTotalStatus;//订单状态 10待发货、20已发货、21部分发货、30交易成功、40交易关闭

                                if (response.orderTotalStatus == "10")
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                    }
                                }
                                if (response.orderTotalStatus == "20")
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                    }
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                    }
                                }

                                if (response.orderTotalStatus == "30")
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                    }
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                    }
                                    if (xmorderInfo.CompletionTime == null)
                                    {
                                        xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                        AutoSingleRow(response.orderCode);
                                    }
                                }

                                xmorderInfo.WantID = response.userName;//用户id
                                xmorderInfo.FullName = response.customerName;//收货人
                                xmorderInfo.Province = response.provinceName;//省
                                xmorderInfo.City = response.cityName;//市
                                xmorderInfo.County = response.districtName;//区县
                                xmorderInfo.DeliveryAddress = response.customerAddress;//收货地址
                                xmorderInfo.Mobile = response.mobNum;//手机
                                xmorderInfo.Tel = response.mobNum;//电话
                                xmorderInfo.SourceType = "同步";//数据来源
                                xmorderInfo.FinancialAudit = true;//财务审核
                                xmorderInfo.Remark = response.buyerOrdRemark;//买家备注
                                xmorderInfo.CustomerServiceRemark = response.sellerOrdRemark;//卖家备注(新增)



                                string CustomerServiceRemark = response.sellerOrdRemark;

                                #region 赠品、返现 修改 苏宁易购为完成时才新增赠品返现
                                //    response.orderTotalStatus.ToString() == "10" || response.orderTotalStatus.ToString() == "20"
                                //|| response.orderTotalStatus.ToString() == "21" ||
                                //if ( response.orderTotalStatus.ToString() == "30")//10待发货
                                //{
                                if (response.orderSaleTime.ToString().Trim() != null && response.orderSaleTime.ToString().Trim() != "")
                                {
                                    if (DateTime.Parse(response.orderSaleTime.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                    {
                                        if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                        {
                                            string BuyerName = response.customerName;//收货人名称 
                                            string WantNo = response.userName;//旺旺号 
                                            string OrderCode = response.orderCode;//订单号 
                                            string paramMessage = string.Empty;

                                            if (CustomerServiceRemark.IndexOf("/赠品") > -1 || CustomerServiceRemark.IndexOf("/退差价") > -1)
                                            {
                                                #region 赠品
                                                if (CustomerServiceRemark.IndexOf("/赠品") > -1)
                                                {
                                                    //返回赠品条数
                                                    int PremiumsInst = XMPremiumsInst(CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, xMorderInfoApp.PlatformTypeId.Value, xMorderInfoApp.NickId.Value);

                                                }
                                                #endregion

                                                #region 返现
                                                if (CustomerServiceRemark.IndexOf("/退差价") > -1)
                                                {

                                                    //返回返现条数
                                                    int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                                }

                                                #endregion
                                            }
                                        }
                                    }
                                }

                                //}
                                #endregion
                                xmorderInfo.IsEnable = false;//是否删除
                                xmorderInfo.IsCashBack = false;//是否返现
                                xmorderInfo.IsSentGifts = false;//是否已发赠品 
                                xmorderInfo.IsEvaluate = false;//是否赔付
                                xmorderInfo.IsOurOrder = true;

                                if (HozestERPContext.Current.User != null)
                                {
                                    xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                                    xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;

                                }
                                else
                                {
                                    string UserName = "admin";
                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                    if (customer.Count > 0)
                                    {
                                        xmorderInfo.CreateID = customer[0].CustomerID;
                                        xmorderInfo.UpdateID = customer[0].CustomerID;
                                    }
                                }

                                xmorderInfo.CreateDate = DateTime.Now;
                                xmorderInfo.UpdateDate = DateTime.Now;

                                decimal orderprice = 0;//订单金额
                                decimal transportprice = 0;//运费
                                decimal coupontotalMoney = 0;//优惠卷金额
                                decimal vouchertotalMoney = 0;//优惠单金额


                                string scProductName = "";//商品名称（刷单）

                                string ModifiedDate = xmorderInfo.OrderInfoCreateDate.ToString();
                                xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();//初始化
                                for (int k = 0; k < response.orderDetail.Count; k++)
                                {
                                    var productinfo = response.orderDetail[k];

                                    orderprice += (decimal.Parse(productinfo.unitPrice) * decimal.Parse(productinfo.saleNum));//商品单价*数量
                                    transportprice += decimal.Parse(productinfo.transportFee);//运费
                                    coupontotalMoney += decimal.Parse(productinfo.coupontotalMoney);//优惠卷金额
                                    decimal changeNum = 0;
                                    if (decimal.TryParse(productinfo.vouchertotalMoney, out changeNum))
                                    {
                                        vouchertotalMoney += decimal.Parse(productinfo.vouchertotalMoney);//优惠单金额
                                    }
                                    else
                                    {
                                        vouchertotalMoney = 0;
                                    }

                                    ////获取产品详情
                                    //suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest requestProduct = new suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest();
                                    //requestProduct.productCode = productinfo.itemCode;//产品编号
                                    ////开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
                                    ////SuningLogger.IsLogDebug = true;
                                    //suning::suning_api_sdk.ISuningClient clientProduct = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
                                    //suning::suning_api_sdk.BizResponse.CustomItemResponse.ItemGetResponse responseProduct = clientProduct.Execute(requestProduct);
                                    //产品详情
                                    if (productinfo != null)
                                    {
                                        string OuterSkuId = productinfo.productCode;//商品编码
                                        int? num = int.Parse(productinfo.saleNum.Substring(0, productinfo.saleNum.IndexOf(".")));//数量
                                        string unitprice = productinfo.unitPrice == null ? "0" : productinfo.unitPrice.ToString();//单价
                                        //XMOrderInfoProductDetails XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                        if (OuterSkuId != "" && OuterSkuId != null)
                                        {
                                            //商家编码查询从表信息。
                                            var ProductList = this.GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);

                                            //2015-7-28新增
                                            decimal a = 0;
                                            decimal? tj = 0;
                                            if (ProductList.Count == 0)
                                            {
                                                ProductList = GetXMProductListByzuheCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));
                                                a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                            }

                                            //var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                                            //XMOrderInfoProductDetails XMOrderInfoProduct = null;

                                            //if (OrderyReportProductList.Count == 0)
                                            //{
                                            //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                            //}
                                            //else
                                            //{

                                            //    XMOrderInfoProduct = OrderyReportProductList[0];
                                            //}
                                            if (ProductList.Count > 0)
                                            {
                                                for (int i = 0; i < ProductList.Count; i++)
                                                {
                                                    var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                    //商品关联主表信息
                                                    //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                                    if (ProductList[i].TDateTimeStart != null && ProductList[i].TDateTimeEnd != null && ModifiedDate != null && ModifiedDate != "" && ModifiedDate != "0001-01-01 00:00:00")
                                                    {
                                                        if (Convert.ToDateTime(ModifiedDate) >= ProductList[i].TDateTimeStart && Convert.ToDateTime(ModifiedDate) <= ProductList[i].TDateTimeEnd)
                                                        {
                                                            //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                                                            XMOrderInfoProduct.Specifications = ProductList[i].Specifications;//尺寸
                                                            XMOrderInfoProduct.FactoryPrice = ProductList[i].Costprice * num * ProductList[i].count;//出厂价*数量
                                                            XMOrderInfoProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                                            XMOrderInfoProduct.TCostprice = ProductList[i].TCostprice;
                                                        }
                                                        else
                                                        {
                                                            //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                                                            XMOrderInfoProduct.Specifications = ProductList[i].Specifications;//尺寸
                                                            XMOrderInfoProduct.FactoryPrice = ProductList[i].Costprice * num * ProductList[i].count;//出厂价*数量
                                                            XMOrderInfoProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                                            XMOrderInfoProduct.TCostprice = ProductList[i].Costprice;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                        XMOrderInfoProduct.PlatformMerchantCode = ProductList[i].PlatformMerchantCode;//料号(商家编码)
                                                        XMOrderInfoProduct.Specifications = ProductList[i].Specifications;//尺寸
                                                        XMOrderInfoProduct.FactoryPrice = ProductList[i].Costprice * num * ProductList[i].count;//出厂价*数量
                                                        XMOrderInfoProduct.ProductName = ProductList[i].ProductName;//产品名称 
                                                        XMOrderInfoProduct.TCostprice = ProductList[i].Costprice;
                                                    }


                                                    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num) * ProductList[i].count;//数量
                                                    if (ModifiedDate != null && ModifiedDate != "")
                                                    {
                                                        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间
                                                    }
                                                    //XMOrderInfoProduct.SalesPrice = Decimal.Parse(unitprice);//单价/销售价
                                                    if (i < ProductList.Count - 1)
                                                    {
                                                        XMOrderInfoProduct.SalesPrice = Math.Round(decimal.Parse(((ProductList[i].Costprice * ProductList[i].count * num / a) * decimal.Parse(unitprice)).ToString()), 2);//销售价
                                                        tj = tj + XMOrderInfoProduct.SalesPrice;
                                                    }
                                                    else
                                                    {
                                                        XMOrderInfoProduct.SalesPrice = decimal.Parse(unitprice) - tj;//销售价
                                                    }
                                                    XMOrderInfoProduct.IsEnable = false;//是否删除
                                                    XMOrderInfoProduct.IsAudit = false;//是否审核
                                                    XMOrderInfoProduct.IsExpedited = false;//是否加急

                                                    XMOrderInfoProduct.ISArrivedLibrary = false;

                                                    if (scProductName == "")
                                                    {
                                                        scProductName = XMOrderInfoProduct.ProductName;
                                                        //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                    }

                                                    if (HozestERPContext.Current.User != null)
                                                    {
                                                        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                    }
                                                    else
                                                    {
                                                        string UserName = "admin";
                                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                        if (customer.Count > 0)
                                                        {
                                                            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                        }
                                                    }

                                                    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                    XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                                    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                                }
                                            }
                                            else
                                            {
                                                var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                                XMOrderInfoProduct.Specifications = "";//尺寸
                                                XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                                XMOrderInfoProduct.ProductName = "无产品";

                                                xmorderInfo.IsAbnormal = true;//是否异常

                                                XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                                if (ModifiedDate != null && ModifiedDate != "")
                                                {
                                                    XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间
                                                }
                                                XMOrderInfoProduct.SalesPrice = Decimal.Parse(unitprice) * Convert.ToInt32(num);//单价/销售价

                                                XMOrderInfoProduct.IsEnable = false;//是否删除
                                                XMOrderInfoProduct.IsAudit = false;//是否审核
                                                XMOrderInfoProduct.IsExpedited = false;//是否加急

                                                XMOrderInfoProduct.ISArrivedLibrary = false;

                                                if (scProductName == "")
                                                {
                                                    scProductName = XMOrderInfoProduct.ProductName;
                                                    //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                }

                                                if (HozestERPContext.Current.User != null)
                                                {
                                                    XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                    XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                }
                                                else
                                                {
                                                    string UserName = "admin";
                                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                    if (customer.Count > 0)
                                                    {
                                                        XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                        XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                    }
                                                }

                                                XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                                xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);

                                            }
                                        }
                                        //else
                                        //{ 
                                        //    //没有商品编码
                                        //    XMOrderInfoProduct.PlatformMerchantCode = ""; //料号（商品编码）
                                        //    XMOrderInfoProduct.Specifications = "";//尺寸
                                        //    XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                        //    XMOrderInfoProduct.ProductName = "无产品";
                                        //    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                        //    if (ModifiedDate != null && ModifiedDate != "")
                                        //    {
                                        //        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间
                                        //    }
                                        //    XMOrderInfoProduct.SalesPrice = Decimal.Parse(unitprice);//单价/销售价

                                        //    XMOrderInfoProduct.IsEnable = false;//是否删除
                                        //    XMOrderInfoProduct.IsAudit = false;//是否审核
                                        //    XMOrderInfoProduct.IsExpedited = false;//是否加急

                                        //    XMOrderInfoProduct.ISArrivedLibrary = false;

                                        //    if (HozestERPContext.Current.User != null)
                                        //    {
                                        //        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                        //        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                        //    }
                                        //    else
                                        //    {
                                        //        string UserName = "admin";
                                        //        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                        //        if (customer.Count > 0)
                                        //        {
                                        //            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                        //            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                        //        }
                                        //    }

                                        //    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                        //    XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                        //    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);

                                        //    xmorderInfo.IsAbnormal = true;//是否异常
                                        //}
                                    }
                                }

                                scSalePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额
                                //判断是否刷单
                                orderstatus = "10,20,21,30";
                                if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                                {
                                    xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), orderListInfo.orderCode, xmorderInfo.Remark, response.sellerOrdRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售金额：订单支付金额
                                }
                                if (response.invoiceType != null && response.invoiceType != "")//发票类型 -- 增值还是普通（01增值 02普通）
                                {
                                    xmorderInfo.IsInvoiced = true;
                                    xmorderInfo.InvoiceNo = response.vatTaxpayerNumber;//发票号码
                                    //xmorderInfo.InvoiceHead = orderinfo.InvoiceTitle;//发票抬头
                                    xmorderInfo.InvoiceNo = response.invoice;//发票内容
                                    xmorderInfo.InvoicePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收款(价格*数量+运费-优惠券金额-优惠单金额)
                                }
                                //xmorderInfo.DistributeMethod = productInfo.disType;//配送方式({10001:普通快递、20001:EMS、30001:供应商直送、40001:自提、30002:店中店商家直送} )
                                xmorderInfo.DistributePrice = transportprice;//运费（苏宁易购）
                                xmorderInfo.ProductPrice = orderprice;//产品总额
                                xmorderInfo.OrderPrice = orderprice + transportprice;//订单金额
                                //Decimal? promotionprice = 0;//优惠金额
                                //promotionprice = xmorderInfo.ProductPrice + xmorderInfo.DistributePrice - xmorderInfo.OrderPrice;
                                xmorderInfo.OrderPromotion = vouchertotalMoney;//订单优惠金额
                                //Decimal? taxes = 0;//折扣
                                //taxes = (xmorderInfo.OrderPrice - promotionprice) / xmorderInfo.OrderPrice;
                                //xmorderInfo.Taxes = taxes;
                                xmorderInfo.ReceivablePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//应收金额
                                xmorderInfo.PayPrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额


                                #region  保存数据

                                IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
                                InsertCount++;

                                #endregion
                            }
                            #endregion

                            #region 修改

                            else
                            {
                                string Remarks = xmorderInfo.Remark;
                                string CustomerServiceRemark = xmorderInfo.CustomerServiceRemark;
                                //string Modified = orderinfo.OrderUpdateTime.ToString();
                                string Memo = CustomerServiceRemark;//SellerMemo.Substring(SellerMemo.LastIndexOf("'") + 1).ToLower();
                                string RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;
                                string StatusValue = xmorderInfo.OrderStatus.Trim();
                                decimal FactoryPrice = 0;

                                if (Memo != RemarksValue || StatusValue != response.orderTotalStatus.ToString().Trim())
                                {
                                    #region 记录操作

                                    int UpsatorID = 0;
                                    if (HozestERPContext.Current.User != null)
                                    {
                                        UpsatorID = HozestERPContext.Current.User.CustomerID;
                                    }
                                    else
                                    {
                                        string UserName = "admin";
                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                        if (customer.Count > 0)
                                        {
                                            UpsatorID = customer[0].CustomerID;
                                        }
                                    }

                                    //if (Modified != null && Modified != "")
                                    //{

                                    //    if (xmorderInfo.OrderInfoModified != Convert.ToDateTime(Modified))
                                    //    {
                                    //        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    //        record.OrderInfoId = xmorderInfo.ID;
                                    //        record.PropertyName = "OrderInfoModified";
                                    //        record.OldValue = System.Convert.ToString(xmorderInfo.OrderInfoModified);
                                    //        record.NewValue = Modified.ToString().Trim();
                                    //        record.UpdatorID = UpsatorID;
                                    //        record.UpdateTime = DateTime.Now;
                                    //        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record);//base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                                    //    }
                                    //}

                                    if (Remarks != null && Remarks != "")
                                    {
                                        if (xmorderInfo.Remark != Remarks)
                                        {
                                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                            record.OrderInfoId = xmorderInfo.ID;
                                            record.PropertyName = "Remarks";
                                            record.OldValue = xmorderInfo.Remark;
                                            record.NewValue = Remarks;
                                            record.UpdatorID = UpsatorID;
                                            record.UpdateTime = DateTime.Now;
                                            IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                        }
                                    }
                                    if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                    {
                                        if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
                                        {
                                            var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, CustomerServiceRemark);
                                            if (RecordExist == null || RecordExist.Count == 0)
                                            {
                                                XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                                record.OrderInfoId = xmorderInfo.ID;
                                                record.PropertyName = "CustomerServiceRemark";
                                                record.OldValue = xmorderInfo.CustomerServiceRemark;
                                                record.NewValue = CustomerServiceRemark;
                                                record.UpdatorID = UpsatorID;
                                                record.UpdateTime = DateTime.Now;
                                                IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                            }
                                        }
                                    }
                                    if (xmorderInfo.OrderStatus != response.orderTotalStatus.ToString())
                                    {
                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                        record.OrderInfoId = xmorderInfo.ID;
                                        record.PropertyName = "OrderStatus";
                                        record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                                        record.NewValue = System.Convert.ToString(response.orderTotalStatus);
                                        record.UpdatorID = UpsatorID;
                                        record.UpdateTime = DateTime.Now;
                                        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                    }

                                    #endregion
                                }
                                //xmorderInfo.OrderInfoModified = DateTime.Parse(orderinfo.OrderUpdateTime);//更新时间
                                xmorderInfo.OrderStatus = response.orderTotalStatus;//订单状态 10待发货、20已发货、21部分发货、30交易成功、40交易关闭
                                if (response.orderTotalStatus == "10")
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                    }
                                }
                                if (response.orderTotalStatus == "20")
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                    }
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                    }
                                }

                                if (response.orderTotalStatus == "30")
                                {
                                    if (xmorderInfo.PayDate == null)
                                    {
                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                    }
                                    if (xmorderInfo.DeliveryTime == null)
                                    {
                                        xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                    }
                                    if (xmorderInfo.CompletionTime == null)
                                    {
                                        xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                        AutoSingleRow(response.orderCode);
                                    }
                                }
                                xmorderInfo.WantID = response.userName;//用户id
                                xmorderInfo.FullName = response.customerName;//收货人
                                xmorderInfo.Province = response.provinceName;//省
                                xmorderInfo.City = response.cityName;//市
                                xmorderInfo.County = response.districtName;//区县
                                xmorderInfo.DeliveryAddress = response.customerAddress;//收货地址
                                xmorderInfo.Mobile = response.mobNum;//手机
                                xmorderInfo.Tel = response.mobNum;//电话
                                xmorderInfo.SourceType = "同步";//数据来源
                                xmorderInfo.FinancialAudit = true;//财务审核
                                xmorderInfo.IsOurOrder = true;

                                //更改收货地址
                                //if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
                                //{
                                //    string csr = CustomerServiceRemark + "$";
                                //    string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                                //    string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");

                                //    xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                                //}

                                xmorderInfo.Remark = response.buyerOrdRemark;//买家备注
                                xmorderInfo.CustomerServiceRemark = response.sellerOrdRemark;//卖家备注(修改)
                                //xmorderInfo.PayPrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收金额

                                #region 赠品、返现 (修改) 修改苏宁易购状态为完成时才能修改赠品返现状态
                                //if (response.orderTotalStatus.ToString() == "30")//10待发货
                                //{
                                if (CustomerServiceRemark.Trim() != response.sellerOrdRemark.Trim())
                                {
                                    string CustomerServiceRemarkOld = CustomerServiceRemark.Trim();
                                    string CustomerServiceRemarkNew = response.sellerOrdRemark.Trim();

                                    if (CustomerServiceRemarkNew.IndexOf("/赠品") > -1 || CustomerServiceRemarkNew.IndexOf("/退差价") > -1)
                                    {
                                        IoC.Resolve<IXMOrderInfoAPIService>().XMPremiumsAndCashBackApplication(CustomerServiceRemarkOld, CustomerServiceRemarkNew, xmorderInfo.OrderCode, xmorderInfo.WantID, xmorderInfo.FullName, (int)xmorderInfo.PlatformTypeId, (int)xmorderInfo.NickID);
                                    }
                                }
                                //}
                                #endregion

                                if (HozestERPContext.Current.User != null)
                                {
                                    xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                                }
                                else
                                {
                                    string UserName = "admin";
                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                    if (customer.Count > 0)
                                    {
                                        xmorderInfo.UpdateID = customer[0].CustomerID;
                                    }
                                }

                                xmorderInfo.UpdateDate = DateTime.Now;

                                decimal orderprice = 0;//订单金额
                                decimal transportprice = 0;//运费
                                decimal coupontotalMoney = 0;//优惠卷金额
                                decimal vouchertotalMoney = 0;//优惠单金额

                                string scProductName = "";//商品名称（刷单）
                                //decimal scSalePrice = 0;//销售价(刷单)
                                string ModifiedDate = xmorderInfo.OrderInfoCreateDate.ToString();

                                //获取订单详情
                                for (int k = 0; k < response.orderDetail.Count; k++)
                                {
                                    var productinfo = response.orderDetail[k];

                                    orderprice += (decimal.Parse(productinfo.unitPrice) * decimal.Parse(productinfo.saleNum));//商品单价*数量
                                    transportprice += decimal.Parse(productinfo.transportFee);//运费
                                    coupontotalMoney += decimal.Parse(productinfo.coupontotalMoney);//优惠卷金额
                                    decimal changeNum = 0;
                                    if (decimal.TryParse(productinfo.vouchertotalMoney, out changeNum))
                                    {
                                        vouchertotalMoney += decimal.Parse(productinfo.vouchertotalMoney);//优惠单金额
                                    }
                                    else
                                    {
                                        vouchertotalMoney = 0;
                                    }

                                    //获取产品详情
                                    //suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest requestProduct = new suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest();
                                    //requestProduct.productCode = productinfo.productCode;//产品编号
                                    ////开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
                                    ////SuningLogger.IsLogDebug = true;
                                    //suning::suning_api_sdk.ISuningClient clientProduct = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
                                    //suning::suning_api_sdk.BizResponse.CustomItemResponse.ItemGetResponse responseProduct = clientProduct.Execute(requestProduct);

                                    if (productinfo != null)
                                    {
                                        string OuterSkuId = productinfo.productCode;//商品编码
                                        int? num = int.Parse(productinfo.saleNum.Substring(0, productinfo.saleNum.IndexOf(".")));//数量
                                        string unitprice = productinfo.unitPrice == null ? "0" : productinfo.unitPrice.ToString();//单价
                                        if (OuterSkuId != "" && OuterSkuId != null)
                                        {
                                            //商家编码查询从表信息。
                                            var ProductList = this.GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);

                                            //var XMOrderInfoProduct = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).SingleOrDefault();

                                            //if (XMOrderInfoProduct == null)
                                            //{
                                            //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                            //}
                                            var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                                            XMOrderInfoProductDetails XMOrderInfoProduct = null;

                                            if (OrderyReportProductList.Count == 0)
                                            {
                                                XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                            }
                                            else
                                            {

                                                XMOrderInfoProduct = OrderyReportProductList[0];
                                            }
                                            if (ProductList.Count > 0)
                                            {
                                                //商品关联主表信息
                                                //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                                if (ProductList[0].TDateTimeStart != null && ProductList[0].TDateTimeEnd != null && ModifiedDate != null && ModifiedDate != "" && ModifiedDate != "0001-01-01 00:00:00")
                                                {
                                                    if (Convert.ToDateTime(ModifiedDate) >= ProductList[0].TDateTimeStart && Convert.ToDateTime(ModifiedDate) <= ProductList[0].TDateTimeEnd)
                                                    {
                                                        XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                        XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
                                                        XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                                                        XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                                        XMOrderInfoProduct.TCostprice = ProductList[0].TCostprice;
                                                    }
                                                    else
                                                    {
                                                        XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                        XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
                                                        XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                                                        XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                                        XMOrderInfoProduct.TCostprice = ProductList[0].Costprice;
                                                    }
                                                }
                                                else
                                                {
                                                    XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                    XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
                                                    XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                                                    XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                                    XMOrderInfoProduct.TCostprice = ProductList[0].Costprice;
                                                }
                                            }
                                            else
                                            {
                                                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                                XMOrderInfoProduct.Specifications = "";//尺寸
                                                XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                                XMOrderInfoProduct.ProductName = "无产品";
                                            }

                                            XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                            if (ModifiedDate != null && ModifiedDate != "")
                                            {
                                                XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

                                            }
                                            XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.unitPrice.ToString());//单价/销售价

                                            if (scProductName == "")
                                            {
                                                scProductName = XMOrderInfoProduct.ProductName;
                                                //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                            }

                                            if (HozestERPContext.Current.User != null)
                                            {
                                                XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                            }
                                            else
                                            {
                                                string UserName = "admin";
                                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                if (customer.Count > 0)
                                                {
                                                    XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                }
                                            }

                                            XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                        }
                                    }
                                }

                                scSalePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额
                                //判断是否刷单
                                orderstatus = "10,20,21,30";
                                if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                                {
                                    xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), orderListInfo.orderCode, xmorderInfo.Remark, response.sellerOrdRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售金额：订单支付金额
                                }
                                if (response.invoiceType != null && response.invoiceType != "")//发票类型 -- 增值还是普通（01增值 02普通）
                                {
                                    xmorderInfo.IsInvoiced = true;
                                    xmorderInfo.InvoiceNo = response.vatTaxpayerNumber;//发票号码
                                    xmorderInfo.InvoiceNo = response.invoice;//发票内容
                                    xmorderInfo.InvoicePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收款(价格*数量+运费-优惠券金额-优惠单金额)
                                }
                                xmorderInfo.DistributePrice = transportprice;//运费（苏宁易购）
                                xmorderInfo.ProductPrice = orderprice;//产品总额
                                xmorderInfo.OrderPrice = orderprice + transportprice;//订单金额
                                xmorderInfo.OrderPromotion = vouchertotalMoney;//订单优惠金额
                                xmorderInfo.ReceivablePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//应收金额
                                xmorderInfo.PayPrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额

                                #region  保存数据

                                IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
                                UpdateCount++;

                                #endregion
                            }

                            #endregion
                        }
                    }

                }

            }
        }

        /// <summary>
        /// 同步苏宁易购数据  根据订单修改时间批量查询订单信息 
        /// </summary>
        /// <param name="createDateStart"></param>
        /// <param name="createDateEnd"></param>
        /// <param name="Status"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        public void SynchronousSuningOrdData(string createDateStart, string createDateEnd, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            int ICount = 0;
            int UCount = 0;
            PageSuningOrdDataList(createDateStart, createDateEnd, ref ICount, ref UCount, xMorderInfoApp);
            InsertCount += ICount;
            UpdateCount += UCount;
        }

        /// <summary>
        /// 苏宁易购 suning.custom.ord.query 根据订单修改时间批量查询订单信息 
        /// </summary>
        /// <param name="paydatestart"></param>
        /// <param name="paydateend"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="xMorderInfoApp"></param>
        private void PageSuningOrdDataList(string paydatestart, string paydateend, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            List<string> orderStatus = new List<string>();
            orderStatus.Add("10");
            orderStatus.Add("20");
            orderStatus.Add("30");
            //循环 订单状态 （注：订单状态只能单个传）
            for (int i = 0; i < orderStatus.Count; i++)
            {

                //orderLineStatusChangeTime 	String 	订单行项目状态变更时间

                //根据时间查询订单信息
                suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrdQueryRequest requestList = new suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrdQueryRequest();
                requestList.startTime = paydatestart;
                requestList.endTime = paydateend;
                requestList.orderLineStatus = orderStatus[i];//"10,20,30"
                //开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
                //SuningLogger.IsLogDebug = true;
                suning::suning_api_sdk.ISuningClient clientList = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
                suning::suning_api_sdk.BizResponse.CustomTransactionResponse.OrdQueryResponse responseList = clientList.Execute(requestList);

                if (responseList != null && responseList.orderQuery != null)
                {
                    if (responseList.orderQuery.Count > 0)
                    {
                        for (int o = 0; o < responseList.orderQuery.Count; o++)
                        {
                            var orderListInfo = responseList.orderQuery[o];

                            if (xMorderInfoApp != null && orderListInfo.orderCode != "")
                            {
                                //根据订单号查询订单信息
                                suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrderGetRequest request = new suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrderGetRequest();
                                request.orderCode = orderListInfo.orderCode;
                                //开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
                                //SuningLogger.IsLogDebug = true;
                                suning::suning_api_sdk.ISuningClient client = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
                                suning::suning_api_sdk.BizResponse.CustomTransactionResponse.OrderGetResponse response = client.Execute(request);

                                if (response != null && response.orderDetail.Count > 0)
                                {
                                    //订单编号查询订单
                                    var xmorderInfo = this.GetXMOrderInfoByOrderCode(orderListInfo.orderCode);
                                    //获取的订单商品
                                    var productInfo = response.orderDetail.FirstOrDefault();

                                    decimal scSalePrice = 0;//销售价(刷单)

                                    #region 新增
                                    if (xmorderInfo == null)
                                    {
                                        xmorderInfo = new XMOrderInfo();
                                        xmorderInfo.NickID = xMorderInfoApp.NickId;//城市爱情
                                        xmorderInfo.PlatformTypeId = xMorderInfoApp.PlatformTypeId;//苏宁易购
                                        xmorderInfo.OrderInfoCreateDate = DateTime.Parse(response.orderSaleTime);//创单时间
                                        xmorderInfo.OrderCode = response.orderCode;//订单编号
                                        xmorderInfo.OrderStatus = response.orderTotalStatus;//订单状态 10待发货、20已发货、21部分发货、30交易成功、40交易关闭

                                        if (response.orderTotalStatus == "10")
                                        {

                                            if (xmorderInfo.PayDate == null)
                                            {
                                                xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                            }
                                        }
                                        if (response.orderTotalStatus == "20")
                                        {
                                            if (xmorderInfo.PayDate == null)
                                            {
                                                xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                            }
                                            if (xmorderInfo.DeliveryTime == null)
                                            {
                                                xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                            }
                                        }

                                        if (response.orderTotalStatus == "30")
                                        {
                                            if (xmorderInfo.PayDate == null)
                                            {
                                                xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                            }
                                            if (xmorderInfo.DeliveryTime == null)
                                            {
                                                xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                            }
                                            if (xmorderInfo.CompletionTime == null)
                                            {
                                                xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                                AutoSingleRow(response.orderCode);
                                            }
                                        }

                                        xmorderInfo.WantID = response.userName;//用户id
                                        xmorderInfo.FullName = response.customerName;//收货人
                                        xmorderInfo.Province = response.provinceName;//省
                                        xmorderInfo.City = response.cityName;//市
                                        xmorderInfo.County = response.districtName;//区县
                                        xmorderInfo.DeliveryAddress = response.customerAddress;//收货地址
                                        xmorderInfo.Mobile = response.mobNum;//手机
                                        xmorderInfo.Tel = response.mobNum;//电话
                                        xmorderInfo.SourceType = "同步";//数据来源
                                        xmorderInfo.FinancialAudit = true;//财务审核
                                        xmorderInfo.Remark = response.buyerOrdRemark;//买家备注
                                        xmorderInfo.CustomerServiceRemark = response.sellerOrdRemark;//卖家备注(新增)

                                        string CustomerServiceRemark = response.sellerOrdRemark;

                                        #region 赠品、返现 苏宁易购状态为完成才能新增赠品返现
                                        //    response.orderTotalStatus.ToString() == "10" || response.orderTotalStatus.ToString() == "20"
                                        //|| response.orderTotalStatus.ToString() == "21" ||
                                        if (response.orderTotalStatus.ToString() == "30")//10待发货
                                        {
                                            if (response.orderSaleTime.ToString().Trim() != null && response.orderSaleTime.ToString().Trim() != "")
                                            {
                                                if (DateTime.Parse(response.orderSaleTime.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                                {
                                                    if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                                    {
                                                        string BuyerName = response.customerName;//收货人名称 
                                                        string WantNo = response.userName;//旺旺号 
                                                        string OrderCode = response.orderCode;//订单号 
                                                        string paramMessage = string.Empty;

                                                        if (CustomerServiceRemark.IndexOf("/赠品") > -1 || CustomerServiceRemark.IndexOf("/退差价") > -1)
                                                        {
                                                            #region 赠品
                                                            if (CustomerServiceRemark.IndexOf("/赠品") > -1)
                                                            {
                                                                //返回赠品条数
                                                                int PremiumsInst = XMPremiumsInst(CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, xMorderInfoApp.PlatformTypeId.Value, xMorderInfoApp.NickId.Value);

                                                            }
                                                            #endregion

                                                            #region 返现
                                                            if (CustomerServiceRemark.IndexOf("/退差价") > -1)
                                                            {

                                                                //返回返现条数
                                                                int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                                            }

                                                            #endregion
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                        #endregion

                                        xmorderInfo.IsEnable = false;//是否删除
                                        xmorderInfo.IsCashBack = false;//是否返现
                                        xmorderInfo.IsSentGifts = false;//是否已发赠品 
                                        xmorderInfo.IsEvaluate = false;//是否赔付
                                        xmorderInfo.IsOurOrder = true;//是我们的订单

                                        if (HozestERPContext.Current.User != null)
                                        {
                                            xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                                            xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;

                                        }
                                        else
                                        {
                                            string UserName = "admin";
                                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                            if (customer.Count > 0)
                                            {
                                                xmorderInfo.CreateID = customer[0].CustomerID;
                                                xmorderInfo.UpdateID = customer[0].CustomerID;
                                            }
                                        }

                                        xmorderInfo.CreateDate = DateTime.Now;
                                        xmorderInfo.UpdateDate = DateTime.Now;

                                        decimal orderprice = 0;//订单金额
                                        decimal transportprice = 0;//运费
                                        decimal coupontotalMoney = 0;//优惠卷金额
                                        decimal vouchertotalMoney = 0;//优惠单金额
                                        string scProductName = "";//商品名称（刷单）
                                        decimal priceTotal = 0;//总商品金额
                                        decimal PayAmountTotal = 0;//总支付金额
                                        decimal PlatformDiscountAmount = 0;//平台总优惠金额

                                        for (int k = 0; k < response.orderDetail.Count; k++)
                                        {
                                            var productinfo = response.orderDetail;
                                            decimal PriceNum = decimal.Parse(productinfo[k].unitPrice == null ? "0" : (productinfo[k].unitPrice == "" ? "0" : productinfo[k].unitPrice)) * decimal.Parse(productinfo[k].saleNum);
                                            priceTotal += PriceNum;

                                            orderprice += (decimal.Parse(productinfo[k].unitPrice) * decimal.Parse(productinfo[k].saleNum));//商品单价*数量
                                            transportprice += decimal.Parse(productinfo[k].transportFee);//运费
                                            coupontotalMoney += decimal.Parse(productinfo[k].coupontotalMoney);//优惠卷金额
                                            decimal changeNum = 0;
                                            if (decimal.TryParse(productinfo[k].vouchertotalMoney, out changeNum))
                                            {
                                                vouchertotalMoney += decimal.Parse(productinfo[k].vouchertotalMoney);//优惠单金额
                                            }
                                            else
                                            {
                                                vouchertotalMoney = 0;
                                            }

                                            PayAmountTotal += response.orderDetail[k].payAmount == "" ? 0 : decimal.Parse(response.orderDetail[k].payAmount);
                                            //支付金额+平台优惠金额
                                            if (response.orderDetail[k].paymentList != null && response.orderDetail[k].paymentList.Count > 0)
                                            {
                                                foreach (var Item in response.orderDetail[k].paymentList)
                                                {
                                                    //6998-联合0元购券、7998-0元购券，8012-积分抵现，10001-云券，10002-限品类云券、10004-易券、10005-限品类易券、10009-无敌券,平台优惠券
                                                    string[] arr = { "6998", "7998", "8012", "10001", "10002", "10004", "10005", "10009" };
                                                    if (arr.Contains(Item.paycode))
                                                    {
                                                        PlatformDiscountAmount += decimal.Parse(Item.payamount);
                                                    }
                                                }
                                            }
                                        }
                                        decimal payPriceK = 0;//已赋值付款金额

                                        xmorderInfo.PayPrice = PayAmountTotal + PlatformDiscountAmount;//orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额

                                        string ModifiedDate = xmorderInfo.OrderInfoCreateDate.ToString();
                                        xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();//初始化
                                        for (int k = 0; k < response.orderDetail.Count; k++)
                                        {
                                            var productinfo = response.orderDetail[k];

                                            //orderprice += (decimal.Parse(productinfo.unitPrice) * decimal.Parse(productinfo.saleNum));//商品单价*数量
                                            //transportprice += decimal.Parse(productinfo.transportFee);//运费
                                            //coupontotalMoney += decimal.Parse(productinfo.coupontotalMoney);//优惠卷金额
                                            //decimal changeNum = 0;
                                            //if (decimal.TryParse(productinfo.vouchertotalMoney, out changeNum))
                                            //{
                                            //    vouchertotalMoney += decimal.Parse(productinfo.vouchertotalMoney);//优惠单金额
                                            //}
                                            //else
                                            //{
                                            //    vouchertotalMoney = 0;
                                            //}

                                            ////获取产品详情
                                            //suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest requestProduct = new suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest();
                                            //requestProduct.productCode = productinfo.itemCode;//产品编号
                                            ////开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
                                            ////SuningLogger.IsLogDebug = true;
                                            //suning::suning_api_sdk.ISuningClient clientProduct = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
                                            //suning::suning_api_sdk.BizResponse.CustomItemResponse.ItemGetResponse responseProduct = clientProduct.Execute(requestProduct);
                                            //产品详情
                                            if (productinfo != null)
                                            {
                                                string OuterSkuId = productinfo.productCode;//商品编码
                                                int? num = int.Parse(productinfo.saleNum.Substring(0, productinfo.saleNum.IndexOf(".")));//数量
                                                string unitprice = productinfo.unitPrice == null ? "0" : productinfo.unitPrice.ToString();//单价
                                                //XMOrderInfoProductDetails XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                if (OuterSkuId != "" && OuterSkuId != null)
                                                {
                                                    //商家编码查询从表信息。
                                                    var ProductList = this.GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);
                                                    //2015-7-28新增
                                                    decimal a = 0;
                                                    decimal? tj = 0;
                                                    bool IsZuHe = false;
                                                    if (ProductList.Count == 0)
                                                    {
                                                        ProductList = GetXMProductListByzuheCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                                        a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                                        if (ProductList.Count > 0)
                                                        {
                                                            IsZuHe = true;
                                                        }
                                                    }

                                                    //var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();
                                                    //XMOrderInfoProductDetails XMOrderInfoProduct = null;
                                                    //if (OrderyReportProductList.Count == 0)
                                                    //{
                                                    //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                    //}
                                                    //else
                                                    //{
                                                    //    XMOrderInfoProduct = OrderyReportProductList[0];
                                                    //}
                                                    if (ProductList.Count > 0)
                                                    {
                                                        decimal payPriceI = 0;//组合已赋值付款金额
                                                        decimal ZuHeTotal = 0;
                                                        for (int w = 0; w < ProductList.Count; w++)
                                                        {
                                                            decimal ZuHeNum = (decimal)ProductList[w].Saleprice * decimal.Parse(ProductList[w].count.ToString());
                                                            ZuHeTotal += ZuHeNum;
                                                        }
                                                        for (int s = 0; s < ProductList.Count; s++)
                                                        {
                                                            var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                            //商品关联主表信息
                                                            //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                                            if (ProductList[s].TDateTimeStart != null && ProductList[s].TDateTimeEnd != null && ModifiedDate != null && ModifiedDate != "" && ModifiedDate != "0001-01-01 00:00:00")
                                                            {
                                                                if (Convert.ToDateTime(ModifiedDate) >= ProductList[s].TDateTimeStart && Convert.ToDateTime(ModifiedDate) <= ProductList[s].TDateTimeEnd)
                                                                {
                                                                    //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                                    XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                                    XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                                    XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * num * ProductList[s].count;//出厂价*数量
                                                                    XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                                    XMOrderInfoProduct.TCostprice = ProductList[s].TCostprice;
                                                                    if (!string.IsNullOrEmpty(ProductList[s].TManufacturersCode))
                                                                    {
                                                                        XMOrderInfoProduct.TManufacturersCode = ProductList[s].TManufacturersCode;//临时厂家编码
                                                                    }
                                                                    else
                                                                    {
                                                                        XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                                    XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                                    XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                                    XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * num * ProductList[s].count;//出厂价*数量
                                                                    XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                                    XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                                    XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                                                XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                                XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                                XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * num * ProductList[s].count;//出厂价*数量
                                                                XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                                XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                                XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                            }

                                                            XMOrderInfoProduct.ProductNum = Convert.ToInt32(num) * ProductList[s].count;//数量
                                                            if (ModifiedDate != null && ModifiedDate != "")
                                                            {
                                                                XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间
                                                            }
                                                            //XMOrderInfoProduct.SalesPrice = Decimal.Parse(unitprice);//销售价
                                                            //if (s < ProductList.Count - 1)
                                                            //{
                                                            //    XMOrderInfoProduct.SalesPrice = Math.Round(decimal.Parse(((ProductList[s].Costprice * ProductList[s].count * num / a) * decimal.Parse(unitprice)).ToString()), 2);//销售价
                                                            //    tj = tj + XMOrderInfoProduct.SalesPrice;
                                                            //}
                                                            //else
                                                            //{
                                                            //    XMOrderInfoProduct.SalesPrice = decimal.Parse(unitprice) - tj;//销售价
                                                            //}
                                                            decimal PartPayPrice = 0;
                                                            if (k == response.orderDetail.Count - 1)
                                                            {
                                                                PartPayPrice = (decimal)xmorderInfo.PayPrice - payPriceK;
                                                            }
                                                            else
                                                            {
                                                                PartPayPrice = Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(productinfo.unitPrice) * decimal.Parse(productinfo.saleNum) / priceTotal, 2);
                                                                //payPriceK += PartPayPrice;
                                                            }
                                                            if (IsZuHe)
                                                            {
                                                                if (s == ProductList.Count - 1)
                                                                {
                                                                    XMOrderInfoProduct.SalesPrice = PartPayPrice - payPriceI;
                                                                    payPriceK += PartPayPrice;
                                                                }
                                                                else
                                                                {
                                                                    if (ZuHeTotal == 0) //产品销售价没有维护，是0时导致分母为0，计算出错
                                                                    {
                                                                        XMOrderInfoProduct.SalesPrice = 0;
                                                                    }
                                                                    else
                                                                    {
                                                                        XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice * (decimal)ProductList[s].Saleprice * decimal.Parse(ProductList[s].count.ToString()) / ZuHeTotal, 2);//销售价
                                                                    }
                                                                    payPriceI += (decimal)XMOrderInfoProduct.SalesPrice;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice, 2);//销售价
                                                                payPriceK += PartPayPrice;
                                                            }

                                                            XMOrderInfoProduct.IsEnable = false;//是否删除
                                                            XMOrderInfoProduct.IsAudit = false;//是否审核
                                                            XMOrderInfoProduct.IsExpedited = false;//是否加急

                                                            XMOrderInfoProduct.ISArrivedLibrary = false;

                                                            if (scProductName == "")
                                                            {
                                                                scProductName = XMOrderInfoProduct.ProductName;
                                                                //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                            }

                                                            if (HozestERPContext.Current.User != null)
                                                            {
                                                                XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                                XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                            }
                                                            else
                                                            {
                                                                string UserName = "admin";
                                                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                                if (customer.Count > 0)
                                                                {
                                                                    XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                                    XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                                }
                                                            }

                                                            XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                            XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                                            xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                        XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                                        XMOrderInfoProduct.Specifications = "";//尺寸
                                                        XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                                        XMOrderInfoProduct.ProductName = "无产品";

                                                        xmorderInfo.IsAbnormal = true;//是否异常

                                                        XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                                        if (ModifiedDate != null && ModifiedDate != "")
                                                        {
                                                            XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间
                                                        }
                                                        XMOrderInfoProduct.SalesPrice = Decimal.Parse(unitprice) * Convert.ToInt32(num);//销售价

                                                        XMOrderInfoProduct.IsEnable = false;//是否删除
                                                        XMOrderInfoProduct.IsAudit = false;//是否审核
                                                        XMOrderInfoProduct.IsExpedited = false;//是否加急

                                                        XMOrderInfoProduct.ISArrivedLibrary = false;

                                                        if (scProductName == "")
                                                        {
                                                            scProductName = XMOrderInfoProduct.ProductName;
                                                            //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                        }

                                                        if (HozestERPContext.Current.User != null)
                                                        {
                                                            XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                            XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                        }
                                                        else
                                                        {
                                                            string UserName = "admin";
                                                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                            if (customer.Count > 0)
                                                            {
                                                                XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                                XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                            }
                                                        }

                                                        XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                        XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                                        xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                                    }
                                                }
                                                //else
                                                //{
                                                //    //没有商品编码
                                                //    XMOrderInfoProduct.PlatformMerchantCode = ""; //料号（商品编码）
                                                //    XMOrderInfoProduct.Specifications = "";//尺寸
                                                //    XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                                //    XMOrderInfoProduct.ProductName = "无产品";
                                                //    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                                //    if (ModifiedDate != null && ModifiedDate != "")
                                                //    {
                                                //        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间
                                                //    }
                                                //    XMOrderInfoProduct.SalesPrice = Decimal.Parse(unitprice);//单价/销售价

                                                //    XMOrderInfoProduct.IsEnable = false;//是否删除
                                                //    XMOrderInfoProduct.IsAudit = false;//是否审核
                                                //    XMOrderInfoProduct.IsExpedited = false;//是否加急

                                                //    XMOrderInfoProduct.ISArrivedLibrary = false;

                                                //    if (HozestERPContext.Current.User != null)
                                                //    {
                                                //        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                //        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                //    }
                                                //    else
                                                //    {
                                                //        string UserName = "admin";
                                                //        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                //        if (customer.Count > 0)
                                                //        {
                                                //            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                //            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                //        }
                                                //    }

                                                //    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                //    XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                                //    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);

                                                //    xmorderInfo.IsAbnormal = true;//是否异常
                                                //}
                                            }
                                        }

                                        scSalePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额
                                        //判断是否刷单
                                        orderstatus = "10,20,21,30";
                                        if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                                        {
                                            xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), orderListInfo.orderCode, xmorderInfo.Remark, response.sellerOrdRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售金额：订单支付金额
                                        }
                                        if (response.invoiceType != null && response.invoiceType != "")//发票类型 -- 增值还是普通（01增值 02普通）
                                        {
                                            xmorderInfo.IsInvoiced = true;
                                            xmorderInfo.InvoiceNo = response.vatTaxpayerNumber;//发票号码
                                            xmorderInfo.InvoiceHead = response.invoiceHead;//发票抬头
                                            //xmorderInfo.InvoiceNo = response.invoice;//发票内容
                                            xmorderInfo.InvoicePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收款(价格*数量+运费-优惠券金额-优惠单金额)
                                        }
                                        //xmorderInfo.DistributeMethod = productInfo.disType;//配送方式({10001:普通快递、20001:EMS、30001:供应商直送、40001:自提、30002:店中店商家直送} )
                                        xmorderInfo.DistributePrice = transportprice;//运费（苏宁易购）
                                        xmorderInfo.ProductPrice = orderprice;//产品总额
                                        xmorderInfo.OrderPrice = orderprice + transportprice;//订单金额
                                        //Decimal? promotionprice = 0;//优惠金额
                                        //promotionprice = xmorderInfo.ProductPrice + xmorderInfo.DistributePrice - xmorderInfo.OrderPrice;
                                        xmorderInfo.OrderPromotion = vouchertotalMoney;//订单优惠金额
                                        //Decimal? taxes = 0;//折扣
                                        //taxes = (xmorderInfo.OrderPrice - promotionprice) / xmorderInfo.OrderPrice;
                                        //xmorderInfo.Taxes = taxes;
                                        xmorderInfo.ReceivablePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//应收金额
                                        //xmorderInfo.PayPrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额

                                        #region  保存数据

                                        IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
                                        InsertCount++;

                                        //新建发票
                                        if (xmorderInfo.IsInvoiced != null && xmorderInfo.IsInvoiced == true)
                                        {
                                            ToAddXMInvoiceInfo(xmorderInfo,719,"","","","","");
                                        }

                                        #endregion
                                    }
                                    #endregion

                                    #region 修改

                                    else
                                    {
                                        string Remarks = xmorderInfo.Remark;
                                        string CustomerServiceRemark = xmorderInfo.CustomerServiceRemark;
                                        //string Modified = orderinfo.OrderUpdateTime.ToString();
                                        string Memo = CustomerServiceRemark;//SellerMemo.Substring(SellerMemo.LastIndexOf("'") + 1).ToLower();
                                        string RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;
                                        string StatusValue = xmorderInfo.OrderStatus.Trim();
                                        decimal FactoryPrice = 0;

                                        if (Memo != RemarksValue || StatusValue != response.orderTotalStatus.ToString().Trim())
                                        {
                                            #region 记录操作

                                            int UpsatorID = 0;
                                            if (HozestERPContext.Current.User != null)
                                            {
                                                UpsatorID = HozestERPContext.Current.User.CustomerID;
                                            }
                                            else
                                            {
                                                string UserName = "admin";
                                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                if (customer.Count > 0)
                                                {
                                                    UpsatorID = customer[0].CustomerID;
                                                }
                                            }

                                            //if (Modified != null && Modified != "")
                                            //{

                                            //    if (xmorderInfo.OrderInfoModified != Convert.ToDateTime(Modified))
                                            //    {
                                            //        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                            //        record.OrderInfoId = xmorderInfo.ID;
                                            //        record.PropertyName = "OrderInfoModified";
                                            //        record.OldValue = System.Convert.ToString(xmorderInfo.OrderInfoModified);
                                            //        record.NewValue = Modified.ToString().Trim();
                                            //        record.UpdatorID = UpsatorID;
                                            //        record.UpdateTime = DateTime.Now;
                                            //        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record);//base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                                            //    }
                                            //}

                                            if (Remarks != null && Remarks != "")
                                            {
                                                if (xmorderInfo.Remark != Remarks)
                                                {
                                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                                    record.OrderInfoId = xmorderInfo.ID;
                                                    record.PropertyName = "Remarks";
                                                    record.OldValue = xmorderInfo.Remark;
                                                    record.NewValue = Remarks;
                                                    record.UpdatorID = UpsatorID;
                                                    record.UpdateTime = DateTime.Now;
                                                    IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                                }
                                            }
                                            if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                            {
                                                if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
                                                {
                                                    var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, CustomerServiceRemark);
                                                    if (RecordExist == null || RecordExist.Count == 0)
                                                    {
                                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                                        record.OrderInfoId = xmorderInfo.ID;
                                                        record.PropertyName = "CustomerServiceRemark";
                                                        record.OldValue = xmorderInfo.CustomerServiceRemark;
                                                        record.NewValue = CustomerServiceRemark;
                                                        record.UpdatorID = UpsatorID;
                                                        record.UpdateTime = DateTime.Now;
                                                        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                                    }
                                                }
                                            }
                                            if (xmorderInfo.OrderStatus != response.orderTotalStatus.ToString())
                                            {
                                                XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                                record.OrderInfoId = xmorderInfo.ID;
                                                record.PropertyName = "OrderStatus";
                                                record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                                                record.NewValue = System.Convert.ToString(response.orderTotalStatus);
                                                record.UpdatorID = UpsatorID;
                                                record.UpdateTime = DateTime.Now;
                                                IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                            }

                                            #endregion
                                        }
                                        //xmorderInfo.OrderInfoModified = DateTime.Parse(orderinfo.OrderUpdateTime);//更新时间
                                        xmorderInfo.OrderStatus = response.orderTotalStatus;//订单状态 10待发货、20已发货、21部分发货、30交易成功、40交易关闭

                                        if (response.orderTotalStatus == "10")
                                        {
                                            if (xmorderInfo.PayDate == null)
                                            {
                                                xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                            }
                                        }
                                        if (response.orderTotalStatus == "20")
                                        {
                                            if (xmorderInfo.PayDate == null)
                                            {
                                                xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                            }
                                            if (xmorderInfo.DeliveryTime == null)
                                            {
                                                xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                            }
                                        }

                                        if (response.orderTotalStatus == "30")
                                        {
                                            if (xmorderInfo.PayDate == null)
                                            {
                                                xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                            }
                                            if (xmorderInfo.DeliveryTime == null)
                                            {
                                                xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                            }
                                            if (xmorderInfo.CompletionTime == null)
                                            {
                                                xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                                AutoSingleRow(response.orderCode);
                                            }
                                        }
                                        xmorderInfo.WantID = response.userName;//用户id
                                        //xmorderInfo.FullName = response.customerName;//收货人
                                        //xmorderInfo.Province = response.provinceName;//省
                                        //xmorderInfo.City = response.cityName;//市
                                        //xmorderInfo.County = response.districtName;//区县
                                        //xmorderInfo.DeliveryAddress = response.customerAddress;//收货地址
                                        //xmorderInfo.Mobile = response.mobNum;//手机
                                        //xmorderInfo.Tel = response.mobNum;//电话
                                        xmorderInfo.SourceType = "同步";//数据来源
                                        xmorderInfo.FinancialAudit = true;//财务审核
                                        xmorderInfo.IsOurOrder = true;//是我们的订单

                                        //更改收货地址
                                        //if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
                                        //{
                                        //    string csr = CustomerServiceRemark + "$";
                                        //    string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                                        //    string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");

                                        //    xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                                        //}

                                        xmorderInfo.Remark = response.buyerOrdRemark;//买家备注
                                        //xmorderInfo.CustomerServiceRemark = response.sellerOrdRemark;//卖家备注(修改)
                                        //xmorderInfo.PayPrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收金额

                                        if (HozestERPContext.Current.User != null)
                                        {
                                            xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                                        }
                                        else
                                        {
                                            string UserName = "admin";
                                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                            if (customer.Count > 0)
                                            {
                                                xmorderInfo.UpdateID = customer[0].CustomerID;
                                            }
                                        }

                                        xmorderInfo.UpdateDate = DateTime.Now;

                                        decimal orderprice = 0;//订单金额
                                        decimal transportprice = 0;//运费
                                        decimal coupontotalMoney = 0;//优惠卷金额
                                        decimal vouchertotalMoney = 0;//优惠单金额

                                        string scProductName = "";//商品名称（刷单）
                                        //decimal scSalePrice = 0;//销售价(刷单)
                                        string ModifiedDate = xmorderInfo.OrderInfoCreateDate.ToString();

                                        #region 注释的原获取订单详情
                                        //for (int k = 0; k < response.orderDetail.Count; k++)
                                        //{
                                        //    var productinfo = response.orderDetail[k];

                                        //    orderprice += (decimal.Parse(productinfo.unitPrice) * decimal.Parse(productinfo.saleNum));//商品单价*数量
                                        //    transportprice += decimal.Parse(productinfo.transportFee);//运费
                                        //    coupontotalMoney += decimal.Parse(productinfo.coupontotalMoney);//优惠卷金额
                                        //    decimal changeNum = 0;
                                        //    if (decimal.TryParse(productinfo.vouchertotalMoney, out changeNum))
                                        //    {
                                        //        vouchertotalMoney += decimal.Parse(productinfo.vouchertotalMoney);//优惠单金额
                                        //    }
                                        //    else
                                        //    {
                                        //        vouchertotalMoney = 0;
                                        //    }

                                        //    //获取产品详情
                                        //    //suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest requestProduct = new suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest();
                                        //    //requestProduct.productCode = productinfo.productCode;//产品编号
                                        //    ////开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
                                        //    ////SuningLogger.IsLogDebug = true;
                                        //    //suning::suning_api_sdk.ISuningClient clientProduct = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
                                        //    //suning::suning_api_sdk.BizResponse.CustomItemResponse.ItemGetResponse responseProduct = clientProduct.Execute(requestProduct);

                                        //    if (productinfo != null)
                                        //    {
                                        //        string OuterSkuId = productinfo.productCode;//商品编码
                                        //        int? num = int.Parse(productinfo.saleNum.Substring(0, productinfo.saleNum.IndexOf(".")));//数量
                                        //        string unitprice = productinfo.unitPrice == null ? "0" : productinfo.unitPrice.ToString();//单价
                                        //        if (OuterSkuId != "" && OuterSkuId != null)
                                        //        {
                                        //            //商家编码查询从表信息。
                                        //            var ProductList = this.GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);

                                        //            //var XMOrderInfoProduct = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).SingleOrDefault();

                                        //            //if (XMOrderInfoProduct == null)
                                        //            //{
                                        //            //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                        //            //}
                                        //            var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

                                        //            XMOrderInfoProductDetails XMOrderInfoProduct = null;

                                        //            if (OrderyReportProductList.Count == 0)
                                        //            {
                                        //                XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                        //            }
                                        //            else
                                        //            {

                                        //                XMOrderInfoProduct = OrderyReportProductList[0];
                                        //            }
                                        //            if (ProductList.Count > 0)
                                        //            {
                                        //                //商品关联主表信息
                                        //                //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                        //                if (ProductList[0].TDateTimeStart != null && ProductList[0].TDateTimeEnd != null && ModifiedDate != null && ModifiedDate != "" && ModifiedDate != "0001-01-01 00:00:00")
                                        //                {
                                        //                    if (Convert.ToDateTime(ModifiedDate) >= ProductList[0].TDateTimeStart && Convert.ToDateTime(ModifiedDate) <= ProductList[0].TDateTimeEnd)
                                        //                    {
                                        //                        XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                        //                        XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
                                        //                        XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                                        //                        XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                        //                        XMOrderInfoProduct.TCostprice = ProductList[0].TCostprice;
                                        //                    }
                                        //                    else
                                        //                    {
                                        //                        XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                        //                        XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
                                        //                        XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                                        //                        XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                        //                        XMOrderInfoProduct.TCostprice = ProductList[0].Costprice;
                                        //                    }
                                        //                }
                                        //                else
                                        //                {
                                        //                    XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
                                        //                    XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
                                        //                    XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
                                        //                    XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
                                        //                    XMOrderInfoProduct.TCostprice = ProductList[0].Costprice;
                                        //                }
                                        //            }
                                        //            else
                                        //            {
                                        //                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
                                        //                XMOrderInfoProduct.Specifications = "";//尺寸
                                        //                XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                        //                XMOrderInfoProduct.ProductName = "无产品";
                                        //            }

                                        //            XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
                                        //            if (ModifiedDate != null && ModifiedDate != "")
                                        //            {
                                        //                XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

                                        //            }
                                        //            XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.unitPrice.ToString());//单价/销售价

                                        //            if (scProductName == "")
                                        //            {
                                        //                scProductName = XMOrderInfoProduct.ProductName;
                                        //                //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                        //            }

                                        //            if (HozestERPContext.Current.User != null)
                                        //            {
                                        //                XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                        //            }
                                        //            else
                                        //            {
                                        //                string UserName = "admin";
                                        //                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                        //                if (customer.Count > 0)
                                        //                {
                                        //                    XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                        //                }
                                        //            }

                                        //            XMOrderInfoProduct.UpdateDate = DateTime.Now;

                                        //        }
                                        //    }
                                        //}
                                        #endregion

                                        scSalePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额
                                        //判断是否刷单
                                        orderstatus = "10,20,21,30";
                                        if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
                                        {
                                            xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), orderListInfo.orderCode, xmorderInfo.Remark, response.sellerOrdRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售金额：订单支付金额
                                        }

                                        #region  保存数据

                                        IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
                                        UpdateCount++;

                                        #endregion
                                    }

                                    #endregion
                                }
                            }
                        }
                    }
                }
            }
        }

        ///// <summary>
        ///// 同步国美数据  根据订单修改时间批量查询订单信息 
        ///// </summary>
        ///// <param name="createDateStart"></param>
        ///// <param name="createDateEnd"></param>
        ///// <param name="Status"></param>
        ///// <param name="InsertCount"></param>
        ///// <param name="UpdateCount"></param>
        ///// <param name="xMorderInfoApp"></param>
        //public void GuomeiUpdateData(string createDateStart, string createDateEnd, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        //{
        //    int ICount = 0;
        //    int UCount = 0;
        //    GuoMeiUpdateDataList(createDateStart, createDateEnd, ref ICount, ref UCount, xMorderInfoApp);
        //    InsertCount += ICount;
        //    UpdateCount += UCount;
        //}

        ///// <summary>
        ///// 国美 根据订单修改时间批量查询订单信息 
        ///// </summary>
        ///// <param name="paydatestart"></param>
        ///// <param name="paydateend"></param>
        ///// <param name="InsertCount"></param>
        ///// <param name="UpdateCount"></param>
        ///// <param name="xMorderInfoApp"></param>
        //private void GuoMeiUpdateDataList(string paydatestart, string paydateend, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        //{
        //    List<string> orderStatus = new List<string>();
        //    var CodeList = IoC.Resolve<ICodeService>().GetCodeListInfoByCodeTypeID(220);
        //    if (CodeList.Count > 0)
        //    {
        //        foreach (CodeList info in CodeList)
        //        {
        //            orderStatus.Add(info.CodeNO);
        //        }
        //    }

        //    //循环 订单状态 （注：订单状态只能单个传）
        //    for (int i = 0; i < orderStatus.Count; i++)
        //    {
        //        Coo8Client cc = new DefaultCoo8Client(url, venderId, appKey);
        //        OrdersGetRequest ordersRequest = new OrdersGetRequest();
        //        ordersRequest.setEndDate(new Date());
        //        ordersRequest.setStartDate(DateUtils.dateFormatToDate("2011-10-25 09:32:30", "yyyy-MM-dd HH:mm:ss"));
        //        ordersRequest.setStatus("5");
        //        ordersRequest.setPageSize(100);
        //        ordersRequest.setPageNo(1);
        //        ordersRequest.setPayStatus("0");
        //        ordersRequest.setStartPayDate(DateUtils.dateFormatToDate("2011-08-18 02:00:00", "yyyy-MM-dd HH:mm:ss"));
        //        ordersRequest.setEndPayDate(new DateTime());
        //        OrdersGetResponse getResponse = cc.execute(ordersRequest);




        //        if (responseList != null && responseList.orderQuery != null)
        //        {
        //            if (responseList.orderQuery.Count > 0)
        //            {
        //                for (int o = 0; o < responseList.orderQuery.Count; o++)
        //                {
        //                    var orderListInfo = responseList.orderQuery[o];

        //                    if (xMorderInfoApp != null && orderListInfo.orderCode != "")
        //                    {
        //                        //根据订单号查询订单信息
        //                        suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrderGetRequest request = new suning::suning_api_sdk.BizRequest.CustomTransactionRequest.OrderGetRequest();
        //                        request.orderCode = orderListInfo.orderCode;
        //                        //开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
        //                        //SuningLogger.IsLogDebug = true;
        //                        suning::suning_api_sdk.ISuningClient client = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
        //                        suning::suning_api_sdk.BizResponse.CustomTransactionResponse.OrderGetResponse response = client.Execute(request);

        //                        if (response != null && response.orderDetail.Count > 0)
        //                        {
        //                            //订单编号查询订单
        //                            var xmorderInfo = this.GetXMOrderInfoByOrderCode(orderListInfo.orderCode);
        //                            //获取的订单商品
        //                            var productInfo = response.orderDetail.FirstOrDefault();

        //                            decimal scSalePrice = 0;//销售价(刷单)


        //                            #region 新增
        //                            if (xmorderInfo == null)
        //                            {
        //                                xmorderInfo = new XMOrderInfo();
        //                                xmorderInfo.NickID = xMorderInfoApp.NickId;//城市爱情
        //                                xmorderInfo.PlatformTypeId = xMorderInfoApp.PlatformTypeId;//苏宁易购
        //                                xmorderInfo.OrderInfoCreateDate = DateTime.Parse(response.orderSaleTime);//创单时间
        //                                xmorderInfo.OrderCode = response.orderCode;//订单编号
        //                                xmorderInfo.OrderStatus = response.orderTotalStatus;//订单状态 10待发货、20已发货、21部分发货、30交易成功、40交易关闭

        //                                if (response.orderTotalStatus == "10")
        //                                {

        //                                    if (xmorderInfo.PayDate == null)
        //                                    {
        //                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
        //                                    }
        //                                }
        //                                if (response.orderTotalStatus == "20")
        //                                {
        //                                    if (xmorderInfo.PayDate == null)
        //                                    {
        //                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
        //                                    }
        //                                    if (xmorderInfo.DeliveryTime == null)
        //                                    {
        //                                        xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
        //                                    }
        //                                }

        //                                if (response.orderTotalStatus == "30")
        //                                {
        //                                    if (xmorderInfo.PayDate == null)
        //                                    {
        //                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
        //                                    }
        //                                    if (xmorderInfo.DeliveryTime == null)
        //                                    {
        //                                        xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
        //                                    }
        //                                    if (xmorderInfo.CompletionTime == null)
        //                                    {
        //                                        xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
        //                                    }
        //                                }



        //                                xmorderInfo.WantID = response.userName;//用户id
        //                                xmorderInfo.FullName = response.customerName;//收货人
        //                                xmorderInfo.Province = response.provinceName;//省
        //                                xmorderInfo.City = response.cityName;//市
        //                                xmorderInfo.County = response.districtName;//区县
        //                                xmorderInfo.DeliveryAddress = response.customerAddress;//收货地址
        //                                xmorderInfo.Mobile = response.mobNum;//手机
        //                                xmorderInfo.Tel = response.mobNum;//电话
        //                                xmorderInfo.SourceType = "同步";//数据来源
        //                                xmorderInfo.Remark = response.buyerOrdRemark;//买家备注
        //                                xmorderInfo.CustomerServiceRemark = response.sellerOrdRemark;//卖家备注(新增)



        //                                string CustomerServiceRemark = response.sellerOrdRemark;

        //                                #region 赠品、返现 苏宁易购状态为完成才能新增赠品返现
        //                                //    response.orderTotalStatus.ToString() == "10" || response.orderTotalStatus.ToString() == "20"
        //                                //|| response.orderTotalStatus.ToString() == "21" ||
        //                                if (response.orderTotalStatus.ToString() == "30")//10待发货
        //                                {
        //                                    if (response.orderSaleTime.ToString().Trim() != null && response.orderSaleTime.ToString().Trim() != "")
        //                                    {
        //                                        if (DateTime.Parse(response.orderSaleTime.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
        //                                        {
        //                                            if (CustomerServiceRemark != null && CustomerServiceRemark != "")
        //                                            {
        //                                                string BuyerName = response.customerName;//收货人名称 
        //                                                string WantNo = response.userName;//旺旺号 
        //                                                string OrderCode = response.orderCode;//订单号 
        //                                                string paramMessage = string.Empty;

        //                                                if (CustomerServiceRemark.IndexOf("/赠品") > -1 || CustomerServiceRemark.IndexOf("/返现") > -1)
        //                                                {
        //                                                    #region 赠品
        //                                                    if (CustomerServiceRemark.IndexOf("/赠品") > -1)
        //                                                    {
        //                                                        //返回赠品条数
        //                                                        int PremiumsInst = XMPremiumsInst(CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage);

        //                                                    }
        //                                                    #endregion

        //                                                    #region 返现
        //                                                    if (CustomerServiceRemark.IndexOf("/返现") > -1)
        //                                                    {

        //                                                        //返回返现条数
        //                                                        int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

        //                                                    }

        //                                                    #endregion
        //                                                }
        //                                            }
        //                                        }
        //                                    }

        //                                }
        //                                #endregion
        //                                xmorderInfo.IsEnable = false;//是否删除
        //                                xmorderInfo.IsCashBack = false;//是否返现
        //                                xmorderInfo.IsSentGifts = false;//是否已发赠品 
        //                                xmorderInfo.IsEvaluate = false;//是否赔付

        //                                if (HozestERPContext.Current.User != null)
        //                                {
        //                                    xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
        //                                    xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;

        //                                }
        //                                else
        //                                {
        //                                    string UserName = "admin";
        //                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

        //                                    if (customer.Count > 0)
        //                                    {
        //                                        xmorderInfo.CreateID = customer[0].CustomerID;
        //                                        xmorderInfo.UpdateID = customer[0].CustomerID;
        //                                    }
        //                                }

        //                                xmorderInfo.CreateDate = DateTime.Now;
        //                                xmorderInfo.UpdateDate = DateTime.Now;

        //                                decimal orderprice = 0;//订单金额
        //                                decimal transportprice = 0;//运费
        //                                decimal coupontotalMoney = 0;//优惠卷金额
        //                                decimal vouchertotalMoney = 0;//优惠单金额


        //                                string scProductName = "";//商品名称（刷单） 

        //                                string ModifiedDate = xmorderInfo.OrderInfoCreateDate.ToString();
        //                                xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();//初始化
        //                                for (int k = 0; k < response.orderDetail.Count; k++)
        //                                {
        //                                    var productinfo = response.orderDetail[k];

        //                                    orderprice += (decimal.Parse(productinfo.unitPrice) * decimal.Parse(productinfo.saleNum));//商品单价*数量
        //                                    transportprice += decimal.Parse(productinfo.transportFee);//运费
        //                                    coupontotalMoney += decimal.Parse(productinfo.coupontotalMoney);//优惠卷金额
        //                                    decimal changeNum = 0;
        //                                    if (decimal.TryParse(productinfo.vouchertotalMoney, out changeNum))
        //                                    {
        //                                        vouchertotalMoney += decimal.Parse(productinfo.vouchertotalMoney);//优惠单金额
        //                                    }
        //                                    else
        //                                    {
        //                                        vouchertotalMoney = 0;
        //                                    }

        //                                    ////获取产品详情
        //                                    //suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest requestProduct = new suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest();
        //                                    //requestProduct.productCode = productinfo.itemCode;//产品编号
        //                                    ////开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
        //                                    ////SuningLogger.IsLogDebug = true;
        //                                    //suning::suning_api_sdk.ISuningClient clientProduct = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
        //                                    //suning::suning_api_sdk.BizResponse.CustomItemResponse.ItemGetResponse responseProduct = clientProduct.Execute(requestProduct);
        //                                    //产品详情
        //                                    if (productinfo != null)
        //                                    {
        //                                        string OuterSkuId = productinfo.productCode;//商品编码
        //                                        int? num = int.Parse(productinfo.saleNum.Substring(0, productinfo.saleNum.IndexOf(".")));//数量
        //                                        string unitprice = productinfo.unitPrice == null ? "0" : productinfo.unitPrice.ToString();//单价
        //                                        //XMOrderInfoProductDetails XMOrderInfoProduct = new XMOrderInfoProductDetails();
        //                                        if (OuterSkuId != "" && OuterSkuId != null)
        //                                        {
        //                                            //商家编码查询从表信息。
        //                                            var ProductList = this.GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);
        //                                            //2015-7-28新增
        //                                            decimal a = 0;
        //                                            decimal? tj = 0;
        //                                            if (ProductList.Count == 0)
        //                                            {
        //                                                ProductList = GetXMProductListByzuheCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
        //                                                a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
        //                                            }

        //                                            //var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

        //                                            //XMOrderInfoProductDetails XMOrderInfoProduct = null;

        //                                            //if (OrderyReportProductList.Count == 0)
        //                                            //{
        //                                            //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
        //                                            //}
        //                                            //else
        //                                            //{

        //                                            //    XMOrderInfoProduct = OrderyReportProductList[0];
        //                                            //}
        //                                            if (ProductList.Count > 0)
        //                                            {
        //                                                for (int s = 0; s < ProductList.Count; s++)
        //                                                {
        //                                                    var XMOrderInfoProduct = new XMOrderInfoProductDetails();
        //                                                    //商品关联主表信息
        //                                                    //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
        //                                                    if (ProductList[s].TDateTimeStart != null && ProductList[s].TDateTimeEnd != null && ModifiedDate != null && ModifiedDate != "" && ModifiedDate != "0001-01-01 00:00:00")
        //                                                    {
        //                                                        if (Convert.ToDateTime(ModifiedDate) >= ProductList[s].TDateTimeStart && Convert.ToDateTime(ModifiedDate) <= ProductList[s].TDateTimeEnd)
        //                                                        {
        //                                                            //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
        //                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
        //                                                            XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
        //                                                            XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * num * ProductList[s].count;//出厂价*数量
        //                                                            XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
        //                                                            XMOrderInfoProduct.TCostprice = ProductList[s].TCostprice;
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
        //                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
        //                                                            XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
        //                                                            XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * num * ProductList[s].count;//出厂价*数量
        //                                                            XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
        //                                                            XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
        //                                                        }
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        //XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
        //                                                        XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
        //                                                        XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
        //                                                        XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * num * ProductList[s].count;//出厂价*数量
        //                                                        XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
        //                                                        XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
        //                                                    }

        //                                                    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num) * ProductList[s].count;//数量
        //                                                    if (ModifiedDate != null && ModifiedDate != "")
        //                                                    {
        //                                                        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间
        //                                                    }
        //                                                    //XMOrderInfoProduct.SalesPrice = Decimal.Parse(unitprice);//销售价
        //                                                    if (s < ProductList.Count - 1)
        //                                                    {
        //                                                        XMOrderInfoProduct.SalesPrice = Math.Round(decimal.Parse(((ProductList[s].Costprice * ProductList[s].count * num / a) * decimal.Parse(unitprice)).ToString()), 2);//销售价
        //                                                        tj = tj + XMOrderInfoProduct.SalesPrice;
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        XMOrderInfoProduct.SalesPrice = decimal.Parse(unitprice) - tj;//销售价
        //                                                    }
        //                                                    XMOrderInfoProduct.IsEnable = false;//是否删除
        //                                                    XMOrderInfoProduct.IsAudit = false;//是否审核
        //                                                    XMOrderInfoProduct.IsExpedited = false;//是否加急

        //                                                    XMOrderInfoProduct.ISArrivedLibrary = false;

        //                                                    if (scProductName == "")
        //                                                    {
        //                                                        scProductName = XMOrderInfoProduct.ProductName;
        //                                                        //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
        //                                                    }

        //                                                    if (HozestERPContext.Current.User != null)
        //                                                    {
        //                                                        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
        //                                                        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        string UserName = "admin";
        //                                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

        //                                                        if (customer.Count > 0)
        //                                                        {
        //                                                            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
        //                                                            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
        //                                                        }
        //                                                    }

        //                                                    XMOrderInfoProduct.CreateDate = DateTime.Now;
        //                                                    XMOrderInfoProduct.UpdateDate = DateTime.Now;

        //                                                    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                var XMOrderInfoProduct = new XMOrderInfoProductDetails();
        //                                                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
        //                                                XMOrderInfoProduct.Specifications = "";//尺寸
        //                                                XMOrderInfoProduct.FactoryPrice = 0;//出厂价
        //                                                XMOrderInfoProduct.ProductName = "无产品";

        //                                                xmorderInfo.IsAbnormal = true;//是否异常

        //                                                XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
        //                                                if (ModifiedDate != null && ModifiedDate != "")
        //                                                {
        //                                                    XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间
        //                                                }
        //                                                XMOrderInfoProduct.SalesPrice = Decimal.Parse(unitprice) * Convert.ToInt32(num);//销售价

        //                                                XMOrderInfoProduct.IsEnable = false;//是否删除
        //                                                XMOrderInfoProduct.IsAudit = false;//是否审核
        //                                                XMOrderInfoProduct.IsExpedited = false;//是否加急

        //                                                XMOrderInfoProduct.ISArrivedLibrary = false;

        //                                                if (scProductName == "")
        //                                                {
        //                                                    scProductName = XMOrderInfoProduct.ProductName;
        //                                                    //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
        //                                                }

        //                                                if (HozestERPContext.Current.User != null)
        //                                                {
        //                                                    XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
        //                                                    XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

        //                                                }
        //                                                else
        //                                                {
        //                                                    string UserName = "admin";
        //                                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

        //                                                    if (customer.Count > 0)
        //                                                    {
        //                                                        XMOrderInfoProduct.CreateID = customer[0].CustomerID;
        //                                                        XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
        //                                                    }
        //                                                }

        //                                                XMOrderInfoProduct.CreateDate = DateTime.Now;
        //                                                XMOrderInfoProduct.UpdateDate = DateTime.Now;

        //                                                xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
        //                                            }
        //                                        }
        //                                        //else
        //                                        //{
        //                                        //    //没有商品编码
        //                                        //    XMOrderInfoProduct.PlatformMerchantCode = ""; //料号（商品编码）
        //                                        //    XMOrderInfoProduct.Specifications = "";//尺寸
        //                                        //    XMOrderInfoProduct.FactoryPrice = 0;//出厂价
        //                                        //    XMOrderInfoProduct.ProductName = "无产品";
        //                                        //    XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
        //                                        //    if (ModifiedDate != null && ModifiedDate != "")
        //                                        //    {
        //                                        //        XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间
        //                                        //    }
        //                                        //    XMOrderInfoProduct.SalesPrice = Decimal.Parse(unitprice);//单价/销售价

        //                                        //    XMOrderInfoProduct.IsEnable = false;//是否删除
        //                                        //    XMOrderInfoProduct.IsAudit = false;//是否审核
        //                                        //    XMOrderInfoProduct.IsExpedited = false;//是否加急

        //                                        //    XMOrderInfoProduct.ISArrivedLibrary = false;

        //                                        //    if (HozestERPContext.Current.User != null)
        //                                        //    {
        //                                        //        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
        //                                        //        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

        //                                        //    }
        //                                        //    else
        //                                        //    {
        //                                        //        string UserName = "admin";
        //                                        //        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

        //                                        //        if (customer.Count > 0)
        //                                        //        {
        //                                        //            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
        //                                        //            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
        //                                        //        }
        //                                        //    }

        //                                        //    XMOrderInfoProduct.CreateDate = DateTime.Now;
        //                                        //    XMOrderInfoProduct.UpdateDate = DateTime.Now;

        //                                        //    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);

        //                                        //    xmorderInfo.IsAbnormal = true;//是否异常
        //                                        //}
        //                                    }
        //                                }

        //                                scSalePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额
        //                                //判断是否刷单
        //                                orderstatus = "10,20,21,30";
        //                                if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
        //                                {
        //                                    xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), orderListInfo.orderCode, xmorderInfo.Remark, response.sellerOrdRemark, xmorderInfo.WantID, scProductName, scSalePrice);//销售金额：订单支付金额
        //                                }
        //                                if (response.invoiceType != null && response.invoiceType != "")//发票类型 -- 增值还是普通（01增值 02普通）
        //                                {
        //                                    xmorderInfo.IsInvoiced = true;
        //                                    xmorderInfo.InvoiceNo = response.vatTaxpayerNumber;//发票号码
        //                                    //xmorderInfo.InvoiceHead = orderinfo.InvoiceTitle;//发票抬头
        //                                    xmorderInfo.InvoiceNo = response.invoice;//发票内容
        //                                    xmorderInfo.InvoicePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收款(价格*数量+运费-优惠券金额-优惠单金额)
        //                                }
        //                                //xmorderInfo.DistributeMethod = productInfo.disType;//配送方式({10001:普通快递、20001:EMS、30001:供应商直送、40001:自提、30002:店中店商家直送} )
        //                                xmorderInfo.DistributePrice = transportprice;//运费（苏宁易购）
        //                                xmorderInfo.ProductPrice = orderprice;//产品总额
        //                                xmorderInfo.OrderPrice = orderprice + transportprice;//订单金额
        //                                //Decimal? promotionprice = 0;//优惠金额
        //                                //promotionprice = xmorderInfo.ProductPrice + xmorderInfo.DistributePrice - xmorderInfo.OrderPrice;
        //                                xmorderInfo.OrderPromotion = vouchertotalMoney;//订单优惠金额
        //                                //Decimal? taxes = 0;//折扣
        //                                //taxes = (xmorderInfo.OrderPrice - promotionprice) / xmorderInfo.OrderPrice;
        //                                //xmorderInfo.Taxes = taxes;
        //                                xmorderInfo.ReceivablePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//应收金额
        //                                xmorderInfo.PayPrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额


        //                                #region  保存数据

        //                                IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
        //                                InsertCount++;

        //                                #endregion
        //                            }
        //                            #endregion

        //                            #region 修改

        //                            else
        //                            {
        //                                string Remarks = xmorderInfo.Remark;
        //                                string CustomerServiceRemark = xmorderInfo.CustomerServiceRemark;
        //                                //string Modified = orderinfo.OrderUpdateTime.ToString();
        //                                string Memo = CustomerServiceRemark;//SellerMemo.Substring(SellerMemo.LastIndexOf("'") + 1).ToLower();
        //                                string RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;
        //                                string StatusValue = xmorderInfo.OrderStatus.Trim();
        //                                decimal FactoryPrice = 0;

        //                                if (Memo != RemarksValue || StatusValue != response.orderTotalStatus.ToString().Trim())
        //                                {
        //                                    #region 记录操作

        //                                    int UpsatorID = 0;
        //                                    if (HozestERPContext.Current.User != null)
        //                                    {
        //                                        UpsatorID = HozestERPContext.Current.User.CustomerID;

        //                                    }
        //                                    else
        //                                    {
        //                                        string UserName = "admin";
        //                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

        //                                        if (customer.Count > 0)
        //                                        {
        //                                            UpsatorID = customer[0].CustomerID;
        //                                        }
        //                                    }

        //                                    //if (Modified != null && Modified != "")
        //                                    //{

        //                                    //    if (xmorderInfo.OrderInfoModified != Convert.ToDateTime(Modified))
        //                                    //    {
        //                                    //        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
        //                                    //        record.OrderInfoId = xmorderInfo.ID;
        //                                    //        record.PropertyName = "OrderInfoModified";
        //                                    //        record.OldValue = System.Convert.ToString(xmorderInfo.OrderInfoModified);
        //                                    //        record.NewValue = Modified.ToString().Trim();
        //                                    //        record.UpdatorID = UpsatorID;
        //                                    //        record.UpdateTime = DateTime.Now;
        //                                    //        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record);//base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
        //                                    //    }
        //                                    //}

        //                                    if (Remarks != null && Remarks != "")
        //                                    {
        //                                        if (xmorderInfo.Remark != Remarks)
        //                                        {
        //                                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
        //                                            record.OrderInfoId = xmorderInfo.ID;
        //                                            record.PropertyName = "Remarks";
        //                                            record.OldValue = xmorderInfo.Remark;
        //                                            record.NewValue = Remarks;
        //                                            record.UpdatorID = UpsatorID;
        //                                            record.UpdateTime = DateTime.Now;
        //                                            IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
        //                                        }
        //                                    }
        //                                    if (CustomerServiceRemark != null && CustomerServiceRemark != "")
        //                                    {
        //                                        if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
        //                                        {
        //                                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
        //                                            record.OrderInfoId = xmorderInfo.ID;
        //                                            record.PropertyName = "CustomerServiceRemark";
        //                                            record.OldValue = xmorderInfo.CustomerServiceRemark;
        //                                            record.NewValue = CustomerServiceRemark;
        //                                            record.UpdatorID = UpsatorID;
        //                                            record.UpdateTime = DateTime.Now;
        //                                            IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
        //                                        }
        //                                    }
        //                                    if (xmorderInfo.OrderStatus != response.orderTotalStatus.ToString())
        //                                    {
        //                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
        //                                        record.OrderInfoId = xmorderInfo.ID;
        //                                        record.PropertyName = "OrderStatus";
        //                                        record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
        //                                        record.NewValue = System.Convert.ToString(response.orderTotalStatus);
        //                                        record.UpdatorID = UpsatorID;
        //                                        record.UpdateTime = DateTime.Now;
        //                                        IoC.Resolve<XMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
        //                                    }

        //                                    #endregion
        //                                }
        //                                //xmorderInfo.OrderInfoModified = DateTime.Parse(orderinfo.OrderUpdateTime);//更新时间
        //                                xmorderInfo.OrderStatus = response.orderTotalStatus;//订单状态 10待发货、20已发货、21部分发货、30交易成功、40交易关闭

        //                                if (response.orderTotalStatus == "10")
        //                                {
        //                                    if (xmorderInfo.PayDate == null)
        //                                    {
        //                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
        //                                    }
        //                                }
        //                                if (response.orderTotalStatus == "20")
        //                                {
        //                                    if (xmorderInfo.PayDate == null)
        //                                    {
        //                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
        //                                    }
        //                                    if (xmorderInfo.DeliveryTime == null)
        //                                    {
        //                                        xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
        //                                    }
        //                                }

        //                                if (response.orderTotalStatus == "30")
        //                                {
        //                                    if (xmorderInfo.PayDate == null)
        //                                    {
        //                                        xmorderInfo.PayDate = DateTime.Now;//付款时间 
        //                                    }
        //                                    if (xmorderInfo.DeliveryTime == null)
        //                                    {
        //                                        xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
        //                                    }
        //                                    if (xmorderInfo.CompletionTime == null)
        //                                    {
        //                                        xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
        //                                    }
        //                                }
        //                                xmorderInfo.WantID = response.userName;//用户id
        //                                xmorderInfo.FullName = response.customerName;//收货人
        //                                xmorderInfo.Province = response.provinceName;//省
        //                                xmorderInfo.City = response.cityName;//市
        //                                xmorderInfo.County = response.districtName;//区县
        //                                xmorderInfo.DeliveryAddress = response.customerAddress;//收货地址
        //                                xmorderInfo.Mobile = response.mobNum;//手机
        //                                xmorderInfo.Tel = response.mobNum;//电话
        //                                xmorderInfo.SourceType = "同步";//数据来源

        //                                //更改收货地址
        //                                //if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
        //                                //{
        //                                //    string csr = CustomerServiceRemark + "$";
        //                                //    string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
        //                                //    string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");

        //                                //    xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
        //                                //}

        //                                xmorderInfo.Remark = response.buyerOrdRemark;//买家备注
        //                                xmorderInfo.CustomerServiceRemark = response.sellerOrdRemark;//卖家备注(修改)
        //                                //xmorderInfo.PayPrice = Decimal.Parse(orderinfo.RealAmount.ToString());//实收金额


        //                                if (HozestERPContext.Current.User != null)
        //                                {
        //                                    xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;

        //                                }
        //                                else
        //                                {
        //                                    string UserName = "admin";
        //                                    List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

        //                                    if (customer.Count > 0)
        //                                    {
        //                                        xmorderInfo.UpdateID = customer[0].CustomerID;
        //                                    }
        //                                }

        //                                xmorderInfo.UpdateDate = DateTime.Now;


        //                                decimal orderprice = 0;//订单金额
        //                                decimal transportprice = 0;//运费
        //                                decimal coupontotalMoney = 0;//优惠卷金额
        //                                decimal vouchertotalMoney = 0;//优惠单金额

        //                                string scProductName = "";//商品名称（刷单）
        //                                //decimal scSalePrice = 0;//销售价(刷单)
        //                                string ModifiedDate = xmorderInfo.OrderInfoCreateDate.ToString();

        //                                //获取订单详情
        //                                for (int k = 0; k < response.orderDetail.Count; k++)
        //                                {
        //                                    var productinfo = response.orderDetail[k];

        //                                    orderprice += (decimal.Parse(productinfo.unitPrice) * decimal.Parse(productinfo.saleNum));//商品单价*数量
        //                                    transportprice += decimal.Parse(productinfo.transportFee);//运费
        //                                    coupontotalMoney += decimal.Parse(productinfo.coupontotalMoney);//优惠卷金额
        //                                    decimal changeNum = 0;
        //                                    if (decimal.TryParse(productinfo.vouchertotalMoney, out changeNum))
        //                                    {
        //                                        vouchertotalMoney += decimal.Parse(productinfo.vouchertotalMoney);//优惠单金额
        //                                    }
        //                                    else
        //                                    {
        //                                        vouchertotalMoney = 0;
        //                                    }

        //                                    //获取产品详情
        //                                    //suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest requestProduct = new suning::suning_api_sdk.BizRequest.CustomItemRequest.ItemGetRequest();
        //                                    //requestProduct.productCode = productinfo.productCode;//产品编号
        //                                    ////开启日志调试，当测试稳定之后建议设置为 false 或者删除该行
        //                                    ////SuningLogger.IsLogDebug = true;
        //                                    //suning::suning_api_sdk.ISuningClient clientProduct = new suning::suning_api_sdk.DefaultSuningClient(xMorderInfoApp.ServerUrl, xMorderInfoApp.AppKey, xMorderInfoApp.AppSecret, suning::suning_api_sdk.DefaultSuningClient.RespFormat.JSON);
        //                                    //suning::suning_api_sdk.BizResponse.CustomItemResponse.ItemGetResponse responseProduct = clientProduct.Execute(requestProduct);

        //                                    if (productinfo != null)
        //                                    {
        //                                        string OuterSkuId = productinfo.productCode;//商品编码
        //                                        int? num = int.Parse(productinfo.saleNum.Substring(0, productinfo.saleNum.IndexOf(".")));//数量
        //                                        string unitprice = productinfo.unitPrice == null ? "0" : productinfo.unitPrice.ToString();//单价
        //                                        if (OuterSkuId != "" && OuterSkuId != null)
        //                                        {
        //                                            //商家编码查询从表信息。
        //                                            var ProductList = this.GetXMProductListByPlatFormMerchantCode(OuterSkuId, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);

        //                                            //var XMOrderInfoProduct = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).SingleOrDefault();

        //                                            //if (XMOrderInfoProduct == null)
        //                                            //{
        //                                            //    XMOrderInfoProduct = new XMOrderInfoProductDetails();
        //                                            //}
        //                                            var OrderyReportProductList = xmorderInfo.XM_OrderInfoProductDetails.Where(p => p.PlatformMerchantCode == OuterSkuId).ToList();//.SingleOrDefault();

        //                                            XMOrderInfoProductDetails XMOrderInfoProduct = null;

        //                                            if (OrderyReportProductList.Count == 0)
        //                                            {
        //                                                XMOrderInfoProduct = new XMOrderInfoProductDetails();
        //                                            }
        //                                            else
        //                                            {

        //                                                XMOrderInfoProduct = OrderyReportProductList[0];
        //                                            }
        //                                            if (ProductList.Count > 0)
        //                                            {
        //                                                //商品关联主表信息
        //                                                //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
        //                                                if (ProductList[0].TDateTimeStart != null && ProductList[0].TDateTimeEnd != null && ModifiedDate != null && ModifiedDate != "" && ModifiedDate != "0001-01-01 00:00:00")
        //                                                {
        //                                                    if (Convert.ToDateTime(ModifiedDate) >= ProductList[0].TDateTimeStart && Convert.ToDateTime(ModifiedDate) <= ProductList[0].TDateTimeEnd)
        //                                                    {
        //                                                        XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
        //                                                        XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
        //                                                        XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
        //                                                        XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
        //                                                        XMOrderInfoProduct.TCostprice = ProductList[0].TCostprice;
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
        //                                                        XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
        //                                                        XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
        //                                                        XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
        //                                                        XMOrderInfoProduct.TCostprice = ProductList[0].Costprice;
        //                                                    }
        //                                                }
        //                                                else
        //                                                {
        //                                                    XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId;//料号(商家编码)
        //                                                    XMOrderInfoProduct.Specifications = ProductList[0].Specifications;//尺寸
        //                                                    XMOrderInfoProduct.FactoryPrice = ProductList[0].Costprice * num;//出厂价*数量
        //                                                    XMOrderInfoProduct.ProductName = ProductList[0].ProductName;//产品名称 
        //                                                    XMOrderInfoProduct.TCostprice = ProductList[0].Costprice;
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                XMOrderInfoProduct.PlatformMerchantCode = OuterSkuId; //料号（商品编码）
        //                                                XMOrderInfoProduct.Specifications = "";//尺寸
        //                                                XMOrderInfoProduct.FactoryPrice = 0;//出厂价
        //                                                XMOrderInfoProduct.ProductName = "无产品";
        //                                            }

        //                                            XMOrderInfoProduct.ProductNum = Convert.ToInt32(num);//数量
        //                                            if (ModifiedDate != null && ModifiedDate != "")
        //                                            {
        //                                                XMOrderInfoProduct.CutoffShipDay = DateTime.Parse(ModifiedDate.ToString().Trim()).AddDays(+20);//截止发货时间

        //                                            }
        //                                            XMOrderInfoProduct.SalesPrice = Decimal.Parse(productinfo.unitPrice.ToString());//单价/销售价

        //                                            if (scProductName == "")
        //                                            {
        //                                                scProductName = XMOrderInfoProduct.ProductName;
        //                                                //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
        //                                            }

        //                                            if (HozestERPContext.Current.User != null)
        //                                            {
        //                                                XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

        //                                            }
        //                                            else
        //                                            {
        //                                                string UserName = "admin";
        //                                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

        //                                                if (customer.Count > 0)
        //                                                {
        //                                                    XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
        //                                                }
        //                                            }

        //                                            XMOrderInfoProduct.UpdateDate = DateTime.Now;

        //                                        }
        //                                    }
        //                                }


        //                                scSalePrice = orderprice + transportprice - coupontotalMoney - vouchertotalMoney;//实收金额
        //                                //判断是否刷单
        //                                orderstatus = "10,20,21,30";
        //                                if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00") && xmorderInfo.OrderStatus != "" && xmorderInfo.OrderStatus != null && orderstatus.Contains(xmorderInfo.OrderStatus))
        //                                {
        //                                    xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), orderListInfo.orderCode, xmorderInfo.Remark, response.sellerOrdRemark, xmorderInfo.WantID, scProductName, scSalePrice);//销售金额：订单支付金额
        //                                }

        //                                #region  保存数据

        //                                IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
        //                                UpdateCount++;

        //                                #endregion
        //                            }

        //                            #endregion
        //                        }
        //                    }
        //                }
        //            }

        //        }
        //    }

        //}

        /// <summary>
        /// 根据订单号、商品编码
        /// </summary>
        /// <param name="OrderCode"></param>
        /// <param name="PartNo"></param>
        /// <returns></returns>
        //public XMOrderInfo GetXMOrderInfoByOrderCodeAndPartNo(string OrderCode, string PartNo)
        //{

        //    var query = from p in this._context.XMOrderInfoes
        //                where p.OrderCode.Equals(OrderCode)
        //                && p.PartNo.Equals(PartNo)
        //                && p.IsEnable == true
        //                select p;
        //    return query.FirstOrDefault();

        //}

        /// <summary>
        /// taobao.trades.sold.get 查询卖家已卖出的交易数据（根据创建时间）
        /// </summary>
        /// <param name="nick">店铺名称</param>
        /// <param name="NumId">产品数字Id</param>
        /// <returns>集合</returns>
        public List<Trade> GetTradeList(string dateTimeStart, string dateTimeEnd, string status, int page, int pageSize, out Int64 totalCount, bool recursive, XMOrderInfoApp xMorderInfoApp)
        {
            // AppUtility app = AppUtility.GetInstance(nick);
            try
            {
                long count = 0;
                //req.Status ="WAIT_SELLER_SEND_GOODS"
                //string appKey = "21694549"; //"21166931";// orderInfoApp.AppKey; // 
                //string appSecret = "b7912dff738b8f83d4495310a308500a";//"09d0d52165618f1b62b28478f09731b4"; //orderInfoApp.AppSecret;//
                //string sessionKey = "6102b2467ad6c54e45b37b6a0f44f6241c7443386d865671123900782"; //"610100845f897b1f1e8aaf1ce2eb1a15b39386f78f02e661123900782";// orderInfoApp.AccessToken;//
                //string url = "http://gw.api.taobao.com/router/rest";//orderInfoApp.ServerUrl;//

                string appKey = xMorderInfoApp.AppKey;//"21694549";
                string appSecret = xMorderInfoApp.AppSecret;//"b7912dff738b8f83d4495310a308500a";
                string sessionKey = xMorderInfoApp.AccessToken;//"6102b2467ad6c54e45b37b6a0f44f6241c7443386d865671123900782";
                string url = xMorderInfoApp.ServerUrl;//"http://gw.api.taobao.com/router/rest";

                ITopClient client = new DefaultTopClient(url, appKey, appSecret);
                TradesSoldGetRequest req = new TradesSoldGetRequest();
                req.Fields = "seller_nick,buyer_nick,title,type,created,sid,tid,seller_rate,buyer_rate,buyer_memo,buyer_message,status,payment,discount_fee,adjust_fee,post_fee,total_fee,pay_time,end_time,modified,consign_time,buyer_obtain_point_fee,point_fee,real_point_fee,received_payment,commission_fee,pic_path,num_iid,num_iid,num,price,cod_fee,cod_status,shipping_type,receiver_name,receiver_state,receiver_city,receiver_district,receiver_address,receiver_zip,receiver_mobile,receiver_phone,buyer_alipay_no,orders.title,orders.pic_path,orders.price,orders.num,orders.iid,orders.num_iid,orders.sku_id,orders.refund_status,orders.status,orders.oid,orders.total_fee,orders.payment,orders.discount_fee,orders.adjust_fee,orders.sku_properties_name,orders.item_meal_name,orders.buyer_rate,orders.seller_rate,orders.outer_iid,orders.outer_sku_id,orders.refund_id,orders.seller_type,orders.logistics_company ,orders.invoice_no,step_trade_status,step_paid_fee,paid_coupon_fee";
                req.StartCreated = Convert.ToDateTime(dateTimeStart);
                req.EndCreated = Convert.ToDateTime(dateTimeEnd);
                req.PageNo = page;
                req.PageSize = pageSize;
                //req.Status = status;
                TradesSoldGetResponse response = client.Execute(req, sessionKey);


                if (response.Trades == null)
                {
                    for (int i = 1; i < 10; i++)
                    {
                        ITopClient clientfor = new DefaultTopClient(url, appKey, appSecret);
                        TradesSoldGetRequest reqfor = new TradesSoldGetRequest();
                        reqfor.Fields = "seller_nick,buyer_nick,title,type,created,sid,tid,seller_rate,buyer_rate,buyer_memo,buyer_message,status,payment,discount_fee,adjust_fee,post_fee,total_fee,pay_time,end_time,modified,consign_time,buyer_obtain_point_fee,point_fee,real_point_fee,received_payment,commission_fee,pic_path,num_iid,num_iid,num,price,cod_fee,cod_status,shipping_type,receiver_name,receiver_state,receiver_city,receiver_district,receiver_address,receiver_zip,receiver_mobile,receiver_phone,buyer_alipay_no,orders.title,orders.pic_path,orders.price,orders.num,orders.iid,orders.num_iid,orders.sku_id,orders.refund_status,orders.status,orders.oid,orders.total_fee,orders.payment,orders.discount_fee,orders.adjust_fee,orders.sku_properties_name,orders.item_meal_name,orders.buyer_rate,orders.seller_rate,orders.outer_iid,orders.outer_sku_id,orders.refund_id,orders.seller_type,orders.logistics_company ,orders.invoice_no,step_trade_status,step_paid_fee,paid_coupon_fee";
                        reqfor.StartCreated = Convert.ToDateTime(dateTimeStart);
                        reqfor.EndCreated = Convert.ToDateTime(dateTimeEnd);
                        reqfor.PageNo = page;
                        reqfor.PageSize = pageSize;
                        //req.Status = status;
                        TradesSoldGetResponse responsefor = clientfor.Execute(reqfor, sessionKey);

                        if (responsefor.Trades != null)
                        {
                            if (!responsefor.IsError)
                            {
                                count = responsefor.TotalResults;
                                totalCount = count;
                                return responsefor.Trades;
                            }
                            else
                            {
                                throw new Exception("错误代码：" + responsefor.ErrCode + "错误信息：" + responsefor.ErrMsg);
                            }
                        }
                    }
                }
                else
                {
                    if (!response.IsError)
                    {
                        count = response.TotalResults;
                        totalCount = count;
                        return response.Trades;
                    }
                    else
                    {
                        throw new Exception("错误代码：" + response.ErrCode + "错误信息：" + response.ErrMsg);
                    }
                }

                totalCount = count;
            }
            catch (Exception ex)
            {
                // throw new Exception(e.Message);
                totalCount = 0;

                IoC.Resolve<IRecordErrorLogs>().WriteErrorLog("负责人:" + HozestERPContext.Current.User.CustomerID.ToString() + ";   方法名:GetTradeList;  异常提示：" + ex.Message.ToString() + ";   InnerException:" + ex.InnerException);

            }

            return null;
        }

        /// <summary>
        /// taobao.trades.sold.increment.get 查询卖家已卖出的增量交易数据（根据修改时间） 
        /// </summary>
        /// <param name="dateTimeStart"></param>
        /// <param name="dateTimeEnd"></param>
        /// <param name="status"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalCount"></param>
        /// <param name="recursive"></param>
        /// <param name="xMorderInfoApp"></param>
        /// <returns></returns>
        public List<Trade> GetTradesSoldIncrementGetList(string dateTimeStart, string dateTimeEnd, string status, int page, int pageSize, out Int64 totalCount, bool recursive, XMOrderInfoApp xMorderInfoApp)
        {
            try
            {
                long count = 0;
                string appKey = xMorderInfoApp.AppKey;//"21694549";
                string appSecret = xMorderInfoApp.AppSecret;//"b7912dff738b8f83d4495310a308500a";
                string sessionKey = xMorderInfoApp.AccessToken;//"6102b2467ad6c54e45b37b6a0f44f6241c7443386d865671123900782";
                string url = xMorderInfoApp.ServerUrl;//"http://gw.api.taobao.com/router/rest";

                ITopClient client = new DefaultTopClient(url, appKey, appSecret);

                TradesSoldIncrementGetRequest req = new TradesSoldIncrementGetRequest();
                req.Fields = "seller_nick,buyer_nick,title,type,created,sid,tid,seller_rate,buyer_rate,buyer_memo,buyer_message,status,payment,discount_fee,adjust_fee,post_fee,total_fee,pay_time,end_time,modified,consign_time,buyer_obtain_point_fee,point_fee,real_point_fee,received_payment,commission_fee,pic_path,num_iid,num_iid,num,price,cod_fee,cod_status,shipping_type,receiver_name,receiver_state,receiver_city,receiver_district,receiver_address,receiver_zip,receiver_mobile,receiver_phone,buyer_alipay_no,orders.title,orders.pic_path,orders.price,orders.num,orders.iid,orders.num_iid,orders.sku_id,orders.refund_status,orders.status,orders.oid,orders.total_fee,orders.payment,orders.discount_fee,orders.adjust_fee,orders.sku_properties_name,orders.item_meal_name,orders.buyer_rate,orders.seller_rate,orders.outer_iid,orders.outer_sku_id,orders.refund_id,orders.seller_type,orders.logistics_company ,orders.invoice_no,step_trade_status,step_paid_fee,paid_coupon_fee";
                req.StartModified = Convert.ToDateTime(dateTimeStart);
                req.EndModified = Convert.ToDateTime(dateTimeEnd);
                req.PageNo = page;
                req.PageSize = pageSize;
                //req.Status = status;

                TradesSoldIncrementGetResponse response = client.Execute(req, sessionKey);


                if (response.Trades == null)
                {
                    for (int i = 1; i < 10; i++)
                    {
                        ITopClient clientfor = new DefaultTopClient(url, appKey, appSecret);
                        TradesSoldIncrementGetRequest reqfor = new TradesSoldIncrementGetRequest();
                        reqfor.Fields = "seller_nick,buyer_nick,title,type,created,sid,tid,seller_rate,buyer_rate,buyer_memo,buyer_message,status,payment,discount_fee,adjust_fee,post_fee,total_fee,pay_time,end_time,modified,consign_time,buyer_obtain_point_fee,point_fee,real_point_fee,received_payment,commission_fee,pic_path,num_iid,num_iid,num,price,cod_fee,cod_status,shipping_type,receiver_name,receiver_state,receiver_city,receiver_district,receiver_address,receiver_zip,receiver_mobile,receiver_phone,buyer_alipay_no,orders.title,orders.pic_path,orders.price,orders.num,orders.iid,orders.num_iid,orders.sku_id,orders.refund_status,orders.status,orders.oid,orders.total_fee,orders.payment,orders.discount_fee,orders.adjust_fee,orders.sku_properties_name,orders.item_meal_name,orders.buyer_rate,orders.seller_rate,orders.outer_iid,orders.outer_sku_id,orders.refund_id,orders.seller_type,orders.logistics_company ,orders.invoice_no,step_trade_status,step_paid_fee,paid_coupon_fee";
                        reqfor.StartModified = Convert.ToDateTime(dateTimeStart);
                        reqfor.EndModified = Convert.ToDateTime(dateTimeEnd);
                        reqfor.PageNo = page;
                        reqfor.PageSize = pageSize;
                        //req.Status = status;
                        TradesSoldIncrementGetResponse responsefor = clientfor.Execute(reqfor, sessionKey);

                        if (responsefor.Trades != null)
                        {
                            if (!responsefor.IsError)
                            {
                                count = responsefor.TotalResults;
                                totalCount = count;
                                return responsefor.Trades;
                            }
                            else
                            {
                                throw new Exception("错误代码：" + responsefor.ErrCode + "错误信息：" + responsefor.ErrMsg);
                            }
                        }
                    }
                }
                else
                {
                    if (!response.IsError)
                    {
                        count = response.TotalResults;
                        totalCount = count;
                        return response.Trades;
                    }
                    else
                    {
                        throw new Exception("错误代码：" + response.ErrCode + "错误信息：" + response.ErrMsg);
                    }
                }

                totalCount = count;
            }
            catch (Exception ex)
            {
                // throw new Exception(e.Message);
                totalCount = 0;

                IoC.Resolve<IRecordErrorLogs>().WriteErrorLog("负责人:" + HozestERPContext.Current.User.CustomerID.ToString() + ";   方法名:GetTradeList;  异常提示：" + ex.Message.ToString() + ";   InnerException:" + ex.InnerException);

            }

            return null;
        }

        public void SynchronousVPHOrderData(string createDateStart, string createDateEnd, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            int pageSize = 100;//每页的条数
            for (int i = 1; i < 100; i++)
            {
                int ICount = 0;
                int UCount = 0;
                string count = "";
                PageVPHOrderDataList(createDateStart, createDateEnd, ref ICount, ref UCount, i, pageSize, ref count, xMorderInfoApp);
                InsertCount += ICount;
                UpdateCount += UCount;
                int allnum = count == "" ? 0 : Convert.ToInt32(count);
                if (allnum == 0 || (allnum != 0 && (allnum < (pageSize * i))))
                {
                    break;
                }
            }
        }

        /// <summary>
        /// 同步唯品会数据
        /// </summary>
        /// <param name="paydatestart"></param>
        /// <param name="paydateend"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="pageindex"></param>
        /// <param name="pagenum"></param>
        /// <param name="count"></param>
        public void PageVPHOrderDataList(string paydatestart, string paydateend, ref int InsertCount, ref int UpdateCount, int pageindex, int pagenum, ref string count, XMOrderInfoApp xMorderInfoApp)
        {
            bool iscontinue = false;//判断儿童床垫是否添加订单
            int? newnickid = xMorderInfoApp.NickId;

            #region 【订单信息】初始化参数信息

            JSONConvert.appKey = xMorderInfoApp.AppKey;
            JSONConvert.appSecret = xMorderInfoApp.AppSecret;
            JSONConvert.service = "vipapis.delivery.DvdDeliveryService";
            JSONConvert.method = "getOrderList";
            JSONConvert.version = "1.0.0";
            JSONConvert.timestamp = JSONConvert.ConvertDateTimeInt(DateTime.Now).ToString();

            //post应用级参数
            String UseInter = "{\"st_add_time\":" + "\"" + paydatestart + "\",\"et_add_time\":\""
                + paydateend + "\",\"vendor_id\":\"" + JSONConvert.vendorid + "\",\"page\":\"" + pageindex + "\",\"limit\":\"" + pagenum + "\"}";

            #endregion

            //订单json字符串
            string jsonstr = JSONConvert.post(UseInter);

            //解析json操作
            JObject jo = (JObject)JsonConvert.DeserializeObject(jsonstr);
            count = jo["result"]["total"] == null ? "0" : jo["result"]["total"].ToString();//统计数
            if (jo["result"]["dvd_order_list"] != null && jo["result"]["dvd_order_list"].ToString() != "")  //判断是否返回错误代码
            {
                string liststr = jo["result"]["dvd_order_list"].ToString(); //list组数据
                JArray ja = (JArray)JsonConvert.DeserializeObject(liststr);
                for (int l = 0; l < ja.Count; l++)
                {
                    iscontinue = false;
                    //----------解析获取的订单信息--------------
                    string order_id = ja[l]["order_id"].ToString().Replace("\"", "");//订单编号
                    //string status = ja[0]["status"].ToString().Replace("\"", "");//订单状态编码
                    string buyer = ja[l]["buyer"].ToString().Replace("\"", "");//收货人
                    string address = ja[l]["address"].ToString().Replace("\"", "");//收货地址
                    string mobile = ja[l]["mobile"].ToString().Replace("\"", "");//手机号码
                    string tel = ja[l]["tel"].ToString().Replace("\"", "");//联系电话
                    string postcode = ja[l]["postcode"].ToString().Replace("\"", "");//邮政编码
                    string city = ja[l]["city"].ToString().Replace("\"", "");//城市
                    string province = ja[l]["province"].ToString().Replace("\"", "");//省份
                    string country_id = ja[l]["country_id"].ToString().Replace("\"", "");//国家代码
                    string invoice = ja[l]["invoice"].ToString().Replace("\"", "");//发票抬头
                    string carriage = ja[l]["carriage"].ToString().Replace("\"", "");//快递金额（计算 整张出库单商品金额总和+快递费用 == 订单金额）
                    string remark = ja[l]["remark"].ToString().Replace("\"", "");//备注
                    string transport_day = ja[l]["transport_day"].ToString().Replace("\"", "");//期望收货时间
                    string vendor_id = ja[l]["vendor_id"].ToString().Replace("\"", "");//供应商ID
                    string vendor_name = ja[l]["vendor_name"].ToString().Replace("\"", "");//供应商名称
                    string ex_fav_money = ja[l]["promo_discount_amount"].ToString().Replace("\"", "");//促销优惠金额
                    string favourable_money = ja[l]["discount_amount"].ToString().Replace("\"", "");//优惠金额
                    string product_money = ja[l]["product_money"].ToString().Replace("\"", "");//整张出库单商品金额总和(计算发票金额 == 整张出库单商品金额总和 + 快递费用 - 优惠金额 - 促销优惠金额)
                    string add_time = ja[l]["add_time"].ToString().Replace("\"", "");//订单下单时间
                    string po_id = ja[l]["po_no"].ToString().Replace("\"", "");//PO号
                    string county = ja[l]["country"].ToString().Replace("\"", "");//区/县

                    //----------订单状态信息--------------
                    //获取json操作
                    string status = "";//订单状态编码
                    #region 【订单商品信息】初始化参数信息

                    JSONConvert.service = "vipapis.delivery.DvdDeliveryService";
                    JSONConvert.method = "getOrderStatusById";
                    JSONConvert.version = "1.0.0";
                    JSONConvert.timestamp = JSONConvert.ConvertDateTimeInt(DateTime.Now).ToString();

                    //post应用级参数
                    UseInter = "{\"order_id\":" + "\"" + order_id + "\",\"vendor_id\":\"" + JSONConvert.vendorid + "\"}";
                    //订单商品信息
                    string jsonstr_status = JSONConvert.post(UseInter);

                    #endregion
                    //解析json操作
                    JObject jo_status = (JObject)JsonConvert.DeserializeObject(jsonstr_status);
                    if (jo_status["result"] != null && jo_status["result"].ToString() != "")  //判断是否返回错误代码
                    {
                        JArray ja_status = (JArray)JsonConvert.DeserializeObject(jo_status["result"].ToString());
                        status = ja_status[0]["order_status"] == null ? "" : ja_status[0]["order_status"].ToString().Replace("\"", "");
                    }

                    //订单编号、商家编码查询订单
                    var xmorderInfo = this.GetXMOrderInfoByOrderCode(order_id);
                    //客服备注
                    string CustomerServiceRemark = "/收货时间:" + transport_day + "/发票抬头:" + invoice + "/发票金额" +
                            (Convert.ToDecimal(product_money) + Convert.ToDecimal(carriage) - Convert.ToDecimal(favourable_money) - Convert.ToDecimal(ex_fav_money)).ToString();

                    decimal scSalePrice = 0;//销售价(刷单)


                    //----------订单商品信息--------------
                    //获取json操作





                    #region 新增
                    if (xmorderInfo == null)
                    {
                        #region 【订单商品信息】初始化参数信息

                        JSONConvert.service = "vipapis.delivery.DvdDeliveryService";
                        JSONConvert.method = "getOrderDetail";
                        JSONConvert.version = "1.0.0";
                        JSONConvert.timestamp = JSONConvert.ConvertDateTimeInt(DateTime.Now).ToString();

                        //post应用级参数
                        UseInter = "{\"order_id\":" + "\"" + order_id + "\",\"vendor_id\":\"" + JSONConvert.vendorid + "\"}";
                        //订单商品信息
                        string jsonstr_goods = JSONConvert.post(UseInter);
                        #endregion

                        //解析json操作
                        JObject jo_goods = (JObject)JsonConvert.DeserializeObject(jsonstr_goods);
                        if (jo_goods["result"]["orderDetails"] != null && jo_goods["result"]["orderDetails"].ToString() != "")  //判断是否返回错误代码
                        {
                            //json解析商品
                            string liststr_goods = jo_goods["result"]["orderDetails"].ToString(); //list组数据
                            JArray ja_goods = (JArray)JsonConvert.DeserializeObject(liststr_goods);

                            bool IsAudit = false;//同步已发货及以后状态订单，自动审核
                            //订单主表信息
                            xmorderInfo = new XMOrderInfo();//初始化
                            xmorderInfo.NickID = int.Parse(newnickid.ToString());//1;//1:城市爱情旗舰店    22:利豪利嘉旗舰店
                            xmorderInfo.PlatformTypeId = 259;//259;//平台类型（唯品会）
                            xmorderInfo.OrderInfoCreateDate = Convert.ToDateTime(add_time);//创单时间
                            //if (transport_day != "")
                            //{
                            //    orderInfo.AppointDeliveryTime = Convert.ToDateTime(transport_day);//预约发货时间
                            //}
                            xmorderInfo.OrderCode = order_id;//订单号
                            xmorderInfo.OrderStatus = status;//订单状态

                            if (status == "STATUS_10")
                            {
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                            }
                            if (status == "STATUS_22")
                            {
                                IsAudit = true;
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                }
                                //if (xmorderInfo.CompletionTime == null)
                                //{
                                //    xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                //}
                            }
                            if (status == "STATUS_25")
                            {
                                IsAudit = true;
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                }
                                if (xmorderInfo.CompletionTime == null)
                                {
                                    xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                    AutoSingleRow(order_id);
                                }
                            }

                            #region 赠品、返现 唯品会状态为已签收才新增赠品返现订单
                            //status == "STATUS_1" || status == "STATUS_10" || status == "STATUS_11" || status == "STATUS_22" 
                            //if (status == "STATUS_25")//待审核订单（已支付/未处理）
                            //{
                            if (add_time.ToString().Trim() != null && add_time.ToString().Trim() != "")
                            {
                                if (DateTime.Parse(add_time.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                {
                                    if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                    {
                                        string BuyerName = buyer;//收货人名称
                                        string WantNo = "";//buyerNick;//旺旺号
                                        string OrderCode = order_id;//订单号 
                                        string paramMessage = string.Empty;

                                        if (CustomerServiceRemark.IndexOf("/赠品") > -1 || CustomerServiceRemark.IndexOf("/退差价") > -1)
                                        {
                                            #region 赠品
                                            if (CustomerServiceRemark.IndexOf("/赠品") > -1)
                                            {
                                                //返回赠品条数
                                                int PremiumsInst = XMPremiumsInst(CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, 259, int.Parse(newnickid.ToString()));

                                            }
                                            #endregion

                                            #region 返现
                                            if (CustomerServiceRemark.IndexOf("/退差价") > -1)
                                            {

                                                //返回返现条数
                                                int CashBackApplicationInstCount = CashBackApplicationInst(CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                            }

                                            #endregion
                                        }
                                    }
                                }
                            }

                            //}
                            #endregion

                            xmorderInfo.FullName = buyer;//收货人
                            xmorderInfo.DeliveryAddress = address + "(" + postcode + ")";//收货地址
                            xmorderInfo.City = city;
                            xmorderInfo.Province = province;
                            xmorderInfo.County = county;
                            xmorderInfo.Mobile = mobile;//手机
                            xmorderInfo.Tel = tel;//电话
                            //orderInfo.WantID = buyerNick;//ID（买家帐号）
                            xmorderInfo.SourceType = "同步";//数据来源类型
                            xmorderInfo.FinancialAudit = true;//财务审核
                            xmorderInfo.Remark = remark;//备注
                            xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//客服备注（新增）
                            if (invoice != "")
                            {
                                xmorderInfo.IsInvoiced = true;//是否发票
                                xmorderInfo.InvoiceHead = invoice;//发票抬头
                            }
                            xmorderInfo.ProductPrice = Decimal.Parse(product_money == "" ? "0" : product_money);//商品总金额
                            xmorderInfo.ProductPromotion = Decimal.Parse(ex_fav_money == "" ? "0" : ex_fav_money);//商品促销金额
                            xmorderInfo.OrderPromotion = Decimal.Parse(favourable_money == "" ? "0" : favourable_money);//订单促销金额
                            xmorderInfo.OrderPrice = Decimal.Parse(carriage == "" ? "0" : carriage) + xmorderInfo.ProductPrice;//订单金额
                            xmorderInfo.PayPrice = (decimal)xmorderInfo.OrderPrice - Convert.ToDecimal(ex_fav_money) - Convert.ToDecimal(favourable_money);
                            if (status == "STATUS_25")
                            {
                                xmorderInfo.ReceivablePrice = (decimal)xmorderInfo.OrderPrice - Convert.ToDecimal(favourable_money);//到账金额
                            }
                            else
                            {
                                xmorderInfo.ReceivablePrice = 0;//到账金额
                            }

                            xmorderInfo.IsEnable = false;//是否删除
                            xmorderInfo.IsCashBack = false;//是否返现
                            xmorderInfo.IsSentGifts = false;//是否已发赠品 
                            xmorderInfo.IsEvaluate = false;//是否赔付
                            xmorderInfo.IsOurOrder = false;
                            xmorderInfo.IsAudit = IsAudit;

                            if (HozestERPContext.Current.User != null)
                            {
                                xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                                xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                            }
                            else
                            {
                                string UserName = "admin";
                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                if (customer.Count > 0)
                                {
                                    xmorderInfo.CreateID = customer[0].CustomerID;
                                    xmorderInfo.UpdateID = customer[0].CustomerID;
                                }
                            }
                            xmorderInfo.CreateDate = DateTime.Now;
                            xmorderInfo.UpdateDate = DateTime.Now;

                            string scProductName = "";//商品名称（刷单）
                            //decimal orderprice = 0;//订单金额

                            xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();//初始化

                            decimal priceTotal = 0;//总商品金额
                            for (int k = 0; k < ja_goods.Count; k++)
                            {
                                decimal PriceNum = decimal.Parse(ja_goods[k]["sell_price"].ToString().Replace("\"", "") == null ? "0" : (ja_goods[k]["sell_price"].ToString().Replace("\"", "") == "" ? "0" : ja_goods[k]["sell_price"].ToString().Replace("\"", ""))) * decimal.Parse(ja_goods[k]["amount"].ToString().Replace("\"", ""));
                                priceTotal += PriceNum;
                            }
                            decimal payPriceK = 0;//已赋值付款金额


                            //----------解析获取订单商品信息--------------
                            #region 订单商品信息
                            for (int i = 0; i < ja_goods.Count; i++)
                            {
                                newnickid = xMorderInfoApp.NickId;
                                string brand_name = ja_goods[i]["brand_name"].ToString().Replace("\"", "");//品牌名称
                                string product_name = ja_goods[i]["product_name"].ToString().Replace("\"", "");//商品名称
                                string size = ja_goods[i]["size"].ToString().Replace("\"", "");//尺码
                                //string product_no = ja_goods[i]["art_no"].ToString().Replace("\"", "");//货号（对应商品编码）
                                string product_no = ja_goods[i]["barcode"].ToString().Replace("\"", "");//货号,其实对应的是传过来的条形码的值
                                //string barcode = ja_goods[i]["barcode"].ToString().Replace("\"", "");//条形码
                                string amount = ja_goods[i]["amount"].ToString().Replace("\"", "");//商品数量
                                string price = ja_goods[i]["sell_price"].ToString().Replace("\"", "");//单价

                                if (product_no != null && product_no != "")
                                {
                                    //商家编码查询从表信息。
                                    var ProductList = IoC.Resolve<IXMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(product_no, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);
                                    
                                    if (ProductList.Count > 0) //是否查到对应商品
                                    {
                                        if (ProductList[0].BrandTypeId == 764) //迪士尼的品牌编号
                                        {
                                            newnickid = 64;
                                            xmorderInfo.NickID = newnickid;
                                            xmorderInfo.IsOurOrder = true;
                                        }
                                    }

                                    if (newnickid == 32)
                                    {
                                        #region 排除呼噜噜的订单
                                        if (!product_no.StartsWith("CM"))
                                        {
                                            if (xmorderInfo.ProductPrice != null && xmorderInfo.ProductPrice != 0)
                                            {
                                                xmorderInfo.PayPrice -= Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(price) * decimal.Parse(amount) / (decimal)xmorderInfo.ProductPrice, 2);
                                            }
                                            else if (xmorderInfo.OrderPrice != null && xmorderInfo.OrderPrice != 0)
                                            {
                                                xmorderInfo.PayPrice -= Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(price) * decimal.Parse(amount) / (decimal)xmorderInfo.OrderPrice, 2);
                                            }
                                            continue;
                                        }

                                        //2015-7-28 修改 
                                        var ddh = product_no.Substring(0, 2);
                                        //if (product_name.IndexOf("儿童") == -1 && product_name.IndexOf("青少年") == -1 && product_name.IndexOf("亲子") == -1 && product_name.IndexOf("青少年定制床垫") == -1 && product_name.IndexOf("独立弹簧乳胶可拆卸床垫") == -1)
                                        //2015-7-28 修改

                                        if (ddh == "CM")
                                        {
                                            xmorderInfo.NickID = newnickid;
                                            xmorderInfo.IsOurOrder = true;
                                        }
                                        #endregion
                                    }

                                    //2015-7-28新增
                                    decimal a = 0;
                                    decimal? tj = 0;
                                    bool IsZuHe = false;
                                    if (ProductList.Count == 0)
                                    {
                                        ProductList = GetXMProductListByzuheCode(product_no, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                        a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                        if (ProductList.Count > 0)
                                        {
                                            IsZuHe = true;
                                        }
                                    }

                                    if (ProductList.Count > 0)
                                    {
                                        decimal payPriceI = 0;//组合已赋值付款金额
                                        decimal ZuHeTotal = 0;
                                        for (int w = 0; w < ProductList.Count; w++)
                                        {
                                            decimal ZuHeNum = (decimal)ProductList[w].Saleprice * decimal.Parse(ProductList[w].count.ToString());
                                            ZuHeTotal += ZuHeNum;
                                        }
                                        for (int s = 0; s < ProductList.Count; s++)
                                        {
                                            var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                            //商品关联主表信息
                                            //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                            if (ProductList[s].TDateTimeStart != null && ProductList[s].TDateTimeEnd != null && add_time != null && add_time != "" && add_time != "0001-01-01 00:00:00")
                                            {
                                                if (Convert.ToDateTime(add_time) >= ProductList[s].TDateTimeStart && Convert.ToDateTime(add_time) <= ProductList[s].TDateTimeEnd)
                                                {
                                                    //XMOrderInfoProduct.PlatformMerchantCode = product_no;//货号
                                                    XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                    XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                    XMOrderInfoProduct.FactoryPrice = ProductList[s].TCostprice * Convert.ToInt32(amount) * ProductList[s].count;//出厂价
                                                    XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                    XMOrderInfoProduct.TCostprice = ProductList[s].TCostprice;

                                                    if (!string.IsNullOrEmpty(ProductList[s].TManufacturersCode))
                                                    {
                                                        XMOrderInfoProduct.TManufacturersCode = ProductList[s].TManufacturersCode;//临时厂家编码
                                                    }
                                                    else
                                                    {
                                                        XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                    }

                                                }
                                                else
                                                {
                                                    //XMOrderInfoProduct.PlatformMerchantCode = product_no;//货号
                                                    XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                    XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                    XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * Convert.ToInt32(amount) * ProductList[s].count;//出厂价*数量
                                                    XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                    XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                    XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                }

                                            }
                                            else
                                            {
                                                //XMOrderInfoProduct.PlatformMerchantCode = product_no;//货号
                                                XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * Convert.ToInt32(amount) * ProductList[s].count;//出厂价*数量
                                                XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                            }

                                            XMOrderInfoProduct.ProductNum = Convert.ToInt32(amount) * ProductList[s].count;//数量

                                            decimal PartPayPrice = 0;
                                            if (i == ja_goods.Count - 1)
                                            {
                                                PartPayPrice = (decimal)xmorderInfo.PayPrice - payPriceK;
                                            }
                                            else
                                            {
                                                PartPayPrice = Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(price) * decimal.Parse(amount) / priceTotal, 2);
                                                //payPriceK += PartPayPrice;
                                            }
                                            if (IsZuHe)
                                            {
                                                if (s == ProductList.Count - 1)
                                                {
                                                    XMOrderInfoProduct.SalesPrice = PartPayPrice - payPriceI;
                                                    payPriceK += PartPayPrice;
                                                }
                                                else
                                                {
                                                    if (ZuHeTotal == 0) //产品销售价没有维护，是0时导致分母为0，计算出错
                                                    {
                                                        XMOrderInfoProduct.SalesPrice = 0;
                                                    }
                                                    else
                                                    {
                                                        XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice * (decimal)ProductList[s].Saleprice * decimal.Parse(ProductList[s].count.ToString()) / ZuHeTotal, 2);//销售价
                                                    }
                                                    payPriceI += (decimal)XMOrderInfoProduct.SalesPrice;
                                                }
                                            }
                                            else
                                            {
                                                XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice, 2);//销售价
                                                payPriceK += PartPayPrice;
                                            }

                                            XMOrderInfoProduct.IsEnable = false;//是否删除
                                            XMOrderInfoProduct.IsAudit = IsAudit;//是否审核
                                            XMOrderInfoProduct.IsExpedited = false;//是否加急
                                            XMOrderInfoProduct.ISArrivedLibrary = false;//是否抵库

                                            if (scProductName == "")
                                            {
                                                scProductName = XMOrderInfoProduct.ProductName;
                                                //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                            }

                                            if (HozestERPContext.Current.User != null)
                                            {
                                                XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                            }
                                            else
                                            {
                                                string UserName = "admin";
                                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                if (customer.Count > 0)
                                                {
                                                    XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                    XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                }
                                            }

                                            XMOrderInfoProduct.CreateDate = DateTime.Now;
                                            XMOrderInfoProduct.UpdateDate = DateTime.Now;
                                            xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                        }
                                    }
                                    else
                                    {
                                        var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                        XMOrderInfoProduct.PlatformMerchantCode = product_no; //料号（商品编码）
                                        XMOrderInfoProduct.Specifications = "";//尺寸
                                        XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                        XMOrderInfoProduct.ProductName = "无产品";

                                        xmorderInfo.IsAbnormal = true;//是否异常

                                        XMOrderInfoProduct.ProductNum = Convert.ToInt32(amount);//数量

                                        XMOrderInfoProduct.SalesPrice = decimal.Parse(price) * Convert.ToInt32(amount);//销售价

                                        XMOrderInfoProduct.IsEnable = false;//是否删除
                                        XMOrderInfoProduct.IsAudit = IsAudit;//是否审核
                                        XMOrderInfoProduct.IsExpedited = false;//是否加急
                                        XMOrderInfoProduct.ISArrivedLibrary = false;//是否抵库

                                        if (scProductName == "")
                                        {
                                            scProductName = XMOrderInfoProduct.ProductName;
                                            //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                        }

                                        if (HozestERPContext.Current.User != null)
                                        {
                                            XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                            XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                        }
                                        else
                                        {
                                            string UserName = "admin";
                                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                            if (customer.Count > 0)
                                            {
                                                XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                            }
                                        }

                                        XMOrderInfoProduct.CreateDate = DateTime.Now;
                                        XMOrderInfoProduct.UpdateDate = DateTime.Now;
                                        xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);

                                    }
                                    if (iscontinue)
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        iscontinue = true;
                                    }
                                }
                            }
                            #endregion

                            scSalePrice = (decimal)xmorderInfo.PayPrice;//(唯品会新增)
                            //判断是否刷单
                            if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00"))
                            {
                                xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), order_id, xmorderInfo.Remark, CustomerServiceRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售金额：订单支付金额
                            }

                            #region  保存数据

                            if (iscontinue && xmorderInfo.XM_OrderInfoProductDetails != null && xmorderInfo.XM_OrderInfoProductDetails.Count > 0)
                            {
                                xmorderInfo.UpdateDate = DateTime.Now;
                                IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
                                //新建发票
                                if (xmorderInfo.IsInvoiced != null && xmorderInfo.IsInvoiced == true)
                                {
                                    ToAddXMInvoiceInfo(xmorderInfo,719,"","","","","");
                                }
                            }
                            InsertCount++;

                            #endregion
                        }
                    }
                    #endregion

                    #region 修改
                    else
                    {
                        string Memo = remark + CustomerServiceRemark;//SellerMemo.Substring(SellerMemo.LastIndexOf("'") + 1).ToLower();
                        string RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;
                        string StatusValue = xmorderInfo.OrderStatus.Trim();

                        xmorderInfo.OrderStatus = status;//订单状态

                        if (status == "STATUS_10")
                        {

                            if (xmorderInfo.PayDate == null)
                            {
                                xmorderInfo.PayDate = DateTime.Now;//付款时间 
                            }
                        }
                        if (status == "STATUS_22")
                        {
                            if (xmorderInfo.PayDate == null)
                            {
                                xmorderInfo.PayDate = DateTime.Now;//付款时间 
                            }
                            if (xmorderInfo.DeliveryTime == null)
                            {
                                xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                            }
                            //if (xmorderInfo.CompletionTime == null)
                            //{
                            //    xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                            //}
                        }
                        if (status == "STATUS_25")
                        {
                            if (xmorderInfo.PayDate == null)
                            {
                                xmorderInfo.PayDate = DateTime.Now;//付款时间 
                            }
                            if (xmorderInfo.DeliveryTime == null)
                            {
                                xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                            }
                            if (xmorderInfo.CompletionTime == null)
                            {
                                xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                AutoSingleRow(order_id);
                            }
                        }

                        #region 赠品、返现 唯品会为已签收才能修改返现赠品订单
                        //status == "STATUS_1" || status == "STATUS_10" || status == "STATUS_11" || status == "STATUS_22"
                        //if (status == "STATUS_25")//待审核订单（已支付/未处理）
                        //{ 
                        if (add_time.ToString().Trim() != null && add_time.ToString().Trim() != "")
                        {
                            if (DateTime.Parse(add_time.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                            {
                                if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                {
                                    string BuyerName = buyer;//收货人名称
                                    string WantNo = "";//buyerNick;//旺旺号
                                    string OrderCode = order_id;//订单号 
                                    string paramMessage = string.Empty;

                                    #region 赠品、返现 (修改)

                                    if (xmorderInfo.CustomerServiceRemark.Trim() != remark.Trim())
                                    {
                                        string CustomerServiceRemarkOld = xmorderInfo.CustomerServiceRemark.Trim();
                                        string CustomerServiceRemarkNew = CustomerServiceRemark.Trim();

                                        if (CustomerServiceRemarkNew.IndexOf("/赠品") > -1 || CustomerServiceRemarkNew.IndexOf("/退差价") > -1)
                                        {
                                            IoC.Resolve<IXMOrderInfoAPIService>().XMPremiumsAndCashBackApplication(CustomerServiceRemarkOld, CustomerServiceRemarkNew, xmorderInfo.OrderCode, xmorderInfo.WantID, xmorderInfo.FullName, (int)xmorderInfo.PlatformTypeId, (int)xmorderInfo.NickID);
                                        }
                                    }
                                    #endregion
                                }
                            }
                        }

                        //}
                        #endregion

                        //xmorderInfo.FullName = buyer;//收货人
                        //xmorderInfo.DeliveryAddress = address + "(" + postcode + ")";//收货地址
                        //xmorderInfo.City = city;
                        //xmorderInfo.Province = province;
                        //xmorderInfo.Mobile = mobile;//手机
                        //xmorderInfo.Tel = tel;//电话
                        //orderInfo.WantID = buyerNick;//ID（买家帐号）
                        xmorderInfo.SourceType = "同步";//数据来源类型
                        xmorderInfo.FinancialAudit = true;//财务审核
                        //更改收货地址
                        if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
                        {
                            string csr = CustomerServiceRemark + "$";
                            string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                            string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");

                            //xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                        }

                        xmorderInfo.Remark = remark;//备注
                        // xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//客服备注
                        if (invoice != "")
                        {
                            xmorderInfo.IsInvoiced = true;//是否发票
                            xmorderInfo.InvoiceHead = invoice;//发票抬头
                        }
                        xmorderInfo.ProductPrice = Decimal.Parse(product_money == "" ? "0" : product_money);//商品总金额
                        xmorderInfo.ProductPromotion = Decimal.Parse(ex_fav_money == "" ? "0" : ex_fav_money);//商品促销金额
                        xmorderInfo.OrderPromotion = Decimal.Parse(favourable_money == "" ? "0" : favourable_money);//订单促销金额
                        xmorderInfo.OrderPrice = Decimal.Parse(carriage == "" ? "0" : carriage) + xmorderInfo.ProductPrice;//订单金额
                        xmorderInfo.PayPrice = (decimal)xmorderInfo.OrderPrice - Convert.ToDecimal(ex_fav_money) - Convert.ToDecimal(favourable_money);
                        if (status == "STATUS_25")
                        {
                            xmorderInfo.ReceivablePrice = (decimal)xmorderInfo.OrderPrice - Convert.ToDecimal(favourable_money);//到账金额
                        }
                        else
                        {
                            xmorderInfo.ReceivablePrice = 0;//到账金额
                        }

                        if (HozestERPContext.Current.User != null)
                        {
                            xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                        }
                        else
                        {
                            string UserName = "admin";
                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                            if (customer.Count > 0)
                            {
                                xmorderInfo.UpdateID = customer[0].CustomerID;
                            }
                        }
                        xmorderInfo.UpdateDate = DateTime.Now;
                        //xmorderInfo.IsOurOrder = false;
                        if (xmorderInfo.IsOurOrder == null)
                        {
                            if (xmorderInfo.XM_OrderInfoProductDetails.Where(x => x.PlatformMerchantCode.StartsWith("CM")).ToList().Count > 0)
                            {
                                xmorderInfo.IsOurOrder = true;
                            }
                            else
                            {
                                xmorderInfo.IsOurOrder = false;
                            }
                        }

                        #region 记录操作

                        int UpsatorID = 0;
                        if (HozestERPContext.Current.User != null)
                        {
                            UpsatorID = HozestERPContext.Current.User.CustomerID;
                        }
                        else
                        {
                            string UserName = "admin";
                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                            if (customer.Count > 0)
                            {
                                UpsatorID = customer[0].CustomerID;
                            }
                        }
                        if (remark != null && remark != "")
                        {
                            if (xmorderInfo.Remark != remark)
                            {
                                XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                record.OrderInfoId = xmorderInfo.ID;
                                record.PropertyName = "Remark";
                                record.OldValue = xmorderInfo.Remark;
                                record.NewValue = remark;
                                record.UpdatorID = UpsatorID;
                                record.UpdateTime = DateTime.Now;
                                IoC.Resolve<IXMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                            }
                        }
                        if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                        {
                            if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
                            {
                                var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, CustomerServiceRemark);
                                if (RecordExist == null || RecordExist.Count == 0)
                                {
                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    record.OrderInfoId = xmorderInfo.ID;
                                    record.PropertyName = "CustomerServiceRemark";
                                    record.OldValue = xmorderInfo.CustomerServiceRemark;
                                    record.NewValue = CustomerServiceRemark;
                                    record.UpdatorID = UpsatorID;
                                    record.UpdateTime = DateTime.Now;
                                    IoC.Resolve<IXMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                                }
                            }
                        }
                        if (xmorderInfo.OrderStatus != status)
                        {
                            XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                            record.OrderInfoId = xmorderInfo.ID;
                            record.PropertyName = "OrderStatus";
                            record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                            record.NewValue = System.Convert.ToString(status);
                            record.UpdatorID = UpsatorID;
                            //if (Modified != null && Modified != "")
                            //{
                            //    record.UpdateTime = DateTime.Parse(Modified);
                            //}
                            //else
                            //{
                            record.UpdateTime = DateTime.Now;
                            //}
                            IoC.Resolve<IXMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                        }


                        #endregion

                        string scProductName = "";//商品名称（刷单）
                        //decimal scSalePrice = 0;//销售价(刷单)
                        //decimal orderprice = 0;//订单金额


                        scSalePrice = (decimal)xmorderInfo.PayPrice;
                        //判断是否刷单
                        if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00"))
                        {
                            xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), order_id, xmorderInfo.Remark, CustomerServiceRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售金额：订单支付金额
                        }
                        //xmorderInfo.PayPrice = orderprice ;

                        #region  保存数据

                        IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
                        UpdateCount++;

                        #endregion

                    }
                    #endregion
                }
            }
        }

        public void SynchronousVPHMPOrderData(string createDateStart, string createDateEnd, ref int InsertCount, ref int UpdateCount, XMOrderInfoApp xMorderInfoApp)
        {
            int pageSize = 200;//每页的条数
            for (int i = 1; i < 50; i++)
            {
                int ICount = 0;
                int UCount = 0;
                string count = "";
                PageVPHMPOrderDataList(createDateStart, createDateEnd, ref ICount, ref UCount, i, pageSize, ref count, xMorderInfoApp);
                InsertCount += ICount;
                UpdateCount += UCount;
                int allnum = count == "" ? 0 : Convert.ToInt32(count);
                if (allnum == 0 || (allnum != 0 && (allnum < (pageSize * i))))
                {
                    break;
                }
            }
        }

         /// <summary>
        /// 同步唯品会MP数据
        /// </summary>
        /// <param name="paydatestart"></param>
        /// <param name="paydateend"></param>
        /// <param name="InsertCount"></param>
        /// <param name="UpdateCount"></param>
        /// <param name="pageindex"></param>
        /// <param name="pagenum"></param>
        /// <param name="count"></param>
        public void PageVPHMPOrderDataList(string paydatestart, string paydateend, ref int InsertCount, ref int UpdateCount, int pageindex, int pagenum, ref string count, XMOrderInfoApp xMorderInfoApp)
        {
            try
            {
                vipapis.marketplace.delivery.SovDeliveryServiceHelper.SovDeliveryServiceClient client = new vipapis.marketplace.delivery.SovDeliveryServiceHelper.SovDeliveryServiceClient();
                vipapis.marketplace.delivery.GetOrdersRequest GOR = new vipapis.marketplace.delivery.GetOrdersRequest();
                GOR.SetQuery_start_time(paydatestart);
                GOR.SetQuery_end_time(paydateend);
                Osp.Sdk.Context.InvocationContext invocationContext = Osp.Sdk.Context.Factory.GetInstance();
                invocationContext.SetAppKey(xMorderInfoApp.AppKey);
                invocationContext.SetAppSecret(xMorderInfoApp.AppSecret);
                invocationContext.SetAppURL(xMorderInfoApp.ServerUrl);
                invocationContext.SetAccessToken(xMorderInfoApp.AccessToken);
                invocationContext.SetLanguage("zh");
                List<vipapis.marketplace.delivery.SovOrder> VPHMPOrder   = client.getOrders(GOR).GetOrders() ;
                if (VPHMPOrder.Count > 0)
                {
                    for (int i = 0; i < VPHMPOrder.Count; i++)
                    {

                        //订单编号、商家编码查询订单
                        string OrderCode = VPHMPOrder[i].GetOrder_id();
                        string status = VPHMPOrder[i].GetStatus();
                        //客服备注
                        string CustomerServiceRemark = "/收货时间:" + VPHMPOrder[i].GetTransport_day() + "/发票抬头:" + VPHMPOrder[i].GetInvoice_title() + "/发票金额:" +VPHMPOrder[i].GetInvoice_amount();
                        decimal scSalePrice = 0;//销售价(刷单)
                        var xmorderInfo = this.GetXMOrderInfoByOrderCode(OrderCode);
                        if (xmorderInfo == null)
                        {
                            #region 新增
                            bool IsAudit = false;//同步已发货及以后状态订单，自动审核
                            //订单主表信息
                            xmorderInfo = new XMOrderInfo();//初始化;
                            xmorderInfo.NickID = int.Parse(xMorderInfoApp.NickId.ToString());//1;//1:城市爱情旗舰店    22:利豪利嘉旗舰店
                            xmorderInfo.PlatformTypeId = xMorderInfoApp.PlatformTypeId;//803;//平台类型（唯品会MP）
                            xmorderInfo.OrderInfoCreateDate = DateTime.Parse(VPHMPOrder[i].GetStore_add_time());//订单流入店铺的时间
                            //if (transport_day != "")
                            //{
                            //    orderInfo.AppointDeliveryTime = Convert.ToDateTime(transport_day);//预约发货时间
                            //}

                            xmorderInfo.OrderCode = OrderCode;//订单号
                            xmorderInfo.OrderStatus = status;//订单状态

                            if (status == "10")
                            {
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                            }
                            if (status == "22")
                            {
                                IsAudit = true;
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                }
                                //if (xmorderInfo.CompletionTime == null)
                                //{
                                //    xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                //}
                            }
                            if (status == "25")
                            {
                                IsAudit = true;
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                }
                                if (xmorderInfo.CompletionTime == null)
                                {
                                    xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                    AutoSingleRow(OrderCode);
                                }
                            }
                            xmorderInfo.FullName = VPHMPOrder[i].GetReceiver_name();//收货人
                            xmorderInfo.DeliveryAddress = VPHMPOrder[i].GetReceiver_address() + "(" + VPHMPOrder[i].GetReceiver_zip() + ")";//收货地址
                            xmorderInfo.City = VPHMPOrder[i].GetReceiver_city();//市
                            xmorderInfo.Province = VPHMPOrder[i].GetReceiver_state();//省
                            xmorderInfo.County = VPHMPOrder[i].GetReceiver_district();//区
                            xmorderInfo.Mobile = VPHMPOrder[i].GetReceiver_mobile();//手机
                            xmorderInfo.Tel = VPHMPOrder[i].GetReceiver_phone();//电话
                            //orderInfo.WantID = buyerNick;//ID（买家帐号）
                            xmorderInfo.SourceType = "同步";//数据来源类型
                            xmorderInfo.FinancialAudit = true;//财务审核
                            xmorderInfo.Remark = VPHMPOrder[i].GetRemark();//备注
                            xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//客服备注（新增）
                            if (VPHMPOrder[i].GetInvoice_title() != "")
                            {
                                xmorderInfo.IsInvoiced = true;//是否发票
                                xmorderInfo.InvoiceHead = VPHMPOrder[i].GetInvoice_title();//发票抬头
                            }
                            xmorderInfo.DistributePrice = Decimal.Parse(VPHMPOrder[i].GetPost_fee());
                            xmorderInfo.ProductPrice = Decimal.Parse(VPHMPOrder[i].GetTotal_fee() == "" ? "0" : VPHMPOrder[i].GetTotal_fee());//商品总金额
                            xmorderInfo.ProductPromotion = Decimal.Parse(VPHMPOrder[i].GetDiscount_fee() == "" ? "0" : VPHMPOrder[i].GetDiscount_fee());//商品促销金额
                            xmorderInfo.OrderPromotion = Decimal.Parse(VPHMPOrder[i].GetEx_discount_fee() == "" ? "0" : VPHMPOrder[i].GetEx_discount_fee());//订单促销金额
                            xmorderInfo.OrderPrice = Decimal.Parse(VPHMPOrder[i].GetTotal_fee() == "" ? "0" : VPHMPOrder[i].GetTotal_fee()) + Decimal.Parse(VPHMPOrder[i].GetPost_fee());//订单金额=商品总金额+快递费用
                            xmorderInfo.PayPrice = (decimal)xmorderInfo.OrderPrice - xmorderInfo.ProductPromotion - xmorderInfo.OrderPromotion;//支付金额=订单金额-商品促销金额-订单促销金额
                            if (status == "25")
                            {
                                xmorderInfo.ReceivablePrice = (decimal)xmorderInfo.OrderPrice - xmorderInfo.ProductPromotion;//到账金额
                            }
                            else
                            {
                                xmorderInfo.ReceivablePrice = 0;//到账金额
                            }

                            xmorderInfo.IsEnable = false;//是否删除
                            xmorderInfo.IsCashBack = false;//是否返现
                            xmorderInfo.IsSentGifts = false;//是否已发赠品 
                            xmorderInfo.IsEvaluate = false;//是否赔付
                            xmorderInfo.IsOurOrder = false;
                            xmorderInfo.IsAudit = IsAudit;
                            xmorderInfo.IsOurOrder = true;

                            if (HozestERPContext.Current.User != null)
                            {
                                xmorderInfo.CreateID = HozestERPContext.Current.User.CustomerID;
                                xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                            }
                            else
                            {
                                string UserName = "admin";
                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                if (customer.Count > 0)
                                {
                                    xmorderInfo.CreateID = customer[0].CustomerID;
                                    xmorderInfo.UpdateID = customer[0].CustomerID;
                                }
                            }
                            xmorderInfo.CreateDate = DateTime.Now;
                            xmorderInfo.UpdateDate = DateTime.Now;


                            #region 赠品、返现 唯品会状态为已签收才新增赠品返现订单
                            //status == "STATUS_1" || status == "STATUS_10" || status == "STATUS_11" || status == "STATUS_22" 
                            //if (status == "STATUS_25")//待审核订单（已支付/未处理）
                            //{
                            if (xmorderInfo.OrderInfoCreateDate.ToString().Trim() != null && xmorderInfo.OrderInfoCreateDate.ToString().Trim() != "")
                            {
                                if (DateTime.Parse(xmorderInfo.OrderInfoCreateDate.ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                {
                                    if (xmorderInfo.CustomerServiceRemark != null && xmorderInfo.CustomerServiceRemark != "")
                                    {
                                        string BuyerName = xmorderInfo.BuyerName;//收货人名称
                                        string WantNo = "";//buyerNick;//旺旺号
                                        string paramMessage = string.Empty;

                                        if (xmorderInfo.CustomerServiceRemark.IndexOf("/赠品") > -1 || xmorderInfo.CustomerServiceRemark.IndexOf("/退差价") > -1)
                                        {
                                            #region 赠品
                                            if (xmorderInfo.CustomerServiceRemark.IndexOf("/赠品") > -1)
                                            {
                                                //返回赠品条数
                                                int PremiumsInst = XMPremiumsInst(xmorderInfo.CustomerServiceRemark, WantNo, OrderCode, Convert.ToInt32(StatusEnum.ChildPremiums), ref paramMessage, int.Parse(xMorderInfoApp.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()));

                                            }
                                            #endregion

                                            #region 返现
                                            if (xmorderInfo.CustomerServiceRemark.IndexOf("/退差价") > -1)
                                            {

                                                //返回返现条数
                                                int CashBackApplicationInstCount = CashBackApplicationInst(xmorderInfo.CustomerServiceRemark, WantNo, OrderCode, BuyerName, Convert.ToInt32(StatusEnum.ChildCashBack), ref paramMessage);

                                            }

                                            #endregion
                                        }
                                    }
                                }
                            }

                            //}
                            #endregion

                            string scProductName = "";//商品名称（刷单）
                            #region 订单商品信息
                            vipapis.marketplace.delivery.SovDeliveryServiceHelper.SovDeliveryServiceClient clientDel = new vipapis.marketplace.delivery.SovDeliveryServiceHelper.SovDeliveryServiceClient();
                            Osp.Sdk.Context.InvocationContext invocationContextDel = Osp.Sdk.Context.Factory.GetInstance();
                            vipapis.marketplace.delivery.OrderDetail GORDetail = new vipapis.marketplace.delivery.OrderDetail();
                            GORDetail.SetOrder_id(xmorderInfo.OrderCode);
                            List<string> OrderCodeList = new List<string>();
                            OrderCodeList.Add(xmorderInfo.OrderCode);  
                            invocationContext.SetAppKey(xMorderInfoApp.AppKey);
                            invocationContext.SetAppSecret(xMorderInfoApp.AppSecret);
                            invocationContext.SetAppURL(xMorderInfoApp.ServerUrl);
                            invocationContext.SetAccessToken(xMorderInfoApp.AccessToken);
                            invocationContextDel.SetLanguage("");
                            List<vipapis.marketplace.delivery.OrderDetail> VPHMPOrderDel = clientDel.getOrderDetail(OrderCodeList);
                            xmorderInfo.XM_OrderInfoProductDetails = new List<XMOrderInfoProductDetails>();//初始化
                            if (VPHMPOrderDel.Count > 0) 
                            {
                                for (int j = 0; j < VPHMPOrderDel.Count; j++) 
                                {
                                    List<vipapis.marketplace.delivery.OrderProduct> paramOrderProduct = VPHMPOrderDel[j].GetOrder_products();
                                    decimal payPriceK = 0;//已赋值付款金额
                                    decimal priceTotal = 0;//总商品金额
                                    if (paramOrderProduct.Count > 0) 
                                    {
                                        for (int k = 0; k < paramOrderProduct.Count; k++) 
                                        {
                                            int? newnickid = xMorderInfoApp.NickId;
                                            //string brand_name = paramOrderProduct[k].ToString().Replace("\"", "");//品牌名称
                                            string product_name = paramOrderProduct[k].GetTitle();//商品名称
                                            string size = paramOrderProduct[k].GetSize();//尺码
                                            //string product_no = ja_goods[i]["art_no"].ToString().Replace("\"", "");//货号（对应商品编码）
                                            string product_no = paramOrderProduct[k].GetOuter_sku_id();//货号,条码（商家新增sku时录入）
                                            //string barcode = ja_goods[i]["barcode"].ToString().Replace("\"", "");//条形码
                                            string amount = paramOrderProduct[k].GetNum();//商品数量
                                            string price = paramOrderProduct[k].GetPrice();//单价

                                            if (product_no != null && product_no != "")
                                            {
                                                //商家编码查询从表信息。
                                                var ProductList = IoC.Resolve<IXMOrderInfoAPIService>().GetXMProductListByPlatFormMerchantCode(product_no, int.Parse(xmorderInfo.PlatformTypeId.ToString()));//this.ProjectService.GetXMProductListByMerchantcode(OuterSkuId);

                                                //2015-7-28新增
                                                decimal a = 0;
                                                decimal? tj = 0;
                                                bool IsZuHe = false;
                                                if (ProductList.Count == 0)
                                                {
                                                    ProductList = GetXMProductListByzuheCode(product_no, int.Parse(xmorderInfo.PlatformTypeId.ToString()));// base.ProjectService.GetXMProductListByJDId(SkuId.ToString());
                                                    a = ProductList.Sum(p => p.Costprice.Value * p.count.Value);
                                                    if (ProductList.Count > 0)
                                                    {
                                                        IsZuHe = true;
                                                    }
                                                }

                                                if (ProductList.Count > 0)
                                                {
                                                    decimal payPriceI = 0;//组合已赋值付款金额
                                                    decimal ZuHeTotal = 0;
                                                    for (int w = 0; w < ProductList.Count; w++)
                                                    {
                                                        decimal ZuHeNum = (decimal)ProductList[w].Saleprice * decimal.Parse(ProductList[w].count.ToString());
                                                        ZuHeTotal += ZuHeNum;
                                                    }
                                                    for (int s = 0; s < ProductList.Count; s++)
                                                    {
                                                        var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                        //商品关联主表信息
                                                        //var ProductModel = IoC.Resolve<IXMProductService>().GetXMProductById(int.Parse(ProductList[0].ProductId.ToString()));
                                                        if (ProductList[s].TDateTimeStart != null && ProductList[s].TDateTimeEnd != null && xmorderInfo.OrderInfoCreateDate != null && xmorderInfo.OrderInfoCreateDate.ToString() != "" && xmorderInfo.OrderInfoCreateDate.ToString() != "0001-01-01 00:00:00")
                                                        {
                                                            if (Convert.ToDateTime(xmorderInfo.OrderInfoCreateDate) >= ProductList[s].TDateTimeStart && Convert.ToDateTime(xmorderInfo.OrderInfoCreateDate) <= ProductList[s].TDateTimeEnd)
                                                            {
                                                                //XMOrderInfoProduct.PlatformMerchantCode = product_no;//货号
                                                                XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                                XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                                XMOrderInfoProduct.FactoryPrice = ProductList[s].TCostprice * Convert.ToInt32(amount) * ProductList[s].count;//出厂价
                                                                XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                                XMOrderInfoProduct.TCostprice = ProductList[s].TCostprice;

                                                                if (!string.IsNullOrEmpty(ProductList[s].TManufacturersCode))
                                                                {
                                                                    XMOrderInfoProduct.TManufacturersCode = ProductList[s].TManufacturersCode;//临时厂家编码
                                                                }
                                                                else
                                                                {
                                                                    XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                                }

                                                            }
                                                            else
                                                            {
                                                                //XMOrderInfoProduct.PlatformMerchantCode = product_no;//货号
                                                                XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                                XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                                XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * Convert.ToInt32(amount) * ProductList[s].count;//出厂价*数量
                                                                XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                                XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                                XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                            }

                                                        }
                                                        else
                                                        {
                                                            //XMOrderInfoProduct.PlatformMerchantCode = product_no;//货号
                                                            XMOrderInfoProduct.PlatformMerchantCode = ProductList[s].PlatformMerchantCode;//料号(商家编码)
                                                            XMOrderInfoProduct.Specifications = ProductList[s].Specifications;//尺寸
                                                            XMOrderInfoProduct.FactoryPrice = ProductList[s].Costprice * Convert.ToInt32(amount) * ProductList[s].count;//出厂价*数量
                                                            XMOrderInfoProduct.ProductName = ProductList[s].ProductName;//产品名称 
                                                            XMOrderInfoProduct.TCostprice = ProductList[s].Costprice;
                                                            XMOrderInfoProduct.TManufacturersCode = ProductList[s].ManufacturersCode;
                                                        }

                                                        XMOrderInfoProduct.ProductNum = Convert.ToInt32(amount) * ProductList[s].count;//数量

                                                        decimal PartPayPrice = 0;
                                                        if (i == paramOrderProduct.Count - 1)
                                                        {
                                                            PartPayPrice = (decimal)xmorderInfo.PayPrice - payPriceK;
                                                        }
                                                        else
                                                        {
                                                            PartPayPrice = Math.Round((decimal)xmorderInfo.PayPrice * decimal.Parse(price) * decimal.Parse(amount) / decimal.Parse(xmorderInfo.ProductPrice.ToString()), 2);
                                                            //payPriceK += PartPayPrice;
                                                        }
                                                        if (IsZuHe)
                                                        {
                                                            if (s == ProductList.Count - 1)
                                                            {
                                                                XMOrderInfoProduct.SalesPrice = PartPayPrice - payPriceI;
                                                                payPriceK += PartPayPrice;
                                                            }
                                                            else
                                                            {
                                                                if (ZuHeTotal == 0) //产品销售价没有维护，是0时导致分母为0，计算出错
                                                                {
                                                                    XMOrderInfoProduct.SalesPrice = 0;
                                                                }
                                                                else
                                                                {
                                                                    XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice * (decimal)ProductList[s].Saleprice * decimal.Parse(ProductList[s].count.ToString()) / ZuHeTotal, 2);//销售价
                                                                }
                                                                payPriceI += (decimal)XMOrderInfoProduct.SalesPrice;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            XMOrderInfoProduct.SalesPrice = Math.Round(PartPayPrice, 2);//销售价
                                                            payPriceK += PartPayPrice;
                                                        }

                                                        XMOrderInfoProduct.IsEnable = false;//是否删除
                                                        XMOrderInfoProduct.IsAudit = IsAudit;//是否审核
                                                        XMOrderInfoProduct.IsExpedited = false;//是否加急
                                                        XMOrderInfoProduct.ISArrivedLibrary = false;//是否抵库

                                                        if (scProductName == "")
                                                        {
                                                            scProductName = XMOrderInfoProduct.ProductName;
                                                            //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                        }

                                                        if (HozestERPContext.Current.User != null)
                                                        {
                                                            XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                            XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                        }
                                                        else
                                                        {
                                                            string UserName = "admin";
                                                            List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                            if (customer.Count > 0)
                                                            {
                                                                XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                                XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                            }
                                                        }

                                                        XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                        XMOrderInfoProduct.UpdateDate = DateTime.Now;
                                                        xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);
                                                    }
                                                }
                                                else
                                                {
                                                    var XMOrderInfoProduct = new XMOrderInfoProductDetails();
                                                    XMOrderInfoProduct.PlatformMerchantCode = product_no; //料号（商品编码）
                                                    XMOrderInfoProduct.Specifications = "";//尺寸
                                                    XMOrderInfoProduct.FactoryPrice = 0;//出厂价
                                                    XMOrderInfoProduct.ProductName = "无产品";

                                                    xmorderInfo.IsAbnormal = true;//是否异常

                                                    XMOrderInfoProduct.ProductNum = Convert.ToInt32(amount);//数量

                                                    XMOrderInfoProduct.SalesPrice = decimal.Parse(price) * Convert.ToInt32(amount);//销售价

                                                    XMOrderInfoProduct.IsEnable = false;//是否删除
                                                    XMOrderInfoProduct.IsAudit = IsAudit;//是否审核
                                                    XMOrderInfoProduct.IsExpedited = false;//是否加急
                                                    XMOrderInfoProduct.ISArrivedLibrary = false;//是否抵库

                                                    if (scProductName == "")
                                                    {
                                                        scProductName = XMOrderInfoProduct.ProductName;
                                                        //scSalePrice = decimal.Parse(XMOrderInfoProduct.SalesPrice == null ? "0" : XMOrderInfoProduct.SalesPrice.ToString());
                                                    }

                                                    if (HozestERPContext.Current.User != null)
                                                    {
                                                        XMOrderInfoProduct.CreateID = HozestERPContext.Current.User.CustomerID;
                                                        XMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

                                                    }
                                                    else
                                                    {
                                                        string UserName = "admin";
                                                        List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                                        if (customer.Count > 0)
                                                        {
                                                            XMOrderInfoProduct.CreateID = customer[0].CustomerID;
                                                            XMOrderInfoProduct.UpdateID = customer[0].CustomerID;
                                                        }
                                                    }

                                                    XMOrderInfoProduct.CreateDate = DateTime.Now;
                                                    XMOrderInfoProduct.UpdateDate = DateTime.Now;
                                                    xmorderInfo.XM_OrderInfoProductDetails.Add(XMOrderInfoProduct);

                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            #endregion

                            scSalePrice = (decimal)xmorderInfo.PayPrice;//(唯品会新增)
                            //判断是否刷单
                            if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00"))
                            {
                                xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), OrderCode, xmorderInfo.Remark, CustomerServiceRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售金额：订单支付金额
                            }

                            #region  保存数据

                            if (xmorderInfo.XM_OrderInfoProductDetails != null && xmorderInfo.XM_OrderInfoProductDetails.Count > 0)
                            {
                                xmorderInfo.UpdateDate = DateTime.Now;
                                IoC.Resolve<IXMOrderInfoService>().InsertXMOrderInfo(xmorderInfo);
                                //新建发票
                                if (xmorderInfo.IsInvoiced != null && xmorderInfo.IsInvoiced == true)
                                {
                                    ToAddXMInvoiceInfo(xmorderInfo, 719, "", "", "", "", "");
                                }
                            }
                            InsertCount++;

                            #endregion

                            #endregion
                        }
                        else
                        {
                            #region 修改
                            string Memo = VPHMPOrder[i].GetRemark() + CustomerServiceRemark;//SellerMemo.Substring(SellerMemo.LastIndexOf("'") + 1).ToLower();
                            string RemarksValue = xmorderInfo.Remark + xmorderInfo.CustomerServiceRemark;
                            string StatusValue = xmorderInfo.OrderStatus.Trim();

                            xmorderInfo.OrderStatus = status;//订单状态

                            if (status == "10")
                            {

                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                            }
                            if (status == "22")
                            {
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                }
                            }
                            if (status == "25")
                            {
                                if (xmorderInfo.PayDate == null)
                                {
                                    xmorderInfo.PayDate = DateTime.Now;//付款时间 
                                }
                                if (xmorderInfo.DeliveryTime == null)
                                {
                                    xmorderInfo.DeliveryTime = DateTime.Now;//发货时间 
                                }
                                if (xmorderInfo.CompletionTime == null)
                                {
                                    xmorderInfo.CompletionTime = DateTime.Now;//订单交易完成时间 
                                    AutoSingleRow(OrderCode);
                                }
                            }

                            #region 赠品、返现 唯品会为已签收才能修改返现赠品订单
                            //status == "STATUS_1" || status == "STATUS_10" || status == "STATUS_11" || status == "STATUS_22"
                            //if (status == "STATUS_25")//待审核订单（已支付/未处理）
                            //{ 
                            if (VPHMPOrder[i].GetStore_add_time().ToString().Trim() != null && VPHMPOrder[i].GetStore_add_time().ToString().Trim() != "")
                            {
                                if (DateTime.Parse(VPHMPOrder[i].GetStore_add_time().ToString().Trim()) > DateTime.Parse("2015-04-20 00:00:00"))
                                {
                                    if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                                    {
                                        string BuyerName = VPHMPOrder[i].GetReceiver_name();//收货人名称
                                        string WantNo = "";//buyerNick;//旺旺号
                                        string paramMessage = string.Empty;

                                        #region 赠品、返现 (修改)

                                        if (xmorderInfo.CustomerServiceRemark.Trim() != VPHMPOrder[i].GetRemark().Trim())
                                        {
                                            string CustomerServiceRemarkOld = xmorderInfo.CustomerServiceRemark.Trim();
                                            string CustomerServiceRemarkNew = CustomerServiceRemark.Trim();

                                            if (CustomerServiceRemarkNew.IndexOf("/赠品") > -1 || CustomerServiceRemarkNew.IndexOf("/退差价") > -1)
                                            {
                                                IoC.Resolve<IXMOrderInfoAPIService>().XMPremiumsAndCashBackApplication(CustomerServiceRemarkOld, CustomerServiceRemarkNew, xmorderInfo.OrderCode, xmorderInfo.WantID, xmorderInfo.FullName, (int)xmorderInfo.PlatformTypeId, (int)xmorderInfo.NickID);
                                            }
                                        }
                                        #endregion
                                    }
                                }
                            }

                            //}
                            #endregion

                            xmorderInfo.SourceType = "同步";//数据来源类型
                            xmorderInfo.FinancialAudit = true;//财务审核
                            //更改收货地址
                            if (CustomerServiceRemark.IndexOf("//更改床垫地址") > -1)
                            {
                                string csr = CustomerServiceRemark + "$";
                                string st1 = csr.Substring(csr.IndexOf("//更改床垫地址") + 8).Replace(":", "").Replace("：", "");
                                string st2 = st1.Substring(0, st1.IndexOf("$")).Replace("$", "");

                                //xmorderInfo.DeliveryAddressSpare = st2;//备用收货地址
                            }

                            xmorderInfo.Remark = VPHMPOrder[i].GetRemark();//备注
                            // xmorderInfo.CustomerServiceRemark = CustomerServiceRemark;//客服备注
                            if (VPHMPOrder[i].GetInvoice_title() != "")
                            {
                                xmorderInfo.IsInvoiced = true;//是否发票
                                xmorderInfo.InvoiceHead = VPHMPOrder[i].GetInvoice_title();//发票抬头
                            }
                            xmorderInfo.DistributePrice = Decimal.Parse(VPHMPOrder[i].GetPost_fee());
                            xmorderInfo.ProductPrice = Decimal.Parse(VPHMPOrder[i].GetTotal_fee() == "" ? "0" : VPHMPOrder[i].GetTotal_fee());//商品总金额
                            xmorderInfo.ProductPromotion = Decimal.Parse(VPHMPOrder[i].GetDiscount_fee() == "" ? "0" : VPHMPOrder[i].GetDiscount_fee());//商品促销金额
                            xmorderInfo.OrderPromotion = Decimal.Parse(VPHMPOrder[i].GetEx_discount_fee() == "" ? "0" : VPHMPOrder[i].GetEx_discount_fee());//订单促销金额
                            xmorderInfo.OrderPrice = Decimal.Parse(VPHMPOrder[i].GetTotal_fee() == "" ? "0" : VPHMPOrder[i].GetTotal_fee()) + Decimal.Parse(VPHMPOrder[i].GetPost_fee());//订单金额=商品总金额+快递费用
                            xmorderInfo.PayPrice = (decimal)xmorderInfo.OrderPrice - xmorderInfo.ProductPromotion - xmorderInfo.OrderPromotion;//支付金额=订单金额-商品促销金额-订单促销金额
                            if (status == "STATUS_25")
                            {
                                xmorderInfo.ReceivablePrice = (decimal)xmorderInfo.OrderPrice - (decimal)xmorderInfo.ProductPromotion;//到账金额
                            }
                            else
                            {
                                xmorderInfo.ReceivablePrice = 0;//到账金额
                            }

                            if (HozestERPContext.Current.User != null)
                            {
                                xmorderInfo.UpdateID = HozestERPContext.Current.User.CustomerID;
                            }
                            else
                            {
                                string UserName = "admin";
                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                if (customer.Count > 0)
                                {
                                    xmorderInfo.UpdateID = customer[0].CustomerID;
                                }
                            }
                            xmorderInfo.UpdateDate = DateTime.Now;
                            xmorderInfo.IsOurOrder = true;

                            #region 记录操作

                            int UpsatorID = 0;
                            if (HozestERPContext.Current.User != null)
                            {
                                UpsatorID = HozestERPContext.Current.User.CustomerID;
                            }
                            else
                            {
                                string UserName = "admin";
                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

                                if (customer.Count > 0)
                                {
                                    UpsatorID = customer[0].CustomerID;
                                }
                            }
                            if (VPHMPOrder[i].GetRemark() != null && VPHMPOrder[i].GetRemark() != "")
                            {
                                if (xmorderInfo.Remark != VPHMPOrder[i].GetRemark())
                                {
                                    XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                    record.OrderInfoId = xmorderInfo.ID;
                                    record.PropertyName = "Remark";
                                    record.OldValue = xmorderInfo.Remark;
                                    record.NewValue = VPHMPOrder[i].GetRemark();
                                    record.UpdatorID = UpsatorID;
                                    record.UpdateTime = DateTime.Now;
                                    IoC.Resolve<IXMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                                }
                            }
                            if (CustomerServiceRemark != null && CustomerServiceRemark != "")
                            {
                                if (xmorderInfo.CustomerServiceRemark != CustomerServiceRemark)
                                {
                                    var RecordExist = IoC.Resolve<IXMOrderInfoOperatingRecordService>().GetXMOrderInfoOperatingRecordListByParm(xmorderInfo.ID, "CustomerServiceRemark", xmorderInfo.CustomerServiceRemark, CustomerServiceRemark);
                                    if (RecordExist == null || RecordExist.Count == 0)
                                    {
                                        XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                        record.OrderInfoId = xmorderInfo.ID;
                                        record.PropertyName = "CustomerServiceRemark";
                                        record.OldValue = xmorderInfo.CustomerServiceRemark;
                                        record.NewValue = CustomerServiceRemark;
                                        record.UpdatorID = UpsatorID;
                                        record.UpdateTime = DateTime.Now;
                                        IoC.Resolve<IXMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);
                                    }
                                }
                            }
                            if (xmorderInfo.OrderStatus != status)
                            {
                                XMOrderInfoOperatingRecord record = new XMOrderInfoOperatingRecord();
                                record.OrderInfoId = xmorderInfo.ID;
                                record.PropertyName = "OrderStatus";
                                record.OldValue = System.Convert.ToString(xmorderInfo.OrderStatus);
                                record.NewValue = System.Convert.ToString(status);
                                record.UpdatorID = UpsatorID;
                                //if (Modified != null && Modified != "")
                                //{
                                //    record.UpdateTime = DateTime.Parse(Modified);
                                //}
                                //else
                                //{
                                record.UpdateTime = DateTime.Now;
                                //}
                                IoC.Resolve<IXMOrderInfoOperatingRecordService>().InsertXMOrderInfoOperatingRecord(record); //base.ProjectService.InsertXMOrderInfoOperatingRecord(record);;
                            }


                            #endregion

                            string scProductName = "";//商品名称（刷单）

                            scSalePrice = (decimal)xmorderInfo.PayPrice;
                            //判断是否刷单
                            if (xmorderInfo.OrderInfoCreateDate > DateTime.Parse("2015-03-01 00:00:00"))
                            {
                                xmorderInfo.IsScalping = IoC.Resolve<XMOrderInfoService>().JudgeIsScalpingOrder(int.Parse(xmorderInfo.PlatformTypeId.ToString()), int.Parse(xmorderInfo.NickID.ToString()), OrderCode, xmorderInfo.Remark, CustomerServiceRemark, xmorderInfo.WantID, scProductName, scSalePrice, xmorderInfo.OrderInfoCreateDate);//销售金额：订单支付金额
                            }
                            //xmorderInfo.PayPrice = orderprice ;

                            #region  保存数据

                            IoC.Resolve<IXMOrderInfoService>().UpdateXMOrderInfo(xmorderInfo);
                            UpdateCount++;

                            #endregion

                            #endregion

                        }
                    }
                }               
            }
            catch (Osp.Sdk.Exception.OspException e)
            {
                Console.WriteLine(e.ToString());
            }
        }

        /// <summary>
        /// 京东退款信息
        /// </summary>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="totalCount"></param>
        /// <param name="payDateStart"></param>
        /// <param name="payDateEnd"></param>
        //public void GetJDAndTMAfsServiceMessage(int page, int pageSize, ref Int64 totalCount, DateTime payDateStart, DateTime payDateEnd, XMOrderInfoApp xMorderInfoAppJD, XMOrderInfoApp xMorderInfoAppTM)
        //{
        //    try
        //    {
        //        string QuestionDesc;//客户退款反馈信息
        //        long OrderId;//订单号

        //        for (int i = 1; i < 10; i++)
        //        {
        //            List<AfsServiceMessage> afsServiceMessage = GetAfsServiceMessage(i, pageSize, payDateStart, payDateEnd, out totalCount, xMorderInfoAppJD);

        //            int r = Convert.ToInt32(totalCount) / pageSize;

        //            if (afsServiceMessage.Count > 0)
        //            {
        //                for (int j = 0; j < afsServiceMessage.Count; j++)
        //                {
        //                    OrderId = afsServiceMessage[j].OrderId;
        //                    long afsServiceId = afsServiceMessage[j].AfsServiceId;
        //                    AfsServiceOut afsRefundInfoOut = GetAfsServiceOut(afsServiceId, xMorderInfoAppJD);
        //                    if (afsRefundInfoOut != null)
        //                    {
        //                        QuestionDesc = afsRefundInfoOut.QuestionDesc;

        //                        List<XMOrderInfo> xmOrderInfoList = IoC.Resolve<XMOrderInfoService>().GetXMOrderInfoList();

        //                        var newXMOrderInfo = xmOrderInfoList.Where(q => q.PlatformTypeId == 251 && q.OrderCode == OrderId.ToString()).FirstOrDefault();//.FirstOrDefault() .ToList();
        //                        var newXMOrderInfoProduct = newXMOrderInfo.XM_OrderInfoProductDetails.FirstOrDefault();

        //                        if (newXMOrderInfoProduct != null)
        //                        {
        //                            if (newXMOrderInfoProduct.QuestionDesc != null && newXMOrderInfoProduct.QuestionDesc != "")
        //                            {
        //                                if (newXMOrderInfoProduct.QuestionDesc.IndexOf(afsServiceId.ToString()) == -1)//服务单号不存在
        //                                {
        //                                    newXMOrderInfoProduct.QuestionDesc = newXMOrderInfoProduct.QuestionDesc + "服务单号：" + afsServiceId.ToString() + QuestionDesc + ";/";
        //                                }
        //                            }
        //                            else
        //                            {
        //                                newXMOrderInfoProduct.QuestionDesc = "服务单号：" + afsServiceId.ToString() + QuestionDesc + ";/";
        //                            }
        //                            if (HozestERPContext.Current.User != null)
        //                            {
        //                                newXMOrderInfoProduct.UpdateID = HozestERPContext.Current.User.CustomerID;

        //                            }
        //                            else
        //                            {
        //                                string UserName = "admin";
        //                                List<HozestERP.BusinessLogic.CustomerManagement.Customer>customer = IoC.Resolve<ICustomerService>().GetCustomerByUsernameList(UserName);

        //                                if (customer.Count > 0)
        //                                {
        //                                    newXMOrderInfoProduct.UpdateID = customer[0].CustomerID;
        //                                }
        //                            }

        //                            newXMOrderInfoProduct.UpdateDate = DateTime.Now;

        //                            IoC.Resolve<IXMOrderInfoProductDetailsService>().UpdateXMOrderInfoProductDetails(newXMOrderInfoProduct);
        //                        }
        //                    }

        //                }
        //            }
        //            if (i > r)
        //            {
        //                return;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        //throw new Exception(e.Message); 

        //        IoC.Resolve<IRecordErrorLogs>().WriteErrorLog("负责人:" + HozestERPContext.Current.User.CustomerID.ToString() + ";   方法名:GetJDAndTMAfsServiceMessage;  异常提示：" + ex.Message.ToString() + ";   InnerException:" + ex.InnerException);


        //    }
        //}

        #region 获取退款信息
        /// <summary>
        /// 获取服务单列表信息  jingdong.afsservice.alltask.get
        /// </summary>
        /// <param name="page">页码</param>
        /// <param name="pageSize">每页的条数</param>
        /// <param name="totalCount">总条数</param>
        /// <returns></returns>
        public List<JdSdk.Domains.AfsServiceMessage> GetAfsServiceMessage(int page, int pageSize, DateTime startDate, DateTime endDate, out Int64 totalCount, XMOrderInfoApp xMorderInfoApp)
        {

            try
            {
                long count = 0;
                //AppKey = "C3BDD1943916998096181AFFE213DFB5";
                //AppSecret = "7ac900a3cbba49568a884098fb4a8a7f";
                //CallbackUrl = "http://www.hozest.com";
                //AccessToken = "8367ab51-9345-4a43-8893-9ded184ced2d";
                AppKey = xMorderInfoApp.AppKey;//"C3BDD1943916998096181AFFE213DFB5";
                AppSecret = xMorderInfoApp.AppSecret;//"7ac900a3cbba49568a884098fb4a8a7f";
                CallbackUrl = xMorderInfoApp.CallbackUrl;// "http://www.hozest.com";
                AccessToken = xMorderInfoApp.AccessToken;// "8367ab51-9345-4a43-8893-9ded184ced2d";

                this.Client = new JdSdk.DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);
                JingdongAfsserviceAlltaskGetRequest request = new JingdongAfsserviceAlltaskGetRequest();
                request.PageNumber = page;
                request.PageSize = pageSize;
                //request.AfsApplyTimeBegin = startDate;
                //request.AfsApplyTimeEnd = endDate;  
                JingdongAfsserviceAlltaskGetResponse response = Client.Execute(request);
                JingdongAfsserviceAlltaskGetResponse m = JsonConvert.DeserializeObject<JingdongAfsserviceAlltaskGetResponse>(response.Body);

                if (m.POAT == null)
                {
                    for (int i = 1; i < 10; i++)
                    {
                        this.Client = new JdSdk.DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);
                        JingdongAfsserviceAlltaskGetRequest requestfor = new JingdongAfsserviceAlltaskGetRequest();
                        requestfor.PageNumber = 1;
                        requestfor.PageSize = 30;
                        //request.AfsApplyTimeBegin = startDate;
                        //request.AfsApplyTimeEnd = endDate;  
                        JingdongAfsserviceAlltaskGetResponse responsefor = Client.Execute(requestfor);
                        JingdongAfsserviceAlltaskGetResponse mfor = JsonConvert.DeserializeObject<JingdongAfsserviceAlltaskGetResponse>(responsefor.Body);

                        if (mfor.POAT != null)
                        {
                            if (!responsefor.IsError)
                            {
                                count = mfor.POAT.PublicResultObject.AllAfsService.TotalCount;
                                totalCount = count;
                                return mfor.POAT.PublicResultObject.AllAfsService.result;
                            }
                            else
                            {
                                throw new Exception("错误代码：" + responsefor.ErrCode + "错误信息：" + responsefor.ErrMsg);
                            }
                        }
                    }
                }
                else
                {
                    if (!response.IsError)
                    {
                        count = m.POAT.PublicResultObject.AllAfsService.TotalCount;
                        totalCount = count;
                        return m.POAT.PublicResultObject.AllAfsService.result;
                    }
                    else
                    {
                        throw new Exception("错误代码：" + response.ErrCode + "错误信息：" + response.ErrMsg);
                    }
                }

                totalCount = count;
            }
            catch (Exception ex)
            {
                // throw new Exception(ex.Message);
                totalCount = 0;

                IoC.Resolve<IRecordErrorLogs>().WriteErrorLog("负责人:" + HozestERPContext.Current.User.CustomerID.ToString() + ";   方法名:GetAfsServiceMessage;  异常提示：" + ex.Message.ToString() + ";   InnerException:" + ex.InnerException);
            }
            return null;
        }

        /// <summary>
        /// 获取服务单信息 jingdong.afsservice.serviceinfo.get
        /// </summary>
        /// <param name="AfsServiceId">服务单号</param>
        /// <returns></returns>
        public JdSdk.Domains.AfsServiceOut GetAfsServiceOut(long AfsServiceId, XMOrderInfoApp xMorderInfoApp)
        {

            try
            {
                //AppKey = "C3BDD1943916998096181AFFE213DFB5";
                //AppSecret = "7ac900a3cbba49568a884098fb4a8a7f";
                //CallbackUrl = "http://www.hozest.com";
                //AccessToken = "8367ab51-9345-4a43-8893-9ded184ced2d";
                AppKey = xMorderInfoApp.AppKey;//"C3BDD1943916998096181AFFE213DFB5";
                AppSecret = xMorderInfoApp.AppSecret;//"7ac900a3cbba49568a884098fb4a8a7f";
                CallbackUrl = xMorderInfoApp.CallbackUrl;// "http://www.hozest.com";
                AccessToken = xMorderInfoApp.AccessToken;// "8367ab51-9345-4a43-8893-9ded184ced2d";
                this.Client = new JdSdk.DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);
                JingdongAfsserviceServiceinfoGetRequest request = new JingdongAfsserviceServiceinfoGetRequest();
                request.AfsServiceId = AfsServiceId;

                JingdongAfsserviceServiceinfoGetResponse response = Client.Execute(request);
                JingdongAfsserviceServiceinfoGetResponse m = JsonConvert.DeserializeObject<JingdongAfsserviceServiceinfoGetResponse>(response.Body);

                if (m.PRIAS == null)
                {
                    for (int i = 1; i < 10; i++)
                    {

                        this.Client = new JdSdk.DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);
                        JingdongAfsserviceServiceinfoGetRequest requestfor = new JingdongAfsserviceServiceinfoGetRequest();
                        requestfor.AfsServiceId = AfsServiceId;

                        JingdongAfsserviceServiceinfoGetResponse responsefor = Client.Execute(requestfor);
                        JingdongAfsserviceServiceinfoGetResponse mfor = JsonConvert.DeserializeObject<JingdongAfsserviceServiceinfoGetResponse>(responsefor.Body);

                        if (mfor.PRIAS != null)
                        {
                            if (!responsefor.IsError)
                            {
                                return mfor.PRIAS.PublicResultObject.AfsServiceOut;
                            }
                            else
                            {
                                throw new Exception("错误代码：" + responsefor.ErrCode + "错误信息：" + responsefor.ErrMsg);
                            }
                        }
                    }
                }
                else
                {
                    if (!response.IsError)
                    {
                        return m.PRIAS.PublicResultObject.AfsServiceOut;
                    }
                    else
                    {
                        throw new Exception("错误代码：" + response.ErrCode + "错误信息：" + response.ErrMsg);
                    }
                }

            }
            catch (Exception ex)
            {
                //throw new Exception(ex.Message);  
                IoC.Resolve<IRecordErrorLogs>().WriteErrorLog("负责人:" + HozestERPContext.Current.User.CustomerID.ToString() + ";   方法名:GetAfsServiceOut;  异常提示：" + ex.Message.ToString() + ";   InnerException:" + ex.InnerException);
            }
            return null;
        }


        /// <summary>
        /// 获取退款信息  jingdong.afsservice.refundinfo.get 
        /// </summary>
        /// <param name="AfsServiceId">服务单号 </param>
        /// <returns></returns>
        public List<JdSdk.Domains.AfsFinanceDetailOut> GetAfsRefundInfoOut(long AfsServiceId, out List<JdSdk.Domains.AfsSignatureOut> aso, out JdSdk.Domains.AfsFinanceOut afo, out JdSdk.Domains.AfsRefundOut aro, XMOrderInfoApp xMorderInfoApp)
        {

            try
            {
                List<JdSdk.Domains.AfsSignatureOut> asos = new List<JdSdk.Domains.AfsSignatureOut>();
                JdSdk.Domains.AfsFinanceOut afos = new JdSdk.Domains.AfsFinanceOut();
                JdSdk.Domains.AfsRefundOut aros = new JdSdk.Domains.AfsRefundOut();
                //AppKey = "C3BDD1943916998096181AFFE213DFB5";
                //AppSecret = "7ac900a3cbba49568a884098fb4a8a7f";
                //CallbackUrl = "http://www.hozest.com";
                //AccessToken = "8367ab51-9345-4a43-8893-9ded184ced2d";
                AppKey = xMorderInfoApp.AppKey;//"C3BDD1943916998096181AFFE213DFB5";
                AppSecret = xMorderInfoApp.AppSecret;//"7ac900a3cbba49568a884098fb4a8a7f";
                CallbackUrl = xMorderInfoApp.CallbackUrl;// "http://www.hozest.com";
                AccessToken = xMorderInfoApp.AccessToken;// "8367ab51-9345-4a43-8893-9ded184ced2d";
                this.Client = new JdSdk.DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);
                JingdongAfsserviceRefundinfoGetRequest request = new JingdongAfsserviceRefundinfoGetRequest();
                request.AfsServiceId = AfsServiceId;
                JingdongAfsserviceRefundinfoGetResponse response = Client.Execute(request);
                JingdongAfsserviceRefundinfoGetResponse m = JsonConvert.DeserializeObject<JingdongAfsserviceRefundinfoGetResponse>(response.Body);


                if (m.PRORI == null)
                {
                    for (int i = 1; i < 10; i++)
                    {
                        this.Client = new JdSdk.DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);
                        JingdongAfsserviceRefundinfoGetRequest requestfor = new JingdongAfsserviceRefundinfoGetRequest();
                        requestfor.AfsServiceId = AfsServiceId;
                        JingdongAfsserviceRefundinfoGetResponse responsefor = Client.Execute(requestfor);
                        JingdongAfsserviceRefundinfoGetResponse mfor = JsonConvert.DeserializeObject<JingdongAfsserviceRefundinfoGetResponse>(responsefor.Body);

                        if (mfor.PRORI != null)
                        {
                            if (!responsefor.IsError)
                            {
                                asos = mfor.PRORI.PublicResultObject.afsRefundInfoOuts.afsSignatureOut;
                                afos = mfor.PRORI.PublicResultObject.afsRefundInfoOuts.afsFinanceOut;
                                aros = mfor.PRORI.PublicResultObject.afsRefundInfoOuts.afsRefundOut;
                                aso = asos;
                                afo = afos;
                                aro = aros;
                                return mfor.PRORI.PublicResultObject.afsRefundInfoOuts.afsFinanceDetailOuts;
                            }
                            else
                            {
                                throw new Exception("错误代码：" + responsefor.ErrCode + "错误信息：" + responsefor.ErrMsg);
                            }
                        }
                    }
                }
                else
                {
                    if (!response.IsError)
                    {
                        aso = m.PRORI.PublicResultObject.afsRefundInfoOuts.afsSignatureOut;
                        afo = m.PRORI.PublicResultObject.afsRefundInfoOuts.afsFinanceOut;
                        aro = m.PRORI.PublicResultObject.afsRefundInfoOuts.afsRefundOut;
                        aso = asos;
                        afo = afos;
                        aro = aros;
                        return m.PRORI.PublicResultObject.afsRefundInfoOuts.afsFinanceDetailOuts;
                    }
                    else
                    {
                        throw new Exception("错误代码：" + response.ErrCode + "错误信息：" + response.ErrMsg);
                    }
                }
                aso = asos;
                afo = afos;
                aro = aros;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
            return null;
        }


        #endregion

        static ObjectCache cache = MemoryCache.Default;
        static CacheItemPolicy mPolicy = null;
        const string EXECUTIONDATETIME = "DATETIME.OF.OrderInfo";
        /// <summary>
        /// 订单指定时间抓取数据
        /// </summary>
        public void OrderInfoApplyPolicy()
        {
            //查询 appkey、appSecret、sessionKey
            var XMOrderInfoAppList = IoC.Resolve<IXMOrderInfoAppService>().GetXMOrderInfoAppList();
            XMOrderInfoApp xMorderInfoAppJD = new XMOrderInfoApp();//京东appkey、appSecret、sessionKey
            XMOrderInfoApp xMorderInfoAppTM = new XMOrderInfoApp(); //天猫appkey、appSecret、sessionKey

            for (int i = 0; i < XMOrderInfoAppList.Count; i++)
            {

                if (XMOrderInfoAppList[i].PlatformTypeId == 251)
                {
                    xMorderInfoAppJD = XMOrderInfoAppList[i];
                }
                else if (XMOrderInfoAppList[i].PlatformTypeId == 250)
                {
                    xMorderInfoAppTM = XMOrderInfoAppList[i];
                }
                //} 
                //京东更新条数
                int JDInsertCount = 0;
                //京东修改条数
                int JDUpdateCount = 0;
                //天猫更新条数
                int TMInsertCount = 0;
                //天猫修改条数
                int TMUpdateCount = 0;
                //时间
                string DateStart = Convert.ToDateTime(DateTime.Now).AddMonths(-1).ToString("yyyy-MM-dd HH:mm:ss");
                string DateEnd = Convert.ToDateTime(DateTime.Now).AddHours(-1).ToString("yyyy-MM-dd HH:mm:ss");
                //京东状态
                string newApiOrderStates = "WAIT_SELLER_STOCK_OUT,WAIT_GOODS_RECEIVE_CONFIRM,FINISHED_L,TRADE_CANCELED,LOCKED";
                //天猫
                string Status = "";

                int page = 1;
                int pageSize = 30;
                long totalCount = 0;

                DateTime dtBegin = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 6, 0, 0);
                DateTime dtEnd = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 7, 0, 0);
                if (DateTime.Now >= dtBegin && DateTime.Now <= dtEnd)
                {
                    if (cache[EXECUTIONDATETIME] == null) //应用程序启动后取数据（首次）
                    {
                        mPolicy = new CacheItemPolicy()
                        {
                            Priority = CacheItemPriority.NotRemovable
                        };
                        cache.Set(EXECUTIONDATETIME, DateTime.Now, mPolicy);

                        SynchronousJDOrderData(DateStart, DateEnd, newApiOrderStates, xMorderInfoAppJD);
                        SynchronousTMOrderData(DateStart, DateEnd, Status, ref  TMInsertCount, ref  TMUpdateCount, xMorderInfoAppTM);
                        //SynchronousVPHOrderData(DateStart, DateEnd, ref VPHInsertCount, ref VPHUpdateCount);

                        //GetJDAndTMAfsServiceMessage(page, pageSize, ref totalCount, Convert.ToDateTime(DateStart), Convert.ToDateTime(DateEnd), xMorderInfoAppJD, xMorderInfoAppTM);
                    }
                    else //应用程序启动后取数据（非首次）
                    {
                        DateTime dtExcute = Convert.ToDateTime(cache[EXECUTIONDATETIME]);
                        TimeSpan ts = DateTime.Now - dtExcute;
                        if (ts.TotalDays >= 1)
                        {
                            cache.Set(EXECUTIONDATETIME, DateTime.Now, mPolicy);

                            SynchronousJDOrderData(DateStart, DateEnd, newApiOrderStates, xMorderInfoAppJD);
                            SynchronousTMOrderData(DateStart, DateEnd, Status, ref  TMInsertCount, ref  TMUpdateCount, xMorderInfoAppTM);
                            //SynchronousVPHOrderData(DateStart, DateEnd, ref VPHInsertCount, ref VPHUpdateCount);

                            //GetJDAndTMAfsServiceMessage(page, pageSize, ref totalCount, Convert.ToDateTime(DateStart), Convert.ToDateTime(DateEnd), xMorderInfoAppJD, xMorderInfoAppTM);
                        }
                    }

                    //SynchronousJDOrderData(DateStart, DateEnd, newApiOrderStates, ref  JDInsertCount, ref  JDUpdateCount);
                    //SynchronousTMOrderData(DateStart, DateEnd, Status, ref  TMInsertCount, ref  TMUpdateCount);
                    //GetJDAndTMAfsServiceMessage(page, pageSize, ref totalCount, Convert.ToDateTime(DateStart), Convert.ToDateTime(DateEnd));
                }
            }
        }

        /// <summary>
        /// 根据订单编号 获取客服备注信息 （京东）  jingdong.order.venderRemark.queryByOrderId      查询商家备注 
        /// </summary>
        /// <param name="orderId">订单编号</param>
        /// <param name="orderInfoApp"></param>
        /// <returns></returns>
        public JdSdk.Domain.VenderRemark GetOrderVenderRemark(string orderId, XMOrderInfoApp xMorderInfoApp)//, XMOrderInfoApp orderInfoApp
        {
            try
            {
                //AppKey = "C3BDD1943916998096181AFFE213DFB5";//orderInfoApp.AppKey;//
                //AppSecret = "7ac900a3cbba49568a884098fb4a8a7f";//orderInfoApp.AppSecret;//
                //CallbackUrl = "http://www.hozest.com";//orderInfoApp.CallbackUrl;//
                //AccessToken = "8367ab51-9345-4a43-8893-9ded184ced2d"; // orderInfoApp.AccessToken;//
                AppKey = xMorderInfoApp.AppKey;//"C3BDD1943916998096181AFFE213DFB5";
                AppSecret = xMorderInfoApp.AppSecret;//"7ac900a3cbba49568a884098fb4a8a7f";
                CallbackUrl = xMorderInfoApp.CallbackUrl;// "http://www.hozest.com";
                AccessToken = xMorderInfoApp.AccessToken;// "8367ab51-9345-4a43-8893-9ded184ced2d";

                JdSdk.IJdClient client = new JdSdk.DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);//orderInfoApp.ServerUrl
                OrderVenderRemarkRequest request = new OrderVenderRemarkRequest();
                request.OrderId = orderId;
                OrderVenderRemarkResponse response = client.Execute(request);
                OrderVenderRemarkResponse VRemark = JsonConvert.DeserializeObject<OrderVenderRemarkResponse>(response.Body);


                if (VRemark.VR == null)
                {
                    for (int i = 1; i < 10; i++)
                    {
                        JdSdk.IJdClient clientfor = new JdSdk.DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);//orderInfoApp.ServerUrl
                        OrderVenderRemarkRequest requestfor = new OrderVenderRemarkRequest();
                        requestfor.OrderId = orderId;
                        OrderVenderRemarkResponse responsefor = clientfor.Execute(requestfor);
                        OrderVenderRemarkResponse VRemarkfor = JsonConvert.DeserializeObject<OrderVenderRemarkResponse>(responsefor.Body);

                        if (VRemarkfor.VR != null)
                        {
                            if (!responsefor.IsError)
                            {
                                return VRemarkfor.VR.VenderRemarkQueryResult.VenderRemark;
                            }
                            else
                            {
                                throw new Exception("错误代码：" + responsefor.ErrCode + "错误信息：" + responsefor.ErrMsg);
                            }
                        }
                    }
                }
                else
                {
                    if (!response.IsError)
                    {
                        return VRemark.VR.VenderRemarkQueryResult.VenderRemark;
                    }
                    else
                    {
                        throw new Exception("错误代码：" + response.ErrCode + "错误信息：" + response.ErrMsg);
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

            return null;
        }

        /// <summary>
        /// get to XMProduct list
        /// </summary>
        public List<XMProductNew> GetXMProductListByPlatFormMerchantCode(string PlatFormMerchantCode, int PlatformTypeId)
        {
            //先去找对应平台没有则找通用平台
            var query = from p in this._context.XMProductDetails
                        join b in this._context.XMProducts
                        on p.ProductId equals b.Id
                        where p.IsEnable == false
                        && (PlatFormMerchantCode != "" && p.PlatformMerchantCode == PlatFormMerchantCode && p.PlatformMerchantCode != "")
                        select new XMProductNew
                        {
                            Id = p.Id,
                            ProductId = p.ProductId,
                            PlatformTypeId = p.PlatformTypeId,
                            PlatformMerchantCode = p.PlatformMerchantCode,
                            ProductTypeId = p.ProductTypeId,
                            PlatformInventory = p.PlatformInventory,
                            strUrl = p.strUrl,
                            Images = p.Images,
                            Costprice = p.Costprice,
                            count = 1,
                            Saleprice = p.Saleprice,
                            TCostprice = p.TCostprice,
                            TDateTimeStart = p.TDateTimeStart,
                            TDateTimeEnd = p.TDateTimeEnd,
                            IsMainPush = p.IsMainPush,
                            BrandTypeId = b.BrandTypeId,
                            ProductName = b.ProductName,
                            ManufacturersCode = b.ManufacturersCode,
                            Specifications = b.Specifications,
                            ManufacturersInventory = b.ManufacturersInventory,
                            WarningQuantity = b.WarningQuantity,
                            ProductColors = b.ProductColors,
                            ProductUnit = b.ProductUnit,
                            IsPremiums = b.IsPremiums,
                            IsEnable = b.IsEnable,
                            CreateID = b.CreateID,
                            CreateDate = b.CreateDate,
                            UpdateID = b.UpdateID,
                            UpdateDate = b.UpdateDate,
                            TManufacturersCode = p.TemporaryManufacturersCode
                        };
            var resultArray = query.Where(p => PlatformTypeId == 0 || p.PlatformTypeId == PlatformTypeId).ToList();
            if (resultArray.Count() == 0)//对应的平台没有该货物则查找通用平台
            {
                resultArray = query.Where(p => PlatformTypeId == 0 || p.PlatformTypeId == 508).ToList();
            }
            return resultArray;
        }
        #endregion

        #region 组合产品
        /// <summary>
        /// 组合产品
        /// </summary>
        public List<XMProductNew> GetXMProductListByzuheCode(string PlatFormMerchantCode, int PlatformTypeId)
        {
            var query = from s in this._context.XMProducts  //产品表
                        join a in this._context.XMProductCombinations //组合产品详细
                        on s.Id equals a.ProductID
                        join b in this._context.XMCombinations //组合产品主表
                        on a.CombinationID equals b.ID
                        join p in this._context.XMCombinationDetails  //组合产品从表
                        on b.ID equals p.ProductId
                        where a.IsEnabled == false
                        && s.IsEnable == false
                        && b.IsEnabled == false
                        && p.IsEnable == false
                        && (p.PlatformMerchantCode == PlatFormMerchantCode && p.PlatformMerchantCode != "")
                        && (PlatformTypeId == 0 || p.PlatformTypeId == PlatformTypeId)
                        && p.IsEnable == false
                        select new XMProductNew
                        {
                            Id = s.Id,
                            count = a.Count,
                            BrandTypeId = s.BrandTypeId,
                            ProductName = s.ProductName,
                            ManufacturersCode = s.ManufacturersCode,
                            Specifications = s.Specifications,
                            ManufacturersInventory = s.ManufacturersInventory,
                            WarningQuantity = s.WarningQuantity,
                            ProductColors = s.ProductColors,
                            ProductUnit = s.ProductUnit,
                            IsPremiums = s.IsPremiums,
                            IsEnable = s.IsEnable,
                            CreateID = s.CreateID,
                            CreateDate = s.CreateDate,
                            UpdateID = s.UpdateID,
                            UpdateDate = s.UpdateDate
                        };

            List<XMProductNew> list = new List<XMProductNew>();
            if (query.ToList() != null && query.ToList().Count > 0)
            {
                foreach (XMProductNew info in query.ToList())
                {
                    var detail = IoC.Resolve<IXMProductDetailsService>().GetXMProductDetailsListByProductId(info.Id);
                    var Detail = detail.Where(p => p.PlatformTypeId == PlatformTypeId).ToList();
                    if (Detail != null && Detail.Count() > 0)
                    {
                        XMProductDetails q = Detail[Detail.Count() - 1];
                        info.Id = q.Id;
                        info.ProductId = q.ProductId;
                        info.PlatformTypeId = q.PlatformTypeId;
                        info.PlatformMerchantCode = q.PlatformMerchantCode;
                        info.ProductTypeId = q.ProductTypeId;
                        info.PlatformInventory = q.PlatformInventory;
                        info.strUrl = q.strUrl;
                        info.Images = q.Images;
                        info.Costprice = q.Costprice;
                        info.Saleprice = q.Saleprice;
                        info.TCostprice = q.TCostprice;
                        info.TDateTimeStart = q.TDateTimeStart;
                        info.TDateTimeEnd = q.TDateTimeEnd;
                        info.IsMainPush = q.IsMainPush;
                        info.TManufacturersCode = q.TemporaryManufacturersCode;
                        list.Add(info);
                    }
                }
            }
            return list;
        }

        #endregion

        /// <summary>
        /// 京东 订单出库： 订单SOP出库 jingdong.pop.order.shipment
        /// </summary>
        /// <param name="OrderId">订单id</param>
        /// <param name="LogisticsId">物流公司ID(只可通过获取商家物流公司接口获得),多个物流公司以|分隔</param>
        /// <param name="Waybill">运单号(当厂家自送时运单号可为空，不同物流公司的运单号用|分隔，如果同一物流公司有多个运单号，则用英文逗号分隔)</param>
        /// <returns></returns>
        public JindingOutstoragePesponse GetOutstorage(string OrderId, string LogisticsId, string Waybill, XMOrderInfoApp xMorderInfoApp)
        {

            try
            {
                AppKey = xMorderInfoApp.AppKey;
                AppSecret = xMorderInfoApp.AppSecret;
                CallbackUrl = xMorderInfoApp.CallbackUrl;
                AccessToken = xMorderInfoApp.AccessToken;
                this.Client = new DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);
                JindingOutstorageRequest request = new JindingOutstorageRequest();
                request.OrderId = OrderId;
                request.LogisticsId = LogisticsId;
                request.Waybill = Waybill;
                JindingOutstoragePesponse response = Client.Execute(request);
                JindingOutstoragePesponse m = JsonConvert.DeserializeObject<JindingOutstoragePesponse>(response.Body);



                if (m.IsError)
                {
                    for (int i = 1; i < 10; i++)
                    {
                        this.Client = new DefaultJdClient("https://api.jd.com/routerjson", AppKey, AppSecret, AccessToken);
                        JindingOutstorageRequest requestfor = new JindingOutstorageRequest();
                        requestfor.OrderId = OrderId;
                        requestfor.LogisticsId = LogisticsId;
                        //requestfor.Waybill = Waybill;
                        JindingOutstoragePesponse responsefor = Client.Execute(requestfor);
                        JindingOutstoragePesponse mfor = JsonConvert.DeserializeObject<JindingOutstoragePesponse>(responsefor.Body);

                        if (mfor.IsError)
                        {
                            if (!responsefor.IsError)
                            {
                                return mfor;
                            }
                            else
                            {
                                throw new Exception("错误代码：" + responsefor.ErrCode + "错误信息：" + responsefor.ErrMsg);
                            }
                        }
                    }
                }
                else
                {
                    if (!response.IsError)
                    {
                        return m;
                    }
                    else
                    {
                        throw new Exception("错误代码：" + response.ErrCode + "错误信息：" + response.ErrMsg);
                    }
                }
            }
            catch (Exception ex)
            {
                IoC.Resolve<IRecordErrorLogs>().WriteErrorLog("负责人:" + HozestERPContext.Current.User.CustomerID.ToString() + ";   方法名:GetOutstorage;  异常提示：" + ex.Message.ToString() + ";   InnerException:" + ex.InnerException);
            }

            return null;

        }

        /// <summary>
        /// 淘宝在线发货
        /// </summary>
        /// <param name="OrderId">订单号</param>
        /// <param name="CompanyCode">快递公司CODE</param>
        /// <param name="Waybill"></param>
        /// <param name="xMorderInfoApp"></param>
        /// <returns></returns>
        public bool SendTM(string OrderId, string CompanyCode, string Waybill, XMOrderInfoApp xMorderInfoApp)
        {
            try
            {
                AppKey = xMorderInfoApp.AppKey;
                AppSecret = xMorderInfoApp.AppSecret;
                AccessTokenUrl = xMorderInfoApp.ServerUrl;
                AccessToken = xMorderInfoApp.AccessToken;
                ITopClient client = new DefaultTopClient(AccessTokenUrl, AppKey, AppSecret);
                WlbOrderJzConsignRequest req = new WlbOrderJzConsignRequest();
                //req.SubTid = "1,2,3";
                req.Tid = long.Parse(OrderId);
                JzTopArgs obj2 = new JzTopArgs();
                obj2.MailNo = Waybill;
                req.JzTopArgs_ = obj2;
                Tpdto obj3 = new Tpdto();
                obj3.Name = "顺丰速运";
                obj3.Code = "SF";
                req.LgTpDto_ = obj3;
                Tpdto obj4 = new Tpdto();
                obj4.Name = "";
                obj4.Code = "";
                req.InsTpDto_ = obj4;
                WlbOrderJzConsignResponse rsp = client.Execute(req, AccessToken);
                if (!rsp.IsError)
                {
                    return true;
                }
                else 
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        #region 赠品、返现
        /// <summary>
        /// 返现（除天猫 其它平台）
        /// </summary>
        /// <param name="CustomerServiceRemark">备注信息</param>
        /// <param name="WantNo">旺旺号</param>
        /// <param name="OrderCode">订单号</param>
        /// <param name="ApplicationTypeId">申请类型：返现、赔付</param>
        /// <param name="Dmoney">返现设置—金额（小于不需要运营审核，大于需运营审核）</param>
        public int CashBackApplicationInst(string CustomerServiceRemark, string WantNo, string OrderCode, string FullName, int ApplicationTypeId, ref string paramMessage)
        {
            int inst = 0;//返回操作结果
            string CashBackMoney = "";//返现金额
            string BuyerName = "";//姓名
            string BuyerAlipayNo = "";//收款账号  

            //CustomerServiceRemark = "新邦物流/能发就发/小城///到楼下//赠品：床笠（1.8）/返现200元/（返差价）/支付宝 15657188929/胡群惠/发票/抬头：杭州天胜数码科技有限公司//唐佳宇/已提单，刘娟秀/让物流师傅过去后 把旧的床垫拉回来";
            //CustomerServiceRemark = "万家物流/能发就发/小城/日日顺送货上门//万家送货至苏州市吴中区碧波街吴忠商城16栋B03，陈小琴转程涛，15162452196//赠品:床笠（1.8）/返现100元/（没用优惠券）/卡号 中国银行6013 8261 0102 7250 930/奕程涛//徐文玉/已提单，刘娟秀/收货地址改为：苏州市工业园区群谊二村25&mdash;&mdash;;504，肖一萍，18051106182(0.0)/3.19申通968761956055";
            //CustomerServiceRemark = "补偿 枕头/返现50元/卡号 中国银行6013821900059109874/张三2";
            //CustomerServiceRemark = "补偿 枕头/返现50元/支付宝 ht898@163.com/李四";

            #region 返现

            if (CustomerServiceRemark.IndexOf("退差价") > -1)
            {
                //根据订单号查询 返现信息中是否已经存在 现有订单 
                //var XMCashBackApplicationList = IoC.Resolve<IXMCashBackApplicationService>().GetXMCashBackApplicationByOrderCode(OrderCode,ApplicationTypeId);

                //if (XMCashBackApplicationList.Count == 0)
                //{
                string e = "";
                if (CustomerServiceRemark.IndexOf("退差价") > -1)
                {
                    e = CustomerServiceRemark.Substring(CustomerServiceRemark.IndexOf("退差价") + 3).Trim();
                }
                int f = e.IndexOf("元/");

                if (f > -1)
                {
                    CashBackMoney = e.Substring(0, f);//OrderRemark.Substring(OrderRemark.IndexOf("返现") + 2, OrderRemark.IndexOf("元/") - 2); 
                }
                if ((CustomerServiceRemark.IndexOf("/支付宝") > -1 || CustomerServiceRemark.IndexOf("/卡号") > -1))
                {
                    if (CustomerServiceRemark.IndexOf("/支付宝") > -1)
                    {
                        string a = CustomerServiceRemark.Substring(CustomerServiceRemark.IndexOf("/支付宝") + 4).Trim();
                        int I2 = a.IndexOf("/");
                        if (I2 > -1)
                        {
                            BuyerAlipayNo = a.Substring(0, I2);
                        }
                    }
                    else if (CustomerServiceRemark.IndexOf("/卡号") > -1)
                    {
                        string b = CustomerServiceRemark.Substring(CustomerServiceRemark.IndexOf("/卡号") + 3).Trim();
                        int I = b.IndexOf("/");
                        if (I > -1)
                        {
                            BuyerAlipayNo = b.Substring(0, I);
                        }
                    }
                    if (BuyerAlipayNo != "")
                    {
                        int length = BuyerAlipayNo.Length + 1;
                        string c = CustomerServiceRemark.Substring(CustomerServiceRemark.IndexOf(BuyerAlipayNo) + length);
                        //如是补偿 姓名后面没有/
                        if (CustomerServiceRemark.IndexOf("补偿") > -1)
                        {
                            BuyerName = c;
                        }
                        else
                        {//订单备注信息中 收货人后面有/
                            int I3 = c.IndexOf("/");
                            if (I3 > -1)
                            {
                                BuyerName = c.Substring(0, I3);
                            }
                        }
                    }
                    else
                    {
                        paramMessage = "订单号:" + OrderCode + ",请确认返现信息.";
                    }
                }
                else
                {
                    BuyerName = FullName;//姓名
                    BuyerAlipayNo = "";//收款账号 
                }
                decimal d = 0;

                if (decimal.TryParse(CashBackMoney, out d))//类型转换
                {
                    #region 取设置的返现金额

                    decimal Dmoney = 0;//返现设置—金额（小于不需要运营审核，大于需运营审核）
                    decimal Finance = 0;//财务限额
                    //生成返现申请 
                    int ProjectId = 0;
                    //根据店铺Id查询  取项目Id
                    var XMNick = IoC.Resolve<IXMNickService>().GetXMNickByID(1);
                    if (XMNick != null)
                    {
                        if (XMNick.ProjectId != null)
                        {
                            ProjectId = XMNick.ProjectId.Value;
                        }
                    }
                    //根据项目Id 平台类型查询 返现金额
                    var xMDeductionSetUp = IoC.Resolve<IXMDeductionSetUpService>().GetXMDeductionSetUpByProjectAndPlatformTypeId(ProjectId, 476, 259);

                    if (xMDeductionSetUp != null)
                    {
                        //返现
                        if (xMDeductionSetUp.Deduction != null)
                        {
                            Dmoney = xMDeductionSetUp.Deduction.Value;
                        }
                        //财务限额
                        if(xMDeductionSetUp.Finance!=null)
                        {
                            Finance = (decimal)xMDeductionSetUp.Finance;
                        }
                    }
                    else
                    {
                        //通用
                        var xMDeductionSetUpUsually= IoC.Resolve<IXMDeductionSetUpService>().GetXMDeductionSetUpByProjectAndPlatformTypeId(ProjectId, 508, 259);
                        if(xMDeductionSetUpUsually!=null)
                        {
                            //返现
                            if (xMDeductionSetUpUsually.Deduction != null)
                            {
                                Dmoney = xMDeductionSetUpUsually.Deduction.Value;
                            }
                            //财务限额
                            if (xMDeductionSetUpUsually.Finance != null)
                            {
                                Finance = (decimal)xMDeductionSetUpUsually.Finance;
                            }
                        }
                    }

                    #endregion


                    if (CashBackMoney != "")
                    {
                        BuyerName = BuyerName.Replace("/", "");
                        inst = IoC.Resolve<IXMCashBackApplicationService>().InsertXMCashBackApplication(OrderCode, WantNo, BuyerName, Convert.ToDecimal(CashBackMoney), BuyerAlipayNo, ApplicationTypeId, Dmoney, Finance);
                    }

                    //if (CashBackMoney != "" && BuyerName != "" && BuyerAlipayNo != "")
                    //{ 

                    //    inst = IoC.Resolve<IXMCashBackApplicationService>().InsertXMCashBackApplication(OrderCode, WantNo, BuyerName, Convert.ToDecimal(CashBackMoney), BuyerAlipayNo, ApplicationTypeId, Dmoney);
                    //}
                    //else {

                    //     //paramMessage = "订单号:" + OrderCode + ",请确认返现信息.";
                    //}
                }
                else
                {
                    paramMessage = "订单号:" + OrderCode + ",请确认返现信息.";
                }
                //}
            }
            else
            {
                paramMessage = "订单号:" + OrderCode + ",无返现信息.";
            }
            #endregion

            return inst;
        }

        /// <summary>
        /// 返现（天猫）
        /// </summary>
        /// <param name="CustomerServiceRemark"></param>
        /// <param name="WantNo"></param>
        /// <param name="OrderCode"></param>
        /// <param name="FullName"></param>
        /// <param name="ApplicationTypeId"></param>
        /// <param name="paramMessage"></param>
        /// <returns></returns>
        public int TMCashBackApplicationInst(string CustomerServiceRemark, string WantNo, string OrderCode, string FullName, int ApplicationTypeId, ref string paramMessage)
        {
            int inst = 0;//返回操作结果
            string CashBackMoney = "";//返现金额
            string BuyerName = FullName;//姓名
            string BuyerAlipayNo = "";//收款账号  

            #region 返现

            if (CustomerServiceRemark.IndexOf("退差价") > -1)
            {
                string e = CustomerServiceRemark.Substring(CustomerServiceRemark.IndexOf("退差价") + 3);
                int f = e.IndexOf("元/");

                if (f > -1)
                {
                    CashBackMoney = e.Substring(0, f);//OrderRemark.Substring(OrderRemark.IndexOf("返现") + 2, OrderRemark.IndexOf("元/") - 2); 
                }
                decimal d = 0;

                if (decimal.TryParse(CashBackMoney, out d))//类型转换
                {
                    var XMOrderInfoAppList = IoC.Resolve<IXMOrderInfoAppService>().GetXMOrderInfoAppList();

                    XMOrderInfoApp xMorderInfoAppTMNew = XMOrderInfoAppList.Where(q => q.PlatformTypeId == 250).FirstOrDefault();
                    if (xMorderInfoAppTMNew != null)
                    {
                        Trade trade = GetTrade(Convert.ToInt64(OrderCode), xMorderInfoAppTMNew);

                        if (trade != null)
                        {
                            BuyerAlipayNo = trade.BuyerAlipayNo;
                        }
                    }

                    #region 取设置的返现金额

                    decimal Dmoney = 0;//返现设置—金额（小于不需要运营审核，大于需运营审核）
                    decimal Finance = 0;//财务限额
                    //生成返现申请 
                    int ProjectId = 0;
                    //根据店铺Id查询  取项目Id
                    var XMNick = IoC.Resolve<IXMNickService>().GetXMNickByID(1);
                    if (XMNick != null)
                    {
                        if (XMNick.ProjectId != null)
                        {
                            ProjectId = XMNick.ProjectId.Value;
                        }
                    }
                    //根据项目Id 平台类型查询 返现金额
                    var xMDeductionSetUp = IoC.Resolve<IXMDeductionSetUpService>().GetXMDeductionSetUpByProjectAndPlatformTypeId(ProjectId, 476, 259);

                    if (xMDeductionSetUp != null)
                    {
                        //返现
                        if (xMDeductionSetUp.Deduction != null)
                        {
                            Dmoney = xMDeductionSetUp.Deduction.Value;
                        }
                        //财务限额
                        if(xMDeductionSetUp.Finance!=null)
                        {
                            Finance = (decimal)xMDeductionSetUp.Finance;
                        }
                    }

                    #endregion

                    if (CashBackMoney != "" && BuyerName != "" && BuyerAlipayNo != "")
                    {
                        BuyerName = BuyerName.Replace("/", "");
                        inst = IoC.Resolve<IXMCashBackApplicationService>().InsertXMCashBackApplication(OrderCode, WantNo, BuyerName, Convert.ToDecimal(CashBackMoney), BuyerAlipayNo, ApplicationTypeId, Dmoney, Finance);
                    }
                }
                else
                {
                    paramMessage = "订单号:" + OrderCode + ",请确认返现信息.";
                }

            }
            else
            {
                paramMessage = "订单号:" + OrderCode + ",无返现信息.";
            }

            #endregion

            return inst;
        }

        /// <summary>
        /// 赠品
        /// </summary>
        /// <param name="CustomerServiceRemark">备注信息</param>
        /// <param name="WantNo">旺旺号</param>
        /// <param name="OrderCode">订单号</param>
        public int XMPremiumsInst(string CustomerServiceRemark, string WantNo, string OrderCode, int PremiumsTypeId, ref string paramMessage,int platformTypeId,int nickID)
        {
            //#region 赠品
            ////string str = "";
            ////string str = "";
            ////string str = "万家物流/能发就发/小城/日日顺送货上门/上海整车/万家送货至闵行区昆阳路59号，蔡进周转汪丽昊  ，18302105960//赠品：枕头*2//傅秀珍/已提单，刘娟秀";
            // CustomerServiceRemark = "万家物流/能发就发/小城/日日顺送货上门/上海整车/万家送货至闵行区昆阳路59号，蔡进周转郝晋平，18302105960/等通知//赠品 枕头/返现50//金佩微/已提单，刘娟秀/2.26在线联系可以发";
            // CustomerServiceRemark = "万家物流/2月25日当天发/小城/日日顺送货上门//万家扬州自提，无服务商转陈万琴，4008557777//赠品 床笠（1.8）//牟宣岳/已提单，刘娟秀";
            // CustomerServiceRemark = "万家物流/能发就发/小城/日日顺送货上门//万家送货至苏州市吴中区碧波街吴忠商城16栋B03，陈小琴转吴先生，15162452196//赠品 床笠（1.5）*2+枕头//牟宣岳/已提单，徐文辉";
            //CustomerServiceRemark = "补偿 枕头/返现50元/卡号 中国银行6013821900059109874/张三2";
            //CustomerServiceRemark = "补偿 枕头";

            #region 赠品

            int inst = 0;//返回操作结果
            string PremiumsActivityExplanation = "";//活动说明
            string PremiumsPrdouctName = "";//商品名称
            string PremiumsPlatformMerchantCode = "";//商品编码
            string PremiumsFactoryPrice = "0";//出厂价
            string PremiumsProductNum = "0";//数量
            string Specifications = "";//尺寸    
            int ProductId = -1;
            string PremiumsClaims = "";//赔付说明

            int PremiumsId = 0; //赠品主表Id

            List<string> MerchantCodeList = new List<string>(); //赠品明细 商品编码

            if (CustomerServiceRemark.IndexOf("/赠品") > -1 || CustomerServiceRemark.IndexOf("补偿") > -1)
            {
                #region 新增、修改

                string s = "";
                if (CustomerServiceRemark.IndexOf("/赠品") > -1)
                {
                    s = CustomerServiceRemark.Substring(CustomerServiceRemark.IndexOf("/赠品") + 3).Trim();
                    s = s.Replace("（", "(").Replace("）", ")");
                }
                else if (CustomerServiceRemark.IndexOf("补偿") > -1)
                {
                    s = CustomerServiceRemark.Substring(CustomerServiceRemark.IndexOf("补偿") + 2).Trim();

                    int i = s.IndexOf("/");
                    if (i == -1)
                    {
                        s += s + "/";
                    }

                }

                int f = s.IndexOf("/");
                if (f > -1)
                {
                    PremiumsActivityExplanation = s.Substring(0, f).Trim();

                    #region 去除赠品、：、3个字符 （长度等于2）
                    if (((PremiumsActivityExplanation.IndexOf("（") == -1 && PremiumsActivityExplanation.IndexOf("）") == -1)
                        && (PremiumsActivityExplanation.IndexOf("(") == -1 && PremiumsActivityExplanation.IndexOf(")") == -1))
                        && PremiumsActivityExplanation.IndexOf("+") == -1 && PremiumsActivityExplanation.IndexOf("*") == -1)
                    {
                        PremiumsPrdouctName = s.Substring(0, f).Trim();

                        PremiumsProductNum = "1";

                        if (PremiumsPrdouctName != "")
                        {
                            var xmProductList = IoC.Resolve<IXMProductDetailsService>().GetXMProductDetailsByProductName(PremiumsPrdouctName);
                            if (xmProductList.Count > 0)
                            {
                                PremiumsPlatformMerchantCode = xmProductList[0].PlatformMerchantCode;//ManufacturersCode;
                                PremiumsFactoryPrice = xmProductList[0].Costprice != null ? xmProductList[0].Costprice.Value.ToString() : "0";
                                ProductId = (int)xmProductList[0].Id;
                            }
                        }

                        decimal d = 0;
                        int INum = 0;
                        if (CustomerServiceRemark.IndexOf("补偿") > -1)
                        {
                            string a = "";
                            int js = 0;
                            //截取赔付说明字段
                            if (CustomerServiceRemark.IndexOf("赔付说明") > -1)
                            {
                                a = CustomerServiceRemark.Substring(CustomerServiceRemark.IndexOf("赔付说明")).Trim();
                                js = a.IndexOf("/");
                                PremiumsClaims = a.Substring(0, js).Trim();
                            }
                            PremiumsActivityExplanation = PremiumsActivityExplanation + " " + PremiumsClaims;
                        }
                        if (decimal.TryParse(PremiumsFactoryPrice, out d) && int.TryParse(PremiumsProductNum, out INum))//类型转换
                        {
                            //主表信息（新增、修改）
                            int Id = IoC.Resolve<IXMPremiumsService>().InsertXMPremiums(OrderCode, WantNo, PremiumsTypeId, PremiumsActivityExplanation, false,d* INum, platformTypeId, nickID);
                            //明细信息 （新增、修改）
                            inst = IoC.Resolve<IXMPremiumsDetailsService>().InsertXMPremiumsDetails(Id, ProductId, PremiumsPlatformMerchantCode, PremiumsPrdouctName, d, INum);

                            //主表Id 
                            PremiumsId = Id;

                            //赠品明细 商品编码
                            MerchantCodeList.Add(PremiumsPlatformMerchantCode);

                        }
                        else
                        {
                            paramMessage = "订单号:" + OrderCode + ",请确认赠品信息.";
                        }
                        PremiumsActivityExplanation = "";//活动说明
                        PremiumsPrdouctName = "";//商品名称
                        PremiumsPlatformMerchantCode = "";//商品编码
                        PremiumsFactoryPrice = "0";//出厂价
                        PremiumsProductNum = "0";//数量
                        Specifications = "";//尺寸    
                        ProductId = -1;

                    }
                    #endregion

                    #region 字符大于2个字符
                    else if (f > 2)
                    {
                        string[] J = PremiumsActivityExplanation.Split('+');

                        string strNum = "";//数量字符


                        #region 多个赠品
                        if (PremiumsActivityExplanation != "" && J.Length > 1)
                        {
                            for (int Ji = 0; Ji < J.Length; Ji++)
                            {
                                string pe = J[Ji].Trim();
                                string remsub = "";//尺寸+商品名称字符

                                if (pe != "")
                                {
                                    #region 尺寸、商品名称
                                    if (pe.IndexOf("（") > -1 && pe.IndexOf("）") > -1)
                                    {
                                        string a1 = pe.Substring(pe.IndexOf("（") + 1);
                                        int b = a1.IndexOf("）");
                                        int c = pe.IndexOf("（");

                                        if (c > -1)
                                        {
                                            PremiumsPrdouctName = pe.Substring(0, c);
                                            remsub += PremiumsPrdouctName;
                                        }

                                        if (b > -1)
                                        {
                                            Specifications = a1.Substring(0, b);
                                            remsub += "（" + Specifications + "）";
                                        }

                                    }
                                    if (pe.IndexOf("(") > -1 && pe.IndexOf(")") > -1)
                                    {

                                        string a1 = pe.Substring(pe.IndexOf("(") + 1);
                                        int b = a1.IndexOf(")");
                                        int c = pe.IndexOf("(");
                                        if (c > -1)
                                        {
                                            PremiumsPrdouctName = pe.Substring(0, c);
                                            remsub += PremiumsPrdouctName;
                                        }
                                        if (b > -1)
                                        {
                                            Specifications = a1.Substring(0, b);

                                            remsub += "(" + Specifications + ")";
                                        }

                                    }
                                    #endregion
                                    #region 去除产品名称 + 尺寸 在余下的字符中取数量

                                    int Intd = pe.IndexOf(remsub);
                                    if (Intd > -1)
                                    {
                                        strNum = pe.Substring(remsub.Length).ToLower();
                                    }
                                    if (strNum != "")
                                    {
                                        //数量
                                        if (strNum.IndexOf("*") > -1)
                                        {
                                            string a1 = strNum.Substring(strNum.IndexOf("*") + 1);
                                            PremiumsProductNum = a1;

                                            if (PremiumsPrdouctName == "")
                                            {
                                                PremiumsPrdouctName = pe.Substring(0, pe.IndexOf("*"));
                                            }
                                        }
                                        else
                                        {
                                            PremiumsProductNum = "1";
                                        }
                                    }
                                    else
                                    {

                                        PremiumsProductNum = "1";
                                    }

                                    #endregion

                                    if (PremiumsPrdouctName == "")
                                    {

                                        PremiumsPrdouctName = pe;
                                    }
                                    if (PremiumsPrdouctName != "")
                                    {
                                        var xmProductList = IoC.Resolve<IXMProductDetailsService>().GetXMProductDetailsByProductName(PremiumsPrdouctName);
                                        if (PremiumsPrdouctName != "" && Specifications != "")
                                        {
                                            xmProductList = xmProductList.Where(p => p.Specifications.Contains(Specifications)).ToList();
                                        }
                                        if (xmProductList.Count > 0)
                                        {
                                            ProductId = (int)xmProductList[0].Id;
                                            PremiumsPlatformMerchantCode = xmProductList[0].PlatformMerchantCode;//ManufacturersCode;
                                            PremiumsFactoryPrice = xmProductList[0].Costprice != null ? xmProductList[0].Costprice.Value.ToString() : "0";
                                        }

                                    }


                                    decimal d = 0;
                                    int INum = 0;
                                    if (CustomerServiceRemark.IndexOf("补偿") > -1)
                                    {
                                        string a = "";
                                        int js = 0;
                                        //截取赔付说明字段
                                        if (CustomerServiceRemark.IndexOf("赔付说明") > -1)
                                        {
                                            a = CustomerServiceRemark.Substring(CustomerServiceRemark.IndexOf("赔付说明")).Trim();
                                            js = a.IndexOf("/");
                                            PremiumsClaims = a.Substring(0, js).Trim();
                                        }
                                        PremiumsActivityExplanation = PremiumsActivityExplanation + " " + PremiumsClaims;
                                    }
                                    //if (CustomerServiceRemark.IndexOf("补偿") > -1)
                                    //{
                                    //    PremiumsClaims = s.Substring(f + 1, s.Length - f - 2).Trim();
                                    //    PremiumsActivityExplanation = PremiumsActivityExplanation + " " + PremiumsClaims;
                                    //}
                                    if (decimal.TryParse(PremiumsFactoryPrice, out d) && int.TryParse(PremiumsProductNum, out INum))//类型转换
                                    {
                                        //主表信息（新增、修改）
                                        int Id = IoC.Resolve<IXMPremiumsService>().InsertXMPremiums(OrderCode, WantNo, PremiumsTypeId, PremiumsActivityExplanation, false,d* INum, platformTypeId, nickID);
                                        //明细信息（新增、修改）
                                        inst += IoC.Resolve<IXMPremiumsDetailsService>().InsertXMPremiumsDetails(Id, ProductId, PremiumsPlatformMerchantCode, PremiumsPrdouctName, d, INum);
                                        //主表Id 
                                        PremiumsId = Id;
                                        //赠品明细 商品编码
                                        MerchantCodeList.Add(PremiumsPlatformMerchantCode);

                                    }
                                    else
                                    {
                                        paramMessage = "订单号:" + OrderCode + ",请确认赠品信息.";
                                    }
                                    //PremiumsActivityExplanation = "";//活动说明
                                    PremiumsPrdouctName = "";//商品名称
                                    PremiumsPlatformMerchantCode = "";//商品编码
                                    PremiumsFactoryPrice = "0";//出厂价
                                    PremiumsProductNum = "0";//数量
                                    Specifications = "";//尺寸    
                                    ProductId = -1;
                                }
                                else
                                {
                                    paramMessage = "订单号:" + OrderCode + ",请确认赠品信息.";
                                }
                            }

                        }
                        #endregion

                        #region 单个赠品
                        else
                        {
                            string strNum1 = "";//数量字符
                            string remsub = "";//尺寸+商品名称字符
                            string PEl = PremiumsActivityExplanation.Trim();
                            #region 尺寸、商品名称
                            if (PEl.IndexOf("（") > -1 && PEl.IndexOf("）") > -1)
                            {
                                string a = PEl.Substring(PEl.IndexOf("（") + 1);
                                int b = a.IndexOf("）");
                                int c = PEl.IndexOf("（");
                                if (c > -1)
                                {
                                    PremiumsPrdouctName = PEl.Substring(0, c);
                                    remsub += PremiumsPrdouctName;
                                }
                                if (b > -1)
                                {
                                    Specifications = a.Substring(0, b);
                                    remsub += "（" + Specifications + "）";
                                }

                            }
                            if (PEl.IndexOf("(") > -1 && PEl.IndexOf(")") > -1)
                            {

                                string a = PEl.Substring(PEl.IndexOf("(") + 1);
                                int b = a.IndexOf(")");
                                int c = PEl.IndexOf("(");
                                if (c > -1)
                                {
                                    PremiumsPrdouctName = PEl.Substring(0, c);
                                    remsub += PremiumsPrdouctName;
                                }
                                if (b > -1)
                                {
                                    Specifications = a.Substring(0, b);

                                    remsub += "(" + Specifications + ")";
                                }
                            }
                            #endregion

                            #region 去除产品名称 + 尺寸 在余下的字符中取数量

                            int Intd = PEl.IndexOf(remsub);
                            if (Intd > -1)
                            {
                                strNum1 = PEl.Substring(remsub.Length).ToLower();
                            }
                            if (strNum1 != "")
                            {
                                //数量
                                if (strNum1.IndexOf("*") > -1)
                                {
                                    string a = strNum1.Substring(strNum1.IndexOf("*") + 1);
                                    PremiumsProductNum = a;

                                    if (PremiumsPrdouctName == "")
                                    {
                                        PremiumsPrdouctName = PEl.Substring(0, PEl.IndexOf("*"));
                                    }
                                }
                                else
                                {
                                    PremiumsProductNum = "1";
                                }
                            }
                            else
                            {
                                PremiumsProductNum = "1";
                            }

                            #endregion
                            if (PremiumsPrdouctName != "")
                            {
                                var xmProductList = IoC.Resolve<IXMProductDetailsService>().GetXMProductDetailsByProductName(PremiumsPrdouctName);
                                if (PremiumsPrdouctName != "" && Specifications != "")
                                {
                                    xmProductList = xmProductList.Where(p => p.Specifications.Contains(Specifications)).ToList();
                                }
                                if (xmProductList.Count > 0)
                                {
                                    ProductId = (int)xmProductList[0].Id;
                                    PremiumsPlatformMerchantCode = xmProductList[0].PlatformMerchantCode;//ManufacturersCode;
                                    PremiumsFactoryPrice = xmProductList[0].Costprice != null ? xmProductList[0].Costprice.Value.ToString() : "0";
                                }

                            }

                            decimal d = 0;
                            int INum = 0;
                            if (CustomerServiceRemark.IndexOf("补偿") > -1)
                            {
                                string a = "";
                                int js = 0;
                                //截取赔付说明字段
                                if (CustomerServiceRemark.IndexOf("赔付说明") > -1)
                                {
                                    a = CustomerServiceRemark.Substring(CustomerServiceRemark.IndexOf("赔付说明")).Trim();
                                    js = a.IndexOf("/");
                                    PremiumsClaims = a.Substring(0, js).Trim();
                                }
                                PremiumsActivityExplanation = PremiumsActivityExplanation + " " + PremiumsClaims;
                            }
                            //if (CustomerServiceRemark.IndexOf("补偿") > -1)
                            //{
                            //    PremiumsClaims = s.Substring(f + 1, s.Length - f-2).Trim();
                            //    PremiumsActivityExplanation = PremiumsActivityExplanation + " " + PremiumsClaims;
                            //}
                            if (decimal.TryParse(PremiumsFactoryPrice, out d) && int.TryParse(PremiumsProductNum, out INum))//类型转换
                            {
                                //主表信息（新增、修改）
                                int Id = IoC.Resolve<IXMPremiumsService>().InsertXMPremiums(OrderCode, WantNo, PremiumsTypeId, PremiumsActivityExplanation, false,d* INum, platformTypeId, nickID);
                                //明细信息（新增、修改）
                                inst = IoC.Resolve<IXMPremiumsDetailsService>().InsertXMPremiumsDetails(Id, ProductId, PremiumsPlatformMerchantCode, PremiumsPrdouctName, d, INum);
                                //主表Id 
                                PremiumsId = Id;
                                //赠品明细 商品编码
                                MerchantCodeList.Add(PremiumsPlatformMerchantCode);
                            }
                            else
                            {
                                paramMessage = "订单号:" + OrderCode + ",请确认赠品信息.";
                            }

                            PremiumsActivityExplanation = "";//活动说明
                            PremiumsPrdouctName = "";//商品名称
                            PremiumsPlatformMerchantCode = "";//商品编码
                            PremiumsFactoryPrice = "0";//出厂价
                            PremiumsProductNum = "0";//数量
                            Specifications = "";//尺寸    
                            ProductId = -1;
                        }
                        #endregion
                    }
                    #endregion
                }
                else
                {
                    paramMessage = "订单号:" + OrderCode + ",请确认赠品信息.";
                }

                #endregion

                #region 删除赠品信息中 不存在的商品编码信息

                if (PremiumsId > 0 && MerchantCodeList.Count > 0)
                {
                    //根据主表Id 查询明细表 返回明细信息
                    var XMPremiumsDetailsList = IoC.Resolve<IXMPremiumsDetailsService>().GetXMPremiumsDetailsListByPremiumsId(PremiumsId);
                    var XMPremiumsDetailsListCount = XMPremiumsDetailsList.Select(a => a.PlatformMerchantCode).ToList();
                    if (XMPremiumsDetailsListCount.Count > 0)
                    {

                        //取出两个集合中不同的商品编码 
                        List<string> IdList = (from i in XMPremiumsDetailsListCount
                                               where !MerchantCodeList.Contains(i)
                                               select i).ToList();

                        if (IdList.Count > 0)
                        {
                            //赠品明细数据
                            var deleteList = IoC.Resolve<IXMPremiumsDetailsService>().GetXMPremiumsDetailsListByPremiumsId(PremiumsId, IdList);
                            //赠品明细Id
                            List<int> Ids = deleteList.Select(c => c.Id).ToList();

                            if (Ids.Count > 0)
                            {

                                //删除明细数据
                                IoC.Resolve<IXMPremiumsDetailsService>().BatchDeleteXMPremiumsDetails(Ids);

                            }
                        }

                    }
                }
                #endregion

            }
            else
            {
                paramMessage = "订单号:" + OrderCode + ",无赠品信息.";
            }

            return inst;

            #endregion

        }

        /// <summary>
        /// 数据库原备注 与最新备注 作比较 最新备注有修改执行XMPremiumsAndCashBackApplication 
        /// </summary>
        /// <param name="CustomerServiceRemarkOld">原备注</param>
        /// <param name="CustomerServiceRemarkNew">最新备注</param>
        /// <param name="OrderCode">订单号</param>
        /// <param name="WantID">旺旺号</param>
        /// <param name="FullName">姓名</param>
        public void XMPremiumsAndCashBackApplication(string CustomerServiceRemarkOld, string CustomerServiceRemarkNew, string OrderCode, string WantID, string FullName, int platformTypeId, int nickID)
        {
            //原赠品信息
            string PremiumsOld = "";
            //新赠品信息
            string PremiumsNew = "";

            //原返现信息 
            string CashBackOld = "";
            //新返现信息
            string CashBackNew = "";
            //提示信息
            string paramMessage = "";

            #region 原赠品信息
            string strOld = "";
            if (CustomerServiceRemarkOld.IndexOf("/赠品") > -1)
            {
                strOld = CustomerServiceRemarkOld.Substring(CustomerServiceRemarkOld.IndexOf("/赠品") + 3).Trim();
                strOld = strOld.Replace("（", "(").Replace("）", ")");
            }
            int fOld = strOld.IndexOf("/");
            if (fOld > -1)
            {
                PremiumsOld = strOld.Substring(0, fOld).Trim();
            }
            #endregion

            #region 新赠品信息
            string strNew = "";
            if (CustomerServiceRemarkNew.IndexOf("/赠品") > -1)
            {
                strNew = CustomerServiceRemarkNew.Substring(CustomerServiceRemarkNew.IndexOf("/赠品") + 3).Trim();
                strNew = strNew.Replace("（", "(").Replace("）", ")");
            }
            int fNew = strNew.IndexOf("/");
            if (fNew > -1)
            {
                PremiumsNew = strNew.Substring(0, fNew).Trim();
            }
            #endregion

            #region 赠品信息新增、修改

            //根据订单号、赠品类型：赠品  查询 赠品申请表
            List<XMPremiums> PremiumsList = IoC.Resolve<IXMPremiumsService>().GetXMPremiumsListByOrderCode(OrderCode, (int)StatusEnum.ChildPremiums);

            if (PremiumsOld != PremiumsNew)
            {
                //赠品表中已经存在赠品信息
                if (PremiumsList.Count > 0)
                {
                    var AlreadyCheckList = PremiumsList.Where(a => a.ManagerStatus.Value == (int)StatusEnum.AlreadyCheck).ToList();
                    //赠品信息项目已审核 （不允许修改）
                    if (AlreadyCheckList.Count == 0)
                    {
                        //返回赠品条数
                        int PremiumsInst = IoC.Resolve<IXMOrderInfoAPIService>().XMPremiumsInst(CustomerServiceRemarkNew, WantID, OrderCode, (int)StatusEnum.ChildPremiums, ref paramMessage, platformTypeId, nickID);
                    }
                }
                else
                {
                    //赠品表中不存在 （订单信息） 
                    //返回赠品条数
                    int PremiumsInst = IoC.Resolve<IXMOrderInfoAPIService>().XMPremiumsInst(CustomerServiceRemarkNew, WantID, OrderCode, (int)StatusEnum.ChildPremiums, ref paramMessage, platformTypeId, nickID);
                }
            }
            //最新的返现信息 为空
            if (PremiumsNew == "")
            {
                if (PremiumsList.Count > 0)
                {
                    if (PremiumsList[0].ManagerStatus != Convert.ToInt32(StatusEnum.AlreadyCheck))
                    {
                        //删除原返现信息
                        IoC.Resolve<IXMPremiumsService>().DeleteXMPremiums(PremiumsList[0].Id);
                    }
                }
            }
            #endregion


            #region 原返现信息
            string strCBOld = "";
            if (CustomerServiceRemarkOld.IndexOf("/退差价") > -1)
            {
                strCBOld = CustomerServiceRemarkOld.Substring(CustomerServiceRemarkOld.IndexOf("/退差价")).Trim();
            }
            string BuyerAlipayNoOld = "";//账号信息
            string BuyerNameOld = "";// 收款人账号

            if ((CustomerServiceRemarkOld.IndexOf("/支付宝") > -1 || CustomerServiceRemarkOld.IndexOf("/卡号") > -1))
            {
                if (CustomerServiceRemarkOld.IndexOf("/支付宝") > -1)
                {
                    string a = CustomerServiceRemarkOld.Substring(CustomerServiceRemarkOld.IndexOf("/支付宝")).Trim();
                    int I2 = a.IndexOf("/");
                    BuyerAlipayNoOld = a.Substring(0, I2);
                }
                else if (CustomerServiceRemarkOld.IndexOf("/卡号") > -1)
                {
                    string b = CustomerServiceRemarkOld.Substring(CustomerServiceRemarkOld.IndexOf("/卡号")).Trim();
                    int I = b.IndexOf("/");
                    BuyerAlipayNoOld = b.Substring(0, I);

                }
                if (BuyerAlipayNoOld != "")
                {
                    int length = BuyerAlipayNoOld.Length + 1;
                    string c = CustomerServiceRemarkOld.Substring(CustomerServiceRemarkOld.IndexOf(BuyerAlipayNoOld) + length);
                    //订单备注信息中 收货人后面有/
                    int I3 = c.IndexOf("/");
                    if (I3 > -1)
                    {
                        BuyerNameOld = c.Substring(0, I3);
                    }
                }
            }
            //账号信息、收款人账号 都不为空
            if ((BuyerAlipayNoOld != "" && BuyerNameOld != "") || (BuyerAlipayNoOld == "" && BuyerNameOld != ""))
            {
                int f = strCBOld.IndexOf(BuyerNameOld);
                if (f > -1)
                {
                    //原返现信息
                    CashBackOld = strCBOld.Substring(0, f + BuyerNameOld.Length);
                }
            }
            else if (BuyerAlipayNoOld != "" && BuyerNameOld == "")
            {
                int f = strCBOld.IndexOf(BuyerAlipayNoOld);
                if (f > -1)
                {
                    //原返现信息
                    CashBackOld = strCBOld.Substring(0, f + BuyerAlipayNoOld.Length);
                }
            }
            #endregion

            #region 新返现信息

            string strCBNew = "";
            if (CustomerServiceRemarkNew.IndexOf("退差价") > -1)
            {
                strCBNew = CustomerServiceRemarkNew.Substring(CustomerServiceRemarkNew.IndexOf("退差价")).Trim();
            }
            string BuyerAlipayNoNew = "";//账号信息
            string BuyerNameNew = "";// 收款人账号

            if ((CustomerServiceRemarkNew.IndexOf("/支付宝") > -1 || CustomerServiceRemarkNew.IndexOf("/卡号") > -1))
            {
                if (CustomerServiceRemarkNew.IndexOf("/支付宝") > -1)
                {
                    string a = CustomerServiceRemarkNew.Substring(CustomerServiceRemarkNew.IndexOf("/支付宝")).Trim();
                    int I2 = a.IndexOf("/");
                    BuyerAlipayNoNew = a.Substring(0, I2);
                }
                else if (CustomerServiceRemarkNew.IndexOf("/卡号") > -1)
                {
                    string b = CustomerServiceRemarkNew.Substring(CustomerServiceRemarkNew.IndexOf("/卡号")).Trim();
                    int I = b.IndexOf("/");
                    BuyerAlipayNoNew = b.Substring(0, I);

                }
                if (BuyerAlipayNoNew != "")
                {
                    int length = BuyerAlipayNoNew.Length + 1;
                    string c = CustomerServiceRemarkNew.Substring(CustomerServiceRemarkNew.IndexOf(BuyerAlipayNoNew) + length);
                    //订单备注信息中 收货人后面有/
                    int I3 = c.IndexOf("/");
                    if (I3 > -1)
                    {
                        BuyerNameNew = c.Substring(0, I3);
                    }
                }
            }
            //账号信息、收款人账号 都不为空
            if ((BuyerAlipayNoNew != "" && BuyerNameNew != "") || (BuyerAlipayNoNew == "" && BuyerNameNew != ""))
            {
                int f = strCBNew.IndexOf(BuyerNameNew);
                if (f > -1)
                {
                    //原返现信息
                    CashBackNew = strCBNew.Substring(0, f + BuyerNameNew.Length);
                }
            }
            else if (BuyerAlipayNoNew != "" && BuyerNameNew == "")
            {
                int f = strCBNew.IndexOf(BuyerAlipayNoNew);
                if (f > -1)
                {
                    //原返现信息
                    CashBackNew = strCBNew.Substring(0, f + BuyerAlipayNoNew.Length);
                }
            }

            #endregion

            #region 返现信息新增、修改

            //根据订单号、返现类型：返现 查询返现申请
            List<XMCashBackApplication> XMCashBackApplicationList = IoC.Resolve<IXMCashBackApplicationService>().GetXMCashBackApplicationByOrderCode(OrderCode, (int)StatusEnum.ChildCashBack);

            if (CashBackOld != CashBackNew)
            {

                if (XMCashBackApplicationList.Count > 0)
                {

                    var AlreadyCheckList = XMCashBackApplicationList.Where(a => a.ManagerStatus.Value == (int)StatusEnum.AlreadyCheck).ToList();

                    //返现信息项目已审核 （不允许修改）
                    if (AlreadyCheckList.Count == 0)
                    {
                        //返回返现条数
                        int CashBackInst = IoC.Resolve<IXMOrderInfoAPIService>().CashBackApplicationInst(CustomerServiceRemarkNew, WantID, OrderCode, FullName, (int)StatusEnum.ChildCashBack, ref paramMessage);
                    }

                }
                else
                {
                    //返回返现条数
                    int CashBackInst = IoC.Resolve<IXMOrderInfoAPIService>().CashBackApplicationInst(CustomerServiceRemarkNew, WantID, OrderCode, FullName, (int)StatusEnum.ChildCashBack, ref paramMessage);
                }
            }

            //最新的返现信息 为空
            if (CashBackNew == "")
            {
                if (XMCashBackApplicationList.Count > 0)
                {
                    if (XMCashBackApplicationList[0].ManagerStatus != Convert.ToInt32(StatusEnum.AlreadyCheck))
                    {
                        //删除原返现信息
                        //IoC.Resolve<IXMCashBackApplicationService>().DeleteXMCashBackApplication(XMCashBackApplicationList[0].Id);//不自动删除，增删改到返现申请里面操作
                    }
                }
            }
            #endregion


        }
        #endregion

        /// <summary>
        /// 判断订单是否定时同步
        /// </summary>
        public void TimingGetOrderInfoIsUpdate()
        {
            string msg = "";
            DateTime Now = DateTime.Now;

            var list = IoC.Resolve<IXMOrderInfoAppService>().GetXMOrderInfoAppList();
            foreach (var info in list)
            {
                TimeSpan ts = Now - (DateTime)info.EndSynchronousDate;
                if (ts.TotalHours >= 2 && ts.TotalHours < 4)
                {
                    msg += "平台：" + info.PlatformTypeCodeName.CodeName + "，店铺：" + info.NickName.nick + "，已长时间未更新，请检查！！！\r\n";
                }
            }

            if (msg != "")
            {
                SendEmail mail = new SendEmail();
                mail.ToSendEmail(msg);
            }
        }

        #region 定时获取订单数据

        /// <summary>
        /// 定时同步各平台店铺信息
        /// </summary>
        public void TimingGetOrderInfo()
        {
            //定时执行订单获取
            //每家店铺独立保存同步结束时间，下次同步已这个结束时间作为开始时间
            string NowTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//当前时间，也是本论同步的结束时间
            //{
            int InsertCount = 0;
            int UpdateCount = 0;

            //同步数据
            var query = from p in this._context.XMOrderInfoApps
                        where p.IsEnabled == false
                        select p;
            foreach (XMOrderInfoApp xm in query.ToList())
            {
                //京东
                if (xm.PlatformTypeId == 251 || xm.PlatformTypeId == 382 || xm.PlatformTypeId == 823)//|| xm.PlatformTypeId == 310)
                {
                    try
                    {
                        string StartTime = "";//同步开始时间
                        NowTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//同步结束时间，当前时间，也是本论同步的结束时间
                        if (xm.EndSynchronousDate == null)//首次可能这个字段没有值
                        {
                            StartTime = DateTime.Now.ToString("yyyy-MM-dd") + " 00:00:00";//设定到当天造成0点
                        }
                        else
                        {
                            // StartTime = xm.EndSynchronousDate.ToString();//这种容易丢单
                            StartTime = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd HH:mm:ss");
                        }
                        this.SynchronousJDOrderData(StartTime, NowTime, "", xm);//同步主程序
                        xm.EndSynchronousDate = DateTime.Parse(NowTime);
                        IoC.Resolve<IXMOrderInfoAppService>().UpdateXMOrderInfoApp(xm);//保存同步结束时间
                    }
                    catch (Exception ex)
                    {
                        continue;
                    }
                }
                //天猫
                else if (xm.PlatformTypeId == 250 || xm.PlatformTypeId == 381)
                {
                    try
                    {
                        string StartTime = "";//同步开始时间
                        NowTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//同步结束时间，当前时间，也是本论同步的结束时间
                        if (xm.EndSynchronousDate == null)//首次可能这个字段没有值
                        {
                            StartTime = DateTime.Now.ToString("yyyy-MM-dd") + " 00:00:00";//设定到当天造成0点
                        }
                        else
                        {
                            // StartTime = xm.EndSynchronousDate.ToString();//这种容易丢单
                            StartTime = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd HH:mm:ss");
                        }
                        this.SynchronousTMTradesSoldIncrementGetList(StartTime, NowTime, "", ref InsertCount, ref UpdateCount, xm);//同步主程序
                        xm.EndSynchronousDate = DateTime.Parse(NowTime);
                        IoC.Resolve<IXMOrderInfoAppService>().UpdateXMOrderInfoApp(xm);//保存同步结束时间
                    }
                    catch (Exception ex)
                    {
                        continue;
                    }
                }
                //一号店
                else if (xm.PlatformTypeId == 375)
                {
                    try
                    {
                        string StartTime = "";//同步开始时间
                        NowTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//同步结束时间，当前时间，也是本论同步的结束时间
                        if (xm.EndSynchronousDate == null)//首次可能这个字段没有值
                        {
                            StartTime = DateTime.Now.ToString("yyyy-MM-dd") + " 00:00:00";//设定到当天造成0点
                        }
                        else
                        {
                            // StartTime = xm.EndSynchronousDate.ToString();//这种容易丢单
                            StartTime = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd HH:mm:ss");
                        }
                        this.SynchronousYHDTradesSoldIncrementData(StartTime, NowTime, ref InsertCount, ref UpdateCount, xm);//同步主程序
                        xm.EndSynchronousDate = DateTime.Parse(NowTime);
                        IoC.Resolve<IXMOrderInfoAppService>().UpdateXMOrderInfoApp(xm);//保存同步结束时间
                    }
                    catch (Exception ex)
                    {
                        continue;
                    }
                }
                //苏宁易购
                else if (xm.PlatformTypeId == 383)
                {
                    try
                    {
                        string StartTime = "";//同步开始时间
                        NowTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//同步结束时间，当前时间，也是本论同步的结束时间
                        if (xm.EndSynchronousDate == null)//首次可能这个字段没有值
                        {
                            StartTime = DateTime.Now.ToString("yyyy-MM-dd") + " 00:00:00";//设定到当天造成0点
                        }
                        else
                        {
                            // StartTime = xm.EndSynchronousDate.ToString();//这种容易丢单
                            StartTime = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd HH:mm:ss");
                        }
                        this.SynchronousSuningOrdData(StartTime, NowTime, ref InsertCount, ref UpdateCount, xm);//同步主程序
                        xm.EndSynchronousDate = DateTime.Parse(NowTime);
                        IoC.Resolve<IXMOrderInfoAppService>().UpdateXMOrderInfoApp(xm);//保存同步结束时间
                    }
                    catch (Exception ex)
                    {
                        continue;
                    }
                }
                //唯品会
                else if (xm.PlatformTypeId == 259)
                {
                    try
                    {
                        string StartTime = DateTime.Now.AddMonths(-1).ToString("yyyy-MM-dd HH:mm:ss");//同步开始时间
                        NowTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//同步结束时间，当前时间，也是本论同步的结束时间
                        //if (xm.EndSynchronousDate == null)//首次可能这个字段没有值
                        //{
                        //    StartTime = DateTime.Now.ToString("yyyy-MM-dd") + " 00:00:00";//设定到当天造成0点
                        //}
                        //else
                        //{
                        //    //StartTime = DateTime.Parse(xm.EndSynchronousDate.ToString()).ToString("yyyy-MM-dd HH:mm:ss");//这种容易丢单
                        //    StartTime = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd HH:mm:ss");
                        //}
                        this.SynchronousVPHOrderData(StartTime, NowTime, ref InsertCount, ref UpdateCount, xm);//同步主程序
                        xm.EndSynchronousDate = DateTime.Parse(NowTime);
                        IoC.Resolve<IXMOrderInfoAppService>().UpdateXMOrderInfoApp(xm);//保存同步结束时间
                    }
                    catch (Exception ex)
                    {
                        continue;
                    }
                }
                //唯品会MP
                else if (xm.PlatformTypeId == 803)
                {
                    try
                    {
                        string StartTime = DateTime.Now.AddDays(-7).ToString("yyyy-MM-dd HH:mm:ss");//同步开始时间
                        NowTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");//同步结束时间，当前时间，也是本论同步的结束时间
                        //if (xm.EndSynchronousDate == null)//首次可能这个字段没有值
                        //{
                        //    StartTime = DateTime.Now.ToString("yyyy-MM-dd") + " 00:00:00";//设定到当天造成0点
                        //}
                        //else
                        //{
                        //    StartTime = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd HH:mm:ss");
                        //}
                        this.SynchronousVPHMPOrderData(StartTime, NowTime, ref InsertCount, ref UpdateCount, xm);//同步主程序
                        xm.EndSynchronousDate = DateTime.Parse(NowTime);
                        IoC.Resolve<IXMOrderInfoAppService>().UpdateXMOrderInfoApp(xm);//保存同步结束时间
                    }
                    catch (Exception ex)
                    {
                        continue;
                    }
                }
            }
        }

        #endregion

        #region cainiao.waybill.ii.cancel (商家取消获取的电子面单号)-发货单管理
        public string CancelWaybill(List<XMDelivery> paramXMDelivery)
        {
            string str = "";
            var XMOrderInfoAppList = IoC.Resolve<IXMOrderInfoAppService>().GetXMOrderInfoAppByID(10);//天猫城市爱情旗舰店
            if (XMOrderInfoAppList == null)
            {
                return "获取参数失败";
            }

            foreach (var item in paramXMDelivery)
            {
                //ITopClient client = new DefaultTopClient(XMOrderInfoAppList.ServerUrl, XMOrderInfoAppList.AppKey, XMOrderInfoAppList.AppSecret);
                //WlbWaybillICancelRequest req = new WlbWaybillICancelRequest();
                //WaybillApplyCancelRequest obj1 = new WaybillApplyCancelRequest();
                //obj1.RealUserId = 2134234234L;
                //string[] OrderCodes = new string[] { item.OrderCode };
                //obj1.TradeOrderList = new List<System.String>(OrderCodes);
                //obj1.CpCode = "STO";
                //obj1.WaybillCode = item.LogisticsNumber;
                //obj1.PackageId = item.DeliveryNumber;//"E12321321-1234567";
                //req.WaybillApplyCancelRequest_ = obj1;
                //WlbWaybillICancelResponse rsp = client.Execute(req, XMOrderInfoAppList.AccessToken);

                ITopClient client = new DefaultTopClient(XMOrderInfoAppList.ServerUrl, XMOrderInfoAppList.AppKey, XMOrderInfoAppList.AppSecret);
                CainiaoWaybillIiCancelRequest req = new CainiaoWaybillIiCancelRequest();
                if (item.LogisticsId == 1)//中国邮政
                {
                    req.CpCode = "POSTB";
                }
                else if (item.LogisticsId == 470)//申通
                {
                    req.CpCode = "STO";
                }
                else if (item.LogisticsId == 505)//顺丰速运
                {
                    req.CpCode = "SF";
                }

                req.WaybillCode = item.LogisticsNumber;
                CainiaoWaybillIiCancelResponse rsp = client.Execute(req, XMOrderInfoAppList.AccessToken);
                //Console.WriteLine(rsp.Body);

                if (rsp.CancelResult == true)
                {
                    //物流单号，物流公司
                    item.LogisticsId = null;//赠品-申通，在公共字段-快递公司中
                    item.LogisticsNumber = null;
                    item.IsDelivery = false;
                    item.PrintQuantity = 0;//打印次数
                    item.PrintBatch = 0;
                    item.PrintDateTime = null;//打印时间
                    item.UpdateId = HozestERPContext.Current.User.CustomerID;
                    item.UpdateDate = DateTime.Now;
                    IoC.Resolve<IXMDeliveryService>().UpdateXMDelivery(item);

                    var saleDeliveryInfo = IoC.Resolve<IXMSaleDeliveryService>().GetXMSaleDeliveryListByDeliveryID(item.Id);
                    foreach (var info in saleDeliveryInfo)
                    {
                        info.BillStatus = 0;   //更新为待入库状态
                        info.UpdateDate = DateTime.Now;
                        info.UpdateID = HozestERPContext.Current.User.CustomerID;
                        IoC.Resolve<IXMSaleDeliveryService>().UpdateXMSaleDelivery(info);
                    }
                }
                else
                {
                    str += "订单号：" + item.OrderCode + "，取消电子面单号失败！<br/>";
                }
            }

            return str;
        }
        #endregion

        #region cainiao.waybill.ii.cancel (商家取消获取的电子面单号)-快递管理
        public string CancelWaybill(List<XMExpressManagement> ExpressList)
        {
            string str = "";
            var XMOrderInfoAppList = IoC.Resolve<IXMOrderInfoAppService>().GetXMOrderInfoAppByID(10);//天猫城市爱情旗舰店
            if (XMOrderInfoAppList == null)
            {
                return str;
            }

            foreach (var item in ExpressList)
            {
                ITopClient client = new DefaultTopClient(XMOrderInfoAppList.ServerUrl, XMOrderInfoAppList.AppKey, XMOrderInfoAppList.AppSecret);
                CainiaoWaybillIiCancelRequest req = new CainiaoWaybillIiCancelRequest();
                if (item.ExpressID == 1)//中国邮政
                {
                    req.CpCode = "POSTB";
                }
                else if (item.ExpressID == 470)//申通
                {
                    req.CpCode = "STO";
                }
                else if (item.ExpressID == 505)//顺丰速运
                {
                    req.CpCode = "SF";
                }

                req.WaybillCode = item.CourierNumber;
                CainiaoWaybillIiCancelResponse rsp = client.Execute(req, XMOrderInfoAppList.AccessToken);

                if (rsp.CancelResult == true)
                {
                    item.CourierNumber = "";
                    item.ExpressID = null;
                    item.PrintCount = 0;//打印次数
                    item.PrintDate = null;//打印时间
                    item.UpdateID = HozestERPContext.Current.User.CustomerID;
                    item.UpdateDate = DateTime.Now;
                    IoC.Resolve<IXMExpressManagementService>().UpdateXMExpressManagement(item);
                }
                else
                {
                    str += "收件人：" + item.ReceivingName + "，取消寄件单号失败！<br/>";
                }
            }

            return str;
        }
        #endregion

        #region cainiao.cloudprint.isvtemplates.get (获取商家使用的标准模板)
        /// <summary>
        /// 获取商家使用的标准模板
        /// </summary>
        public string GetisvTemplates(string type, string cp_code)
        {
            string str = "";
            string Str = "";
            string TemplateId = "";

            var XMOrderInfoAppList = IoC.Resolve<IXMOrderInfoAppService>().GetXMOrderInfoAppByID(10);//天猫城市爱情旗舰店
            if (XMOrderInfoAppList == null)
            {
                return str;
            }

            ITopClient client = new DefaultTopClient(XMOrderInfoAppList.ServerUrl, XMOrderInfoAppList.AppKey, XMOrderInfoAppList.AppSecret);
            CainiaoCloudprintMystdtemplatesGetRequest req = new CainiaoCloudprintMystdtemplatesGetRequest();
            CainiaoCloudprintMystdtemplatesGetResponse rsp = client.Execute(req, XMOrderInfoAppList.AccessToken);
            for (int i = 0; i < rsp.Result.Datas.Count; i++)
            {
                string body = rsp.Body;
                if (body.IndexOf("<success>true</success>") != -1)
                {
                    if (body.IndexOf("<user_std_template_url>") != -1)
                    {
                        if (rsp.Result.Datas[i].CpCode == cp_code)
                        {
                            Str = rsp.Result.Datas[i].UserStdTemplates[0].UserStdTemplateUrl;
                            TemplateId = rsp.Result.Datas[i].UserStdTemplates[0].UserStdTemplateId.ToString();
                        }
                    }
                }
            }

            if (type == "1")
            {
                ITopClient Client = new DefaultTopClient(XMOrderInfoAppList.ServerUrl, XMOrderInfoAppList.AppKey, XMOrderInfoAppList.AppSecret);
                CainiaoCloudprintCustomaresGetRequest Req = new CainiaoCloudprintCustomaresGetRequest();
                Req.TemplateId = int.Parse(TemplateId);
                CainiaoCloudprintCustomaresGetResponse Rsp = Client.Execute(Req, XMOrderInfoAppList.AccessToken);
                Str = Rsp.Body;
                if (Str.IndexOf("<success>true</success>") != -1)
                {
                    if (Str.IndexOf("<custom_area_url>") != -1)
                    {
                        int a = Str.IndexOf("<custom_area_url>");
                        Str = Str.Substring(a, Str.Length - a - 1);
                        Str = Str.Replace("<custom_area_url>", "");
                        Str = Str.Substring(0, Str.IndexOf("</custom_area_url>"));
                        Str = Str.Replace("</custom_area_url>", "");
                    }
                }
            }

            return Str;
        }
        #endregion

        #region cainiao.waybill.ii.get (电子面单云打印接口)-发货单管理
        /// <summary>
        /// cainiao.waybill.ii.get (电子面单云打印接口)-发货单管理
        /// </summary>
        public string GetCaiNiaoWaybilInfo(XMDelivery paramXMDelivery, string CpCode)
        {
            string str = "";
            string Template = GetisvTemplates("0", CpCode);//商家模板
            var XMOrderInfoAppList = IoC.Resolve<IXMOrderInfoAppService>().GetXMOrderInfoAppByID(10);//天猫城市爱情旗舰店
            if (XMOrderInfoAppList == null)
            {
                return str;
            }

            ITopClient client = new DefaultTopClient(XMOrderInfoAppList.ServerUrl, XMOrderInfoAppList.AppKey, XMOrderInfoAppList.AppSecret);
            CainiaoWaybillIiGetRequest req = new CainiaoWaybillIiGetRequest();
            CainiaoWaybillIiGetRequest.WaybillCloudPrintApplyNewRequestDomain obj1 = new CainiaoWaybillIiGetRequest.WaybillCloudPrintApplyNewRequestDomain();
            obj1.CpCode = CpCode;//快递公司
            obj1.ProductCode = "STANDARD_EXPRESS";//STANDARD_EXPRESS(标准快递)，COD(货到付款)
            CainiaoWaybillIiGetRequest.UserInfoDtoDomain obj2 = new CainiaoWaybillIiGetRequest.UserInfoDtoDomain();
            CainiaoWaybillIiGetRequest.AddressDtoDomain obj3 = new CainiaoWaybillIiGetRequest.AddressDtoDomain();
            obj3.City = "宁波市";
            obj3.Detail = "创苑路750号软件产业园B座4楼";
            obj3.District = "江东区";
            obj3.Province = "浙江省";
            if (CpCode == "ZTO") 
            {
                obj3.City = "嘉兴市";
                obj3.Detail = "余新镇创业路2号";
                obj3.District = "秀洲区";
                obj3.Province = "浙江省";
            }

            //obj3.Town = "梅墟街道";
            obj2.Address = obj3;
            obj2.Mobile = "";

            var OrderInfo = IoC.Resolve<IXMOrderInfoService>().GetXMOrderInfoByOrderCode(paramXMDelivery.OrderCode);
            if (OrderInfo != null)
            {
                obj2.Name = OrderInfo.NickName;
                if (OrderInfo.PlatformName == "曲美")
                {
                    obj2.Phone = "0574-55712170";
                }
                else
                {
                    obj2.Phone = "0574-55712472";
                }
                if (OrderInfo.NickID == 55)
                {
                    obj2.Name = "集美";
                    obj2.Phone = "4000305570";
                }
                if (CpCode == "ZTO")//迪士尼仓库
                {
                    obj2.Name = "迪士尼仓库";
                    obj2.Phone = "13584098791";
                }
            }
            else
            {
                obj2.Name = "宁波和众互联科技股份有限公司";
                obj2.Phone = "0574-55712472";
            }
            


            obj1.Sender = obj2;
            List<CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain> list5 = new List<CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain>();
            CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain obj6 = new CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain();
            list5.Add(obj6);
            if (CpCode == "SF")
            {
                obj6.LogisticsServices = "{ 'TIMED-DELIVERY': { 'value': 'NEXT-DAY' },'PAYMENT-TYPE': { 'value': 'MONTHLY' } }";
            }
            obj6.ObjectId = DateTime.Now.ToString("yyMMddHHmmssfff");
            CainiaoWaybillIiGetRequest.OrderInfoDtoDomain obj7 = new CainiaoWaybillIiGetRequest.OrderInfoDtoDomain();
            obj7.OrderChannelsType = "TB";
            string[] OrderCodes = new string[] { paramXMDelivery.OrderCode };
            obj7.TradeOrderList = new List<System.String>(OrderCodes); ;
            obj6.OrderInfo = obj7;
            CainiaoWaybillIiGetRequest.PackageInfoDtoDomain obj8 = new CainiaoWaybillIiGetRequest.PackageInfoDtoDomain();
            obj8.Id = paramXMDelivery.DeliveryNumber;//"1";//包裹Id，与订单号组合，可区分同订单多个发货单
            List<CainiaoWaybillIiGetRequest.ItemDomain> list10 = new List<CainiaoWaybillIiGetRequest.ItemDomain>();
            CainiaoWaybillIiGetRequest.ItemDomain obj11 = new CainiaoWaybillIiGetRequest.ItemDomain();
            list10.Add(obj11);
            obj11.Count = 1L;
            obj11.Name = "衣服";
            obj8.Items = list10;
            obj8.Volume = 1L;
            obj8.Weight = 1L;
            obj6.PackageInfo = obj8;
            CainiaoWaybillIiGetRequest.UserInfoDtoDomain obj12 = new CainiaoWaybillIiGetRequest.UserInfoDtoDomain();
            CainiaoWaybillIiGetRequest.AddressDtoDomain obj13 = new CainiaoWaybillIiGetRequest.AddressDtoDomain();
            obj13.City = paramXMDelivery.City;

            string address = paramXMDelivery.Province == null ? "" : paramXMDelivery.Province;
            address += paramXMDelivery.City == null ? "" : paramXMDelivery.City;
            address += paramXMDelivery.County == null ? "" : paramXMDelivery.County;
            if (address.Length > 0)
            {
                obj13.Detail = paramXMDelivery.DeliveryAddress.Replace(address, "");
            }
            else
            {
                obj13.Detail = paramXMDelivery.DeliveryAddress;
            }

            obj13.District = paramXMDelivery.County;
            obj13.Province = paramXMDelivery.Province;
            //obj13.Town = "大河中路街道";
            obj12.Address = obj13;
            obj12.Mobile = paramXMDelivery.Mobile;
            obj12.Name = paramXMDelivery.FullName;
            obj12.Phone = paramXMDelivery.Tel;
            obj6.Recipient = obj12;
            obj6.TemplateUrl = Template;
            obj6.UserId = 12L;
            obj1.TradeOrderInfoDtos = list5;
            req.ParamWaybillCloudPrintApplyNewRequest_ = obj1;
            CainiaoWaybillIiGetResponse rsp = client.Execute(req, XMOrderInfoAppList.AccessToken);
            if (rsp.IsError == false)
            {
                str = rsp.Body;
                int a = str.IndexOf("<cainiao_waybill_ii_get_response>");
                str = str.Substring(a, str.Length - a - 1);
                int b = str.IndexOf("<!--top");
                str = str.Substring(0, b);
                str = str.Replace("&quot;", "\"");
            }
            return str;
        }
        public string GetCaiNiaoWaybilInfo(XMDelivery paramXMDelivery, string CpCode, XMOrderInfoApp XMOrderInfoAppList, ITopClient client)
        {
            string str = "";
            string Template = GetisvTemplates("0", CpCode);//商家模板
           // var XMOrderInfoAppList = IoC.Resolve<IXMOrderInfoAppService>().GetXMOrderInfoAppByID(10);//天猫城市爱情旗舰店
            if (XMOrderInfoAppList == null)
            {
                return str;
            }

            //ITopClient client = new DefaultTopClient(XMOrderInfoAppList.ServerUrl, XMOrderInfoAppList.AppKey, XMOrderInfoAppList.AppSecret);
            CainiaoWaybillIiGetRequest req = new CainiaoWaybillIiGetRequest();
            CainiaoWaybillIiGetRequest.WaybillCloudPrintApplyNewRequestDomain obj1 = new CainiaoWaybillIiGetRequest.WaybillCloudPrintApplyNewRequestDomain();
            obj1.CpCode = CpCode;//快递公司
            obj1.ProductCode = "STANDARD_EXPRESS";//STANDARD_EXPRESS(标准快递)，COD(货到付款)
            CainiaoWaybillIiGetRequest.UserInfoDtoDomain obj2 = new CainiaoWaybillIiGetRequest.UserInfoDtoDomain();
            CainiaoWaybillIiGetRequest.AddressDtoDomain obj3 = new CainiaoWaybillIiGetRequest.AddressDtoDomain();
            obj3.City = "宁波市";
            obj3.Detail = "创苑路750号软件产业园B座4楼";
            obj3.District = "江东区";
            obj3.Province = "浙江省";
            if (CpCode == "ZTO")
            {
                obj3.City = "嘉兴市";
                obj3.Detail = "余新镇创业路2号";
                obj3.District = "秀洲区";
                obj3.Province = "浙江省";
            }

            //obj3.Town = "梅墟街道";
            obj2.Address = obj3;
            obj2.Mobile = "";

            var OrderInfo = IoC.Resolve<IXMOrderInfoService>().GetXMOrderInfoByOrderCode(paramXMDelivery.OrderCode);
            if (OrderInfo != null)
            {
                obj2.Name = OrderInfo.NickName;
                if (OrderInfo.PlatformName == "曲美")
                {
                    obj2.Phone = "0574-55712170";
                }
                else
                {
                    obj2.Phone = "0574-55712472";
                }
                if (OrderInfo.NickID == 55)
                {
                    obj2.Name = "集美";
                    obj2.Phone = "4000305570";
                }
                if (CpCode == "ZTO")//迪士尼仓库
                {
                    obj2.Name = "迪士尼仓库";
                    obj2.Phone = "13584098791";
                }
            }
            else
            {
                obj2.Name = "宁波和众互联科技股份有限公司";
                obj2.Phone = "0574-55712472";
            }



            obj1.Sender = obj2;
            List<CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain> list5 = new List<CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain>();
            CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain obj6 = new CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain();
            list5.Add(obj6);
            if (CpCode == "SF")
            {
                obj6.LogisticsServices = "{ 'TIMED-DELIVERY': { 'value': 'NEXT-DAY' },'PAYMENT-TYPE': { 'value': 'MONTHLY' } }";
            }
            obj6.ObjectId = DateTime.Now.ToString("yyMMddHHmmssfff");
            CainiaoWaybillIiGetRequest.OrderInfoDtoDomain obj7 = new CainiaoWaybillIiGetRequest.OrderInfoDtoDomain();
            obj7.OrderChannelsType = "TB";
            string[] OrderCodes = new string[] { paramXMDelivery.OrderCode };
            obj7.TradeOrderList = new List<System.String>(OrderCodes); ;
            obj6.OrderInfo = obj7;
            CainiaoWaybillIiGetRequest.PackageInfoDtoDomain obj8 = new CainiaoWaybillIiGetRequest.PackageInfoDtoDomain();
            obj8.Id = paramXMDelivery.DeliveryNumber;//"1";//包裹Id，与订单号组合，可区分同订单多个发货单
            List<CainiaoWaybillIiGetRequest.ItemDomain> list10 = new List<CainiaoWaybillIiGetRequest.ItemDomain>();
            CainiaoWaybillIiGetRequest.ItemDomain obj11 = new CainiaoWaybillIiGetRequest.ItemDomain();
            list10.Add(obj11);
            obj11.Count = 1L;
            obj11.Name = "衣服";
            obj8.Items = list10;
            obj8.Volume = 1L;
            obj8.Weight = 1L;
            obj6.PackageInfo = obj8;
            CainiaoWaybillIiGetRequest.UserInfoDtoDomain obj12 = new CainiaoWaybillIiGetRequest.UserInfoDtoDomain();
            CainiaoWaybillIiGetRequest.AddressDtoDomain obj13 = new CainiaoWaybillIiGetRequest.AddressDtoDomain();
            obj13.City = paramXMDelivery.City;

            string address = paramXMDelivery.Province == null ? "" : paramXMDelivery.Province;
            address += paramXMDelivery.City == null ? "" : paramXMDelivery.City;
            address += paramXMDelivery.County == null ? "" : paramXMDelivery.County;
            if (address.Length > 0)
            {
                obj13.Detail = paramXMDelivery.DeliveryAddress.Replace(address, "");
            }
            else
            {
                obj13.Detail = paramXMDelivery.DeliveryAddress;
            }

            obj13.District = paramXMDelivery.County;
            obj13.Province = paramXMDelivery.Province;
            //obj13.Town = "大河中路街道";
            obj12.Address = obj13;
            obj12.Mobile = paramXMDelivery.Mobile;
            obj12.Name = paramXMDelivery.FullName;
            obj12.Phone = paramXMDelivery.Tel;
            obj6.Recipient = obj12;
            obj6.TemplateUrl = Template;
            obj6.UserId = 12L;
            obj1.TradeOrderInfoDtos = list5;
            req.ParamWaybillCloudPrintApplyNewRequest_ = obj1;
            CainiaoWaybillIiGetResponse rsp = client.Execute(req, XMOrderInfoAppList.AccessToken);
            if (rsp.IsError == false)
            {
                str = rsp.Body;
                int a = str.IndexOf("<cainiao_waybill_ii_get_response>");
                str = str.Substring(a, str.Length - a - 1);
                int b = str.IndexOf("<!--top");
                str = str.Substring(0, b);
                str = str.Replace("&quot;", "\"");
            }
            return str;
        }
        #endregion

        #region cainiao.waybill.ii.get (电子面单云打印接口)-快递管理
        /// <summary>
        /// cainiao.waybill.ii.get (电子面单云打印接口)-快递管理
        /// </summary>
        public string GetCaiNiaoWaybilInfo(XMExpressManagement ExpressInfo, string CpCode)
        {
            string str = "";
            string Template = GetisvTemplates("0", CpCode);//商家模板
            var XMOrderInfoAppList = IoC.Resolve<IXMOrderInfoAppService>().GetXMOrderInfoAppByID(10);//天猫城市爱情旗舰店
            if (XMOrderInfoAppList == null)
            {
                return str;
            }

            ITopClient client = new DefaultTopClient(XMOrderInfoAppList.ServerUrl, XMOrderInfoAppList.AppKey, XMOrderInfoAppList.AppSecret);
            CainiaoWaybillIiGetRequest req = new CainiaoWaybillIiGetRequest();
            CainiaoWaybillIiGetRequest.WaybillCloudPrintApplyNewRequestDomain obj1 = new CainiaoWaybillIiGetRequest.WaybillCloudPrintApplyNewRequestDomain();
            obj1.CpCode = CpCode;//快递公司
            obj1.ProductCode = "STANDARD_EXPRESS";//STANDARD_EXPRESS(标准快递)，COD(货到付款)
            CainiaoWaybillIiGetRequest.UserInfoDtoDomain obj2 = new CainiaoWaybillIiGetRequest.UserInfoDtoDomain();
            CainiaoWaybillIiGetRequest.AddressDtoDomain obj3 = new CainiaoWaybillIiGetRequest.AddressDtoDomain();
            obj3.City = "宁波市";
            obj3.Detail = "创苑路750号软件产业园B座4楼";
            obj3.District = "江东区";
            obj3.Province = "浙江省";
            //obj3.Town = "梅墟街道";
            obj2.Address = obj3;
            obj2.Mobile = "";
            obj2.Name = "宁波和众互联科技股份有限公司";
            obj2.Phone = "0574-55712472";

            //obj3.City = "宁波市";
            //obj3.Detail = "江东北路314号和丰创意广场和庭楼10楼王斌奇";
            //obj3.District = "鄞州区";
            //obj3.Province = "浙江省";
            ////obj3.Town = "梅墟街道";
            //obj2.Address = obj3;
            //obj2.Mobile = "";
            //obj2.Name = "立信会计师事务所（特殊普通合伙）宁波分所";
            //obj2.Phone = "17757473685";

            obj1.Sender = obj2;
            List<CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain> list5 = new List<CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain>();
            CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain obj6 = new CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain();
            list5.Add(obj6);
            //obj6.LogisticsServices = "";//"{     \"SVC-COD\": {         \"value\": \"100\"     } }";
            obj6.ObjectId = DateTime.Now.ToString("yyMMddHHmmssfff");
            CainiaoWaybillIiGetRequest.OrderInfoDtoDomain obj7 = new CainiaoWaybillIiGetRequest.OrderInfoDtoDomain();
            obj7.OrderChannelsType = "TB";
            string[] OrderCodes = new string[] { DateTime.Parse(ExpressInfo.CreateDate.ToString()).Ticks.ToString() };
            obj7.TradeOrderList = new List<System.String>(OrderCodes); ;
            obj6.OrderInfo = obj7;
            CainiaoWaybillIiGetRequest.PackageInfoDtoDomain obj8 = new CainiaoWaybillIiGetRequest.PackageInfoDtoDomain();
            obj8.Id = ExpressInfo.ID.ToString();//"1";//包裹Id，与订单号组合，可区分同订单多个发货单
            List<CainiaoWaybillIiGetRequest.ItemDomain> list10 = new List<CainiaoWaybillIiGetRequest.ItemDomain>();
            CainiaoWaybillIiGetRequest.ItemDomain obj11 = new CainiaoWaybillIiGetRequest.ItemDomain();
            list10.Add(obj11);
            obj11.Count = 1L;
            obj11.Name = "衣服";
            obj8.Items = list10;
            obj8.Volume = 1L;
            obj8.Weight = 1L;
            obj6.PackageInfo = obj8;
            CainiaoWaybillIiGetRequest.UserInfoDtoDomain obj12 = new CainiaoWaybillIiGetRequest.UserInfoDtoDomain();
            CainiaoWaybillIiGetRequest.AddressDtoDomain obj13 = new CainiaoWaybillIiGetRequest.AddressDtoDomain();
            obj13.City = ExpressInfo.City;
            obj13.Detail = ExpressInfo.Address;
            obj13.District = ExpressInfo.County;
            obj13.Province = ExpressInfo.Province;
            //obj13.Town = "大河中路街道";
            obj12.Address = obj13;
            obj12.Mobile = ExpressInfo.ReceivingTel;
            obj12.Name = ExpressInfo.ReceivingName;
            obj12.Phone = "";
            //obj12.Phone = ExpressInfo.ReceivingTel;
            obj6.Recipient = obj12;
            obj6.TemplateUrl = Template;
            obj6.UserId = 12L;
            obj1.TradeOrderInfoDtos = list5;
            req.ParamWaybillCloudPrintApplyNewRequest_ = obj1;
            CainiaoWaybillIiGetResponse rsp = client.Execute(req, XMOrderInfoAppList.AccessToken);
            if (rsp.IsError == false)
            {
                str = rsp.Body;
                int a = str.IndexOf("<cainiao_waybill_ii_get_response>");
                str = str.Substring(a, str.Length - a - 1);
                int b = str.IndexOf("<!--top");
                str = str.Substring(0, b);
                str = str.Replace("&quot;", "\"");
            }
            return str;
        }
        public string GetCaiNiaoWaybilInfo(XMExpressManagement ExpressInfo, string CpCode, XMOrderInfoApp XMOrderInfoAppList, ITopClient client)
        {
            string str = "";
            string Template = GetisvTemplates("0", CpCode);//商家模板
            //var XMOrderInfoAppList = IoC.Resolve<IXMOrderInfoAppService>().GetXMOrderInfoAppByID(10);//天猫城市爱情旗舰店
            if (XMOrderInfoAppList == null)
            {
                return str;
            }

            //ITopClient client = new DefaultTopClient(XMOrderInfoAppList.ServerUrl, XMOrderInfoAppList.AppKey, XMOrderInfoAppList.AppSecret);
            CainiaoWaybillIiGetRequest req = new CainiaoWaybillIiGetRequest();
            CainiaoWaybillIiGetRequest.WaybillCloudPrintApplyNewRequestDomain obj1 = new CainiaoWaybillIiGetRequest.WaybillCloudPrintApplyNewRequestDomain();
            obj1.CpCode = CpCode;//快递公司
            obj1.ProductCode = "STANDARD_EXPRESS";//STANDARD_EXPRESS(标准快递)，COD(货到付款)
            CainiaoWaybillIiGetRequest.UserInfoDtoDomain obj2 = new CainiaoWaybillIiGetRequest.UserInfoDtoDomain();
            CainiaoWaybillIiGetRequest.AddressDtoDomain obj3 = new CainiaoWaybillIiGetRequest.AddressDtoDomain();
            obj3.City = "宁波市";
            obj3.Detail = "创苑路750号软件产业园B座4楼";
            obj3.District = "江东区";
            obj3.Province = "浙江省";
            //obj3.Town = "梅墟街道";
            obj2.Address = obj3;
            obj2.Mobile = "";
            obj2.Name = "宁波和众互联科技股份有限公司";
            obj2.Phone = "0574-55712472";

            //obj3.City = "宁波市";
            //obj3.Detail = "江东北路314号和丰创意广场和庭楼10楼王斌奇";
            //obj3.District = "鄞州区";
            //obj3.Province = "浙江省";
            ////obj3.Town = "梅墟街道";
            //obj2.Address = obj3;
            //obj2.Mobile = "";
            //obj2.Name = "立信会计师事务所（特殊普通合伙）宁波分所";
            //obj2.Phone = "17757473685";

            obj1.Sender = obj2;
            List<CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain> list5 = new List<CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain>();
            CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain obj6 = new CainiaoWaybillIiGetRequest.TradeOrderInfoDtoDomain();
            list5.Add(obj6);
            //obj6.LogisticsServices = "";//"{     \"SVC-COD\": {         \"value\": \"100\"     } }";
            obj6.ObjectId = DateTime.Now.ToString("yyMMddHHmmssfff");
            CainiaoWaybillIiGetRequest.OrderInfoDtoDomain obj7 = new CainiaoWaybillIiGetRequest.OrderInfoDtoDomain();
            obj7.OrderChannelsType = "TB";
            string[] OrderCodes = new string[] { DateTime.Parse(ExpressInfo.CreateDate.ToString()).Ticks.ToString() };
            obj7.TradeOrderList = new List<System.String>(OrderCodes); ;
            obj6.OrderInfo = obj7;
            CainiaoWaybillIiGetRequest.PackageInfoDtoDomain obj8 = new CainiaoWaybillIiGetRequest.PackageInfoDtoDomain();
            obj8.Id = ExpressInfo.ID.ToString();//"1";//包裹Id，与订单号组合，可区分同订单多个发货单
            List<CainiaoWaybillIiGetRequest.ItemDomain> list10 = new List<CainiaoWaybillIiGetRequest.ItemDomain>();
            CainiaoWaybillIiGetRequest.ItemDomain obj11 = new CainiaoWaybillIiGetRequest.ItemDomain();
            list10.Add(obj11);
            obj11.Count = 1L;
            obj11.Name = "衣服";
            obj8.Items = list10;
            obj8.Volume = 1L;
            obj8.Weight = 1L;
            obj6.PackageInfo = obj8;
            CainiaoWaybillIiGetRequest.UserInfoDtoDomain obj12 = new CainiaoWaybillIiGetRequest.UserInfoDtoDomain();
            CainiaoWaybillIiGetRequest.AddressDtoDomain obj13 = new CainiaoWaybillIiGetRequest.AddressDtoDomain();
            obj13.City = ExpressInfo.City;
            obj13.Detail = ExpressInfo.Address;
            obj13.District = ExpressInfo.County;
            obj13.Province = ExpressInfo.Province;
            //obj13.Town = "大河中路街道";
            obj12.Address = obj13;
            obj12.Mobile = ExpressInfo.ReceivingTel;
            obj12.Name = ExpressInfo.ReceivingName;
            obj12.Phone = "";
            //obj12.Phone = ExpressInfo.ReceivingTel;
            obj6.Recipient = obj12;
            obj6.TemplateUrl = Template;
            obj6.UserId = 12L;
            obj1.TradeOrderInfoDtos = list5;
            req.ParamWaybillCloudPrintApplyNewRequest_ = obj1;
            CainiaoWaybillIiGetResponse rsp = client.Execute(req, XMOrderInfoAppList.AccessToken);
            if (rsp.IsError == false)
            {
                str = rsp.Body;
                int a = str.IndexOf("<cainiao_waybill_ii_get_response>");
                str = str.Substring(a, str.Length - a - 1);
                int b = str.IndexOf("<!--top");
                str = str.Substring(0, b);
                str = str.Replace("&quot;", "\"");
            }
            return str;
        }
        #endregion

        /// <summary>
        /// 同步新增时，若需要发票，新建发票信息
        /// </summary>
        /// <param name="Info"></param>
        /// <param name="invoiceType">发票类型</param>
        /// <param name="dutyParagraph">税号</param>
        /// <param name="address">地址</param>
        /// <param name="tel">电话</param>
        /// <param name="bankAccount">开户行</param>
        /// <param name="accountNumber">账号</param>
        public void ToAddXMInvoiceInfo(XMOrderInfo Info,int invoiceType,string dutyParagraph,string address,string tel,string bankAccount,string accountNumber)
        {
            XMInvoiceInfo one = new XMInvoiceInfo();
            one.OrderCode = Info.OrderCode;
            one.InvoiceNo = GetInvoiceNo();
            //one.InvoiceType = 719;//默认增值税普通发票

            one.InvoiceType = invoiceType;

            var list = IoC.Resolve<ICodeService>().GetCodeListInfoByCodeTypeID(233);
            if (list.Count > 0)
            {
                foreach (var a in list)
                {
                    if (a.CodeName.IndexOf("新开") != -1)
                    {
                        one.InvoiceStatus = a.CodeID;
                        break;
                    }
                }
            }

            if (string.IsNullOrEmpty(Info.InvoiceHead))
            {
                one.InvoiceHeader = Info.FullName;
            }
            else
            {
                one.InvoiceHeader = Info.InvoiceHead;
            }

            //719 增值税普通发票;720 增值税专用发票;
            if (invoiceType==720)
            {
                one.DutyParagraph = dutyParagraph;
                one.Address = address;
                one.Tel = tel;
                one.BankAccount = bankAccount;
                one.AccountNumber = accountNumber;
            }

            one.IsSingleRow = false;
            one.IsScrap = false;
            one.IsEnable = false;
            one.CreateID = Info.CreateID;
            one.CreateDate = DateTime.Now;
            one.UpdateID = Info.CreateID;
            one.UpdateDate = DateTime.Now;

            one.XM_InvoiceInfoDetail = new List<XMInvoiceInfoDetail>();

            XMInvoiceInfoDetail two = new XMInvoiceInfoDetail();
            string productName = "";
            string specifications = "";
            two.Count = 0;
            for (int i = 0; i < Info.XM_OrderInfoProductDetails.Count; i++)
            {
                var a = (Info.XM_OrderInfoProductDetails).ToList()[i];

                if (string.IsNullOrEmpty(two.ProductUnit))
                {
                    var product = IoC.Resolve<IXMProductDetailsService>().GetXMProductListByTManufacturersCode(a.TManufacturersCode);
                    if (product.Count > 0)
                    {
                        two.ProductUnit = product[0].ProductUnit;
                    }
                }
                two.Count += a.ProductNum;
            }
            if (Info.XM_OrderInfoProductDetails.ToList() != null && (Info.XM_OrderInfoProductDetails).ToList().Count > 0)
            {
                var details = (Info.XM_OrderInfoProductDetails).ToList()[0];
                if (details != null)
                {
                    if (!string.IsNullOrEmpty(details.PlatformMerchantCode))
                    {
                        var productDetail = IoC.Resolve<XMProductDetailsService>().GetXMProductDetailsByPlatformMerchantCode(details.PlatformMerchantCode);
                        if (productDetail != null && productDetail.Count > 0)
                        {
                            var products = IoC.Resolve<XMProductService>().GetXMProductById(productDetail[0].ProductId.Value);
                            if (products != null)
                            {
                                productName = products.BrandTypeCodeName + productDetail[0].ProductTypeCodeName.CodeName;
                                specifications = products.Specifications;
                            }
                        }
                    }
                }
            }
            two.ProductName = productName;
            two.Specifications = specifications;
            two.Amount = Info.PayPrice;
            two.UnitPrice = two.Amount / decimal.Parse(two.Count.ToString());
            two.IsEnable = false;
            two.CreateID = Info.CreateID;
            two.CreateDate = DateTime.Now;
            two.UpdateID = Info.CreateID;
            two.UpdateDate = DateTime.Now;

            one.XM_InvoiceInfoDetail.Add(two);
            IoC.Resolve<IXMInvoiceInfoService>().InsertXMInvoiceInfo(one);
        }

        public string GetInvoiceNo(string InvoiceNo = "")
        {
            Random ran = new Random();
            int RandKey = ran.Next(10000000, 99999999);
            var exist = IoC.Resolve<IXMInvoiceInfoService>().GetXMInvoiceInfoListByInvoiceNo(RandKey.ToString());
            if (exist != null && exist.Count > 0)
            {
                InvoiceNo = GetInvoiceNo();
            }
            else
            {
                return RandKey.ToString();
            }
            return InvoiceNo;
        }

    }
}